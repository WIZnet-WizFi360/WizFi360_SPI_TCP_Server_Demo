
usb2spi_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd8  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004a18  08004a18  00014a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  20000000  08004a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001a0c  200001fc  08004c24  000201fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001c08  08004c24  00021c08  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e870  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002441  00000000  00000000  0002ea9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005839  00000000  00000000  00030edd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000928  00000000  00000000  00036718  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c20  00000000  00000000  00037040  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000047a2  00000000  00000000  00037c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000032e4  00000000  00000000  0003c402  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003f6e6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002424  00000000  00000000  0003f764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001fc 	.word	0x200001fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e28 	.word	0x08003e28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000200 	.word	0x20000200
 80001dc:	08003e28 	.word	0x08003e28

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <HAL_InitTick+0x3c>)
 80005a4:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <HAL_InitTick+0x40>)
{
 80005a6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	7818      	ldrb	r0, [r3, #0]
 80005aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ae:	fbb3 f3f0 	udiv	r3, r3, r0
 80005b2:	6810      	ldr	r0, [r2, #0]
 80005b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005b8:	f000 f896 	bl	80006e8 <HAL_SYSTICK_Config>
 80005bc:	4604      	mov	r4, r0
 80005be:	b958      	cbnz	r0, 80005d8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c0:	2d0f      	cmp	r5, #15
 80005c2:	d809      	bhi.n	80005d8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	4602      	mov	r2, r0
 80005c6:	4629      	mov	r1, r5
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f84a 	bl	8000664 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <HAL_InitTick+0x44>)
 80005d2:	4620      	mov	r0, r4
 80005d4:	601d      	str	r5, [r3, #0]
 80005d6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005d8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005da:	bd38      	pop	{r3, r4, r5, pc}
 80005dc:	20000028 	.word	0x20000028
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000004 	.word	0x20000004

080005e8 <HAL_Init>:
{
 80005e8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <HAL_Init+0x30>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80005f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005fa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000602:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000604:	2003      	movs	r0, #3
 8000606:	f000 f81b 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc8 	bl	80005a0 <HAL_InitTick>
  HAL_MspInit();
 8000610:	f002 f932 	bl	8002878 <HAL_MspInit>
}
 8000614:	2000      	movs	r0, #0
 8000616:	bd08      	pop	{r3, pc}
 8000618:	40023c00 	.word	0x40023c00

0800061c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800061c:	4a03      	ldr	r2, [pc, #12]	; (800062c <HAL_IncTick+0x10>)
 800061e:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_IncTick+0x14>)
 8000620:	6811      	ldr	r1, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	440b      	add	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	2000043c 	.word	0x2000043c
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000634:	4b01      	ldr	r3, [pc, #4]	; (800063c <HAL_GetTick+0x8>)
 8000636:	6818      	ldr	r0, [r3, #0]
}
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	2000043c 	.word	0x2000043c

08000640 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000642:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000644:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	0200      	lsls	r0, r0, #8
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800065a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800065c:	60d3      	str	r3, [r2, #12]
 800065e:	4770      	bx	lr
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000666:	b530      	push	{r4, r5, lr}
 8000668:	68dc      	ldr	r4, [r3, #12]
 800066a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800066e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000674:	2b04      	cmp	r3, #4
 8000676:	bf28      	it	cs
 8000678:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800067a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800067c:	f04f 0501 	mov.w	r5, #1
 8000680:	fa05 f303 	lsl.w	r3, r5, r3
 8000684:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000688:	bf8c      	ite	hi
 800068a:	3c03      	subhi	r4, #3
 800068c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800068e:	4019      	ands	r1, r3
 8000690:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000692:	fa05 f404 	lsl.w	r4, r5, r4
 8000696:	3c01      	subs	r4, #1
 8000698:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800069a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	ea42 0201 	orr.w	r2, r2, r1
 80006a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	bfad      	iteet	ge
 80006a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006aa:	f000 000f 	andlt.w	r0, r0, #15
 80006ae:	4b06      	ldrlt	r3, [pc, #24]	; (80006c8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	bfb5      	itete	lt
 80006b6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed14 	.word	0xe000ed14

080006cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006cc:	2800      	cmp	r0, #0
 80006ce:	db08      	blt.n	80006e2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006d0:	0942      	lsrs	r2, r0, #5
 80006d2:	2301      	movs	r3, #1
 80006d4:	f000 001f 	and.w	r0, r0, #31
 80006d8:	fa03 f000 	lsl.w	r0, r3, r0
 80006dc:	4b01      	ldr	r3, [pc, #4]	; (80006e4 <HAL_NVIC_EnableIRQ+0x18>)
 80006de:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006e2:	4770      	bx	lr
 80006e4:	e000e100 	.word	0xe000e100

080006e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	3801      	subs	r0, #1
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d20a      	bcs.n	8000706 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	21f0      	movs	r1, #240	; 0xf0
 80006f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000714:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000718:	2b02      	cmp	r3, #2
 800071a:	d003      	beq.n	8000724 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000720:	2001      	movs	r0, #1
 8000722:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000724:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000726:	2305      	movs	r3, #5
 8000728:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800072c:	6813      	ldr	r3, [r2, #0]
 800072e:	f023 0301 	bic.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000734:	2000      	movs	r0, #0
}
 8000736:	4770      	bx	lr

08000738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800073c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800073e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000740:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80008e0 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000744:	4a64      	ldr	r2, [pc, #400]	; (80008d8 <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000748:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800074c:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000750:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000754:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 8000758:	42b7      	cmp	r7, r6
 800075a:	f040 80ad 	bne.w	80008b8 <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800075e:	684c      	ldr	r4, [r1, #4]
 8000760:	f024 0a10 	bic.w	sl, r4, #16
 8000764:	f1ba 0f02 	cmp.w	sl, #2
 8000768:	d116      	bne.n	8000798 <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800076a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800076e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000772:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000776:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800077a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800077e:	f04f 0e0f 	mov.w	lr, #15
 8000782:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000786:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800078a:	690d      	ldr	r5, [r1, #16]
 800078c:	fa05 f50b 	lsl.w	r5, r5, fp
 8000790:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000794:	f8cc 5020 	str.w	r5, [ip, #32]
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800079c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800079e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007a2:	fa05 f50c 	lsl.w	r5, r5, ip
 80007a6:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007a8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007ac:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b0:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b4:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007b8:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007bc:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007c0:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80007c2:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c6:	d815      	bhi.n	80007f4 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80007c8:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80007cc:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80007d0:	68cd      	ldr	r5, [r1, #12]
 80007d2:	fa05 fa0c 	lsl.w	sl, r5, ip
 80007d6:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80007da:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 80007de:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80007e2:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80007e6:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 80007ea:	fa0e fe03 	lsl.w	lr, lr, r3
 80007ee:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 80007f2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80007f4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80007f6:	9d00      	ldr	r5, [sp, #0]
 80007f8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007fa:	688f      	ldr	r7, [r1, #8]
 80007fc:	fa07 f70c 	lsl.w	r7, r7, ip
 8000800:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000802:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000804:	00e5      	lsls	r5, r4, #3
 8000806:	d557      	bpl.n	80008b8 <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000808:	f04f 0b00 	mov.w	fp, #0
 800080c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000810:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000814:	4d31      	ldr	r5, [pc, #196]	; (80008dc <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000816:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800081a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800081e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000822:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000826:	9703      	str	r7, [sp, #12]
 8000828:	9f03      	ldr	r7, [sp, #12]
 800082a:	f023 0703 	bic.w	r7, r3, #3
 800082e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000832:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000836:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800083a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800083e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000842:	f04f 0e0f 	mov.w	lr, #15
 8000846:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084a:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800084c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000850:	d039      	beq.n	80008c6 <HAL_GPIO_Init+0x18e>
 8000852:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000856:	42a8      	cmp	r0, r5
 8000858:	d037      	beq.n	80008ca <HAL_GPIO_Init+0x192>
 800085a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800085e:	42a8      	cmp	r0, r5
 8000860:	d035      	beq.n	80008ce <HAL_GPIO_Init+0x196>
 8000862:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000866:	42a8      	cmp	r0, r5
 8000868:	d033      	beq.n	80008d2 <HAL_GPIO_Init+0x19a>
 800086a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086e:	42a8      	cmp	r0, r5
 8000870:	bf14      	ite	ne
 8000872:	2507      	movne	r5, #7
 8000874:	2504      	moveq	r5, #4
 8000876:	fa05 f50c 	lsl.w	r5, r5, ip
 800087a:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800087e:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000880:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000882:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000884:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000888:	bf0c      	ite	eq
 800088a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800088c:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800088e:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000890:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000892:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000896:	bf0c      	ite	eq
 8000898:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800089a:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800089c:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800089e:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008a0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008a4:	bf0c      	ite	eq
 80008a6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008a8:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008aa:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008ac:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ae:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008b0:	bf54      	ite	pl
 80008b2:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008b4:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008b6:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008b8:	3301      	adds	r3, #1
 80008ba:	2b10      	cmp	r3, #16
 80008bc:	f47f af47 	bne.w	800074e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008c0:	b005      	add	sp, #20
 80008c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008c6:	465d      	mov	r5, fp
 80008c8:	e7d5      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 80008ca:	2501      	movs	r5, #1
 80008cc:	e7d3      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 80008ce:	2502      	movs	r5, #2
 80008d0:	e7d1      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 80008d2:	2503      	movs	r5, #3
 80008d4:	e7cf      	b.n	8000876 <HAL_GPIO_Init+0x13e>
 80008d6:	bf00      	nop
 80008d8:	40013c00 	.word	0x40013c00
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80008e4:	6903      	ldr	r3, [r0, #16]
 80008e6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80008e8:	bf14      	ite	ne
 80008ea:	2001      	movne	r0, #1
 80008ec:	2000      	moveq	r0, #0
 80008ee:	4770      	bx	lr

080008f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008f0:	b10a      	cbz	r2, 80008f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008f2:	6181      	str	r1, [r0, #24]
 80008f4:	4770      	bx	lr
 80008f6:	0409      	lsls	r1, r1, #16
 80008f8:	e7fb      	b.n	80008f2 <HAL_GPIO_WritePin+0x2>
	...

080008fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80008fc:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000900:	6959      	ldr	r1, [r3, #20]
 8000902:	4201      	tst	r1, r0
 8000904:	d002      	beq.n	800090c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000906:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000908:	f001 fbc2 	bl	8002090 <HAL_GPIO_EXTI_Callback>
 800090c:	bd08      	pop	{r3, pc}
 800090e:	bf00      	nop
 8000910:	40013c00 	.word	0x40013c00

08000914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000918:	4604      	mov	r4, r0
 800091a:	b918      	cbnz	r0, 8000924 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800091c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800091e:	b002      	add	sp, #8
 8000920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000924:	6803      	ldr	r3, [r0, #0]
 8000926:	07dd      	lsls	r5, r3, #31
 8000928:	d410      	bmi.n	800094c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800092a:	6823      	ldr	r3, [r4, #0]
 800092c:	0798      	lsls	r0, r3, #30
 800092e:	d458      	bmi.n	80009e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	071a      	lsls	r2, r3, #28
 8000934:	f100 809a 	bmi.w	8000a6c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000938:	6823      	ldr	r3, [r4, #0]
 800093a:	075b      	lsls	r3, r3, #29
 800093c:	f100 80b8 	bmi.w	8000ab0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000940:	69a2      	ldr	r2, [r4, #24]
 8000942:	2a00      	cmp	r2, #0
 8000944:	f040 8119 	bne.w	8000b7a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000948:	2000      	movs	r0, #0
 800094a:	e7e8      	b.n	800091e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800094c:	4ba6      	ldr	r3, [pc, #664]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 800094e:	689a      	ldr	r2, [r3, #8]
 8000950:	f002 020c 	and.w	r2, r2, #12
 8000954:	2a04      	cmp	r2, #4
 8000956:	d007      	beq.n	8000968 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800095e:	2a08      	cmp	r2, #8
 8000960:	d10a      	bne.n	8000978 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	0259      	lsls	r1, r3, #9
 8000966:	d507      	bpl.n	8000978 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000968:	4b9f      	ldr	r3, [pc, #636]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	039a      	lsls	r2, r3, #14
 800096e:	d5dc      	bpl.n	800092a <HAL_RCC_OscConfig+0x16>
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1d9      	bne.n	800092a <HAL_RCC_OscConfig+0x16>
 8000976:	e7d1      	b.n	800091c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000978:	6863      	ldr	r3, [r4, #4]
 800097a:	4d9b      	ldr	r5, [pc, #620]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 800097c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000980:	d111      	bne.n	80009a6 <HAL_RCC_OscConfig+0x92>
 8000982:	682b      	ldr	r3, [r5, #0]
 8000984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000988:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800098a:	f7ff fe53 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800098e:	4d96      	ldr	r5, [pc, #600]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000990:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000992:	682b      	ldr	r3, [r5, #0]
 8000994:	039b      	lsls	r3, r3, #14
 8000996:	d4c8      	bmi.n	800092a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000998:	f7ff fe4c 	bl	8000634 <HAL_GetTick>
 800099c:	1b80      	subs	r0, r0, r6
 800099e:	2864      	cmp	r0, #100	; 0x64
 80009a0:	d9f7      	bls.n	8000992 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80009a2:	2003      	movs	r0, #3
 80009a4:	e7bb      	b.n	800091e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009aa:	d104      	bne.n	80009b6 <HAL_RCC_OscConfig+0xa2>
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b2:	602b      	str	r3, [r5, #0]
 80009b4:	e7e5      	b.n	8000982 <HAL_RCC_OscConfig+0x6e>
 80009b6:	682a      	ldr	r2, [r5, #0]
 80009b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009bc:	602a      	str	r2, [r5, #0]
 80009be:	682a      	ldr	r2, [r5, #0]
 80009c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d1df      	bne.n	800098a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80009ca:	f7ff fe33 	bl	8000634 <HAL_GetTick>
 80009ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009d0:	682b      	ldr	r3, [r5, #0]
 80009d2:	039f      	lsls	r7, r3, #14
 80009d4:	d5a9      	bpl.n	800092a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009d6:	f7ff fe2d 	bl	8000634 <HAL_GetTick>
 80009da:	1b80      	subs	r0, r0, r6
 80009dc:	2864      	cmp	r0, #100	; 0x64
 80009de:	d9f7      	bls.n	80009d0 <HAL_RCC_OscConfig+0xbc>
 80009e0:	e7df      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009e2:	4b81      	ldr	r3, [pc, #516]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	f012 0f0c 	tst.w	r2, #12
 80009ea:	d007      	beq.n	80009fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009f2:	2a08      	cmp	r2, #8
 80009f4:	d111      	bne.n	8000a1a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	025e      	lsls	r6, r3, #9
 80009fa:	d40e      	bmi.n	8000a1a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009fc:	4b7a      	ldr	r3, [pc, #488]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	0795      	lsls	r5, r2, #30
 8000a02:	d502      	bpl.n	8000a0a <HAL_RCC_OscConfig+0xf6>
 8000a04:	68e2      	ldr	r2, [r4, #12]
 8000a06:	2a01      	cmp	r2, #1
 8000a08:	d188      	bne.n	800091c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	6921      	ldr	r1, [r4, #16]
 8000a0e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a12:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a16:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a18:	e78a      	b.n	8000930 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a1a:	68e2      	ldr	r2, [r4, #12]
 8000a1c:	4b73      	ldr	r3, [pc, #460]	; (8000bec <HAL_RCC_OscConfig+0x2d8>)
 8000a1e:	b1b2      	cbz	r2, 8000a4e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a24:	f7ff fe06 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a28:	4d6f      	ldr	r5, [pc, #444]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a2c:	682b      	ldr	r3, [r5, #0]
 8000a2e:	0798      	lsls	r0, r3, #30
 8000a30:	d507      	bpl.n	8000a42 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	6922      	ldr	r2, [r4, #16]
 8000a36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a3e:	602b      	str	r3, [r5, #0]
 8000a40:	e776      	b.n	8000930 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a42:	f7ff fdf7 	bl	8000634 <HAL_GetTick>
 8000a46:	1b80      	subs	r0, r0, r6
 8000a48:	2802      	cmp	r0, #2
 8000a4a:	d9ef      	bls.n	8000a2c <HAL_RCC_OscConfig+0x118>
 8000a4c:	e7a9      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8000a4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a50:	f7ff fdf0 	bl	8000634 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a54:	4d64      	ldr	r5, [pc, #400]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000a56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	0799      	lsls	r1, r3, #30
 8000a5c:	f57f af68 	bpl.w	8000930 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a60:	f7ff fde8 	bl	8000634 <HAL_GetTick>
 8000a64:	1b80      	subs	r0, r0, r6
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9f6      	bls.n	8000a58 <HAL_RCC_OscConfig+0x144>
 8000a6a:	e79a      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a6c:	6962      	ldr	r2, [r4, #20]
 8000a6e:	4b60      	ldr	r3, [pc, #384]	; (8000bf0 <HAL_RCC_OscConfig+0x2dc>)
 8000a70:	b17a      	cbz	r2, 8000a92 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a76:	f7ff fddd 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7a:	4d5b      	ldr	r5, [pc, #364]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a80:	079f      	lsls	r7, r3, #30
 8000a82:	f53f af59 	bmi.w	8000938 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a86:	f7ff fdd5 	bl	8000634 <HAL_GetTick>
 8000a8a:	1b80      	subs	r0, r0, r6
 8000a8c:	2802      	cmp	r0, #2
 8000a8e:	d9f6      	bls.n	8000a7e <HAL_RCC_OscConfig+0x16a>
 8000a90:	e787      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000a92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a94:	f7ff fdce 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a98:	4d53      	ldr	r5, [pc, #332]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000a9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a9e:	0798      	lsls	r0, r3, #30
 8000aa0:	f57f af4a 	bpl.w	8000938 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa4:	f7ff fdc6 	bl	8000634 <HAL_GetTick>
 8000aa8:	1b80      	subs	r0, r0, r6
 8000aaa:	2802      	cmp	r0, #2
 8000aac:	d9f6      	bls.n	8000a9c <HAL_RCC_OscConfig+0x188>
 8000aae:	e778      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ab0:	4b4d      	ldr	r3, [pc, #308]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ab8:	d128      	bne.n	8000b0c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	9201      	str	r2, [sp, #4]
 8000abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000abe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ace:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad0:	4d48      	ldr	r5, [pc, #288]	; (8000bf4 <HAL_RCC_OscConfig+0x2e0>)
 8000ad2:	682b      	ldr	r3, [r5, #0]
 8000ad4:	05d9      	lsls	r1, r3, #23
 8000ad6:	d51b      	bpl.n	8000b10 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad8:	68a3      	ldr	r3, [r4, #8]
 8000ada:	4d43      	ldr	r5, [pc, #268]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d127      	bne.n	8000b30 <HAL_RCC_OscConfig+0x21c>
 8000ae0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ae8:	f7ff fda4 	bl	8000634 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	4d3e      	ldr	r5, [pc, #248]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000aee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000af6:	079b      	lsls	r3, r3, #30
 8000af8:	d539      	bpl.n	8000b6e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	f43f af20 	beq.w	8000940 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b00:	4a39      	ldr	r2, [pc, #228]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000b02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	e719      	b.n	8000940 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	e7df      	b.n	8000ad0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b18:	f7ff fd8c 	bl	8000634 <HAL_GetTick>
 8000b1c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	05da      	lsls	r2, r3, #23
 8000b22:	d4d9      	bmi.n	8000ad8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b24:	f7ff fd86 	bl	8000634 <HAL_GetTick>
 8000b28:	1bc0      	subs	r0, r0, r7
 8000b2a:	2802      	cmp	r0, #2
 8000b2c:	d9f7      	bls.n	8000b1e <HAL_RCC_OscConfig+0x20a>
 8000b2e:	e738      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b30:	2b05      	cmp	r3, #5
 8000b32:	d104      	bne.n	8000b3e <HAL_RCC_OscConfig+0x22a>
 8000b34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	672b      	str	r3, [r5, #112]	; 0x70
 8000b3c:	e7d0      	b.n	8000ae0 <HAL_RCC_OscConfig+0x1cc>
 8000b3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b40:	f022 0201 	bic.w	r2, r2, #1
 8000b44:	672a      	str	r2, [r5, #112]	; 0x70
 8000b46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b48:	f022 0204 	bic.w	r2, r2, #4
 8000b4c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1ca      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b52:	f7ff fd6f 	bl	8000634 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b56:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b5a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b5e:	0798      	lsls	r0, r3, #30
 8000b60:	d5cb      	bpl.n	8000afa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b62:	f7ff fd67 	bl	8000634 <HAL_GetTick>
 8000b66:	1bc0      	subs	r0, r0, r7
 8000b68:	4540      	cmp	r0, r8
 8000b6a:	d9f7      	bls.n	8000b5c <HAL_RCC_OscConfig+0x248>
 8000b6c:	e719      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b6e:	f7ff fd61 	bl	8000634 <HAL_GetTick>
 8000b72:	1bc0      	subs	r0, r0, r7
 8000b74:	4540      	cmp	r0, r8
 8000b76:	d9bd      	bls.n	8000af4 <HAL_RCC_OscConfig+0x1e0>
 8000b78:	e713      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b7a:	4d1b      	ldr	r5, [pc, #108]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
 8000b7c:	68ab      	ldr	r3, [r5, #8]
 8000b7e:	f003 030c 	and.w	r3, r3, #12
 8000b82:	2b08      	cmp	r3, #8
 8000b84:	f43f aeca 	beq.w	800091c <HAL_RCC_OscConfig+0x8>
 8000b88:	4e1b      	ldr	r6, [pc, #108]	; (8000bf8 <HAL_RCC_OscConfig+0x2e4>)
 8000b8a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b8c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000b8e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b90:	d134      	bne.n	8000bfc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b92:	f7ff fd4f 	bl	8000634 <HAL_GetTick>
 8000b96:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b98:	682b      	ldr	r3, [r5, #0]
 8000b9a:	0199      	lsls	r1, r3, #6
 8000b9c:	d41e      	bmi.n	8000bdc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b9e:	6a22      	ldr	r2, [r4, #32]
 8000ba0:	69e3      	ldr	r3, [r4, #28]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ba6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000baa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000bb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bb2:	4c0d      	ldr	r4, [pc, #52]	; (8000be8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000bb4:	0852      	lsrs	r2, r2, #1
 8000bb6:	3a01      	subs	r2, #1
 8000bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bbc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bc2:	f7ff fd37 	bl	8000634 <HAL_GetTick>
 8000bc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	019a      	lsls	r2, r3, #6
 8000bcc:	f53f aebc 	bmi.w	8000948 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bd0:	f7ff fd30 	bl	8000634 <HAL_GetTick>
 8000bd4:	1b40      	subs	r0, r0, r5
 8000bd6:	2802      	cmp	r0, #2
 8000bd8:	d9f6      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x2b4>
 8000bda:	e6e2      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bdc:	f7ff fd2a 	bl	8000634 <HAL_GetTick>
 8000be0:	1bc0      	subs	r0, r0, r7
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d9d8      	bls.n	8000b98 <HAL_RCC_OscConfig+0x284>
 8000be6:	e6dc      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
 8000be8:	40023800 	.word	0x40023800
 8000bec:	42470000 	.word	0x42470000
 8000bf0:	42470e80 	.word	0x42470e80
 8000bf4:	40007000 	.word	0x40007000
 8000bf8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fd1a 	bl	8000634 <HAL_GetTick>
 8000c00:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000c02:	682b      	ldr	r3, [r5, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	f57f ae9f 	bpl.w	8000948 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c0a:	f7ff fd13 	bl	8000634 <HAL_GetTick>
 8000c0e:	1b00      	subs	r0, r0, r4
 8000c10:	2802      	cmp	r0, #2
 8000c12:	d9f6      	bls.n	8000c02 <HAL_RCC_OscConfig+0x2ee>
 8000c14:	e6c5      	b.n	80009a2 <HAL_RCC_OscConfig+0x8e>
 8000c16:	bf00      	nop

08000c18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c18:	4913      	ldr	r1, [pc, #76]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c1a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c1c:	688b      	ldr	r3, [r1, #8]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d003      	beq.n	8000c2e <HAL_RCC_GetSysClockFreq+0x16>
 8000c26:	2b08      	cmp	r3, #8
 8000c28:	d003      	beq.n	8000c32 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c2a:	4810      	ldr	r0, [pc, #64]	; (8000c6c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c2c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c2e:	4810      	ldr	r0, [pc, #64]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c30:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c34:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c36:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c3c:	bf14      	ite	ne
 8000c3e:	480c      	ldrne	r0, [pc, #48]	; (8000c70 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c40:	480a      	ldreq	r0, [pc, #40]	; (8000c6c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c46:	bf18      	it	ne
 8000c48:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c4e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c52:	f7ff fb1d 	bl	8000290 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c5e:	3301      	adds	r3, #1
 8000c60:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000c62:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c66:	bd08      	pop	{r3, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	00f42400 	.word	0x00f42400
 8000c70:	007a1200 	.word	0x007a1200

08000c74 <HAL_RCC_ClockConfig>:
{
 8000c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	b910      	cbnz	r0, 8000c84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c7e:	2001      	movs	r0, #1
 8000c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c84:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <HAL_RCC_ClockConfig+0x124>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	f002 020f 	and.w	r2, r2, #15
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	d328      	bcc.n	8000ce2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c90:	6821      	ldr	r1, [r4, #0]
 8000c92:	078f      	lsls	r7, r1, #30
 8000c94:	d42d      	bmi.n	8000cf2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c96:	07c8      	lsls	r0, r1, #31
 8000c98:	d440      	bmi.n	8000d1c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c9a:	4b3f      	ldr	r3, [pc, #252]	; (8000d98 <HAL_RCC_ClockConfig+0x124>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	f002 020f 	and.w	r2, r2, #15
 8000ca2:	4295      	cmp	r5, r2
 8000ca4:	d366      	bcc.n	8000d74 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca6:	6822      	ldr	r2, [r4, #0]
 8000ca8:	0751      	lsls	r1, r2, #29
 8000caa:	d46c      	bmi.n	8000d86 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cac:	0713      	lsls	r3, r2, #28
 8000cae:	d507      	bpl.n	8000cc0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cb0:	4a3a      	ldr	r2, [pc, #232]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000cb2:	6921      	ldr	r1, [r4, #16]
 8000cb4:	6893      	ldr	r3, [r2, #8]
 8000cb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cbe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cc0:	f7ff ffaa 	bl	8000c18 <HAL_RCC_GetSysClockFreq>
 8000cc4:	4b35      	ldr	r3, [pc, #212]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000cc6:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <HAL_RCC_ClockConfig+0x12c>)
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cce:	5cd3      	ldrb	r3, [r2, r3]
 8000cd0:	40d8      	lsrs	r0, r3
 8000cd2:	4b34      	ldr	r3, [pc, #208]	; (8000da4 <HAL_RCC_ClockConfig+0x130>)
 8000cd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	f7ff fc62 	bl	80005a0 <HAL_InitTick>
  return HAL_OK;
 8000cdc:	2000      	movs	r0, #0
 8000cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ce2:	b2ca      	uxtb	r2, r1
 8000ce4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d1c6      	bne.n	8000c7e <HAL_RCC_ClockConfig+0xa>
 8000cf0:	e7ce      	b.n	8000c90 <HAL_RCC_ClockConfig+0x1c>
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cf4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cf8:	bf1e      	ittt	ne
 8000cfa:	689a      	ldrne	r2, [r3, #8]
 8000cfc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d00:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d02:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d04:	bf42      	ittt	mi
 8000d06:	689a      	ldrmi	r2, [r3, #8]
 8000d08:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d0c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	68a0      	ldr	r0, [r4, #8]
 8000d12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d16:	4302      	orrs	r2, r0
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	e7bc      	b.n	8000c96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d1c:	6862      	ldr	r2, [r4, #4]
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000d20:	2a01      	cmp	r2, #1
 8000d22:	d11d      	bne.n	8000d60 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d2a:	d0a8      	beq.n	8000c7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d2c:	4e1b      	ldr	r6, [pc, #108]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000d2e:	68b3      	ldr	r3, [r6, #8]
 8000d30:	f023 0303 	bic.w	r3, r3, #3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d38:	f7ff fc7c 	bl	8000634 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d42:	68b3      	ldr	r3, [r6, #8]
 8000d44:	6862      	ldr	r2, [r4, #4]
 8000d46:	f003 030c 	and.w	r3, r3, #12
 8000d4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d4e:	d0a4      	beq.n	8000c9a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d50:	f7ff fc70 	bl	8000634 <HAL_GetTick>
 8000d54:	1bc0      	subs	r0, r0, r7
 8000d56:	4540      	cmp	r0, r8
 8000d58:	d9f3      	bls.n	8000d42 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000d5a:	2003      	movs	r0, #3
}
 8000d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d60:	1e91      	subs	r1, r2, #2
 8000d62:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d64:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d66:	d802      	bhi.n	8000d6e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d6c:	e7dd      	b.n	8000d2a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6e:	f013 0f02 	tst.w	r3, #2
 8000d72:	e7da      	b.n	8000d2a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d74:	b2ea      	uxtb	r2, r5
 8000d76:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 030f 	and.w	r3, r3, #15
 8000d7e:	429d      	cmp	r5, r3
 8000d80:	f47f af7d 	bne.w	8000c7e <HAL_RCC_ClockConfig+0xa>
 8000d84:	e78f      	b.n	8000ca6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <HAL_RCC_ClockConfig+0x128>)
 8000d88:	68e0      	ldr	r0, [r4, #12]
 8000d8a:	688b      	ldr	r3, [r1, #8]
 8000d8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d90:	4303      	orrs	r3, r0
 8000d92:	608b      	str	r3, [r1, #8]
 8000d94:	e78a      	b.n	8000cac <HAL_RCC_ClockConfig+0x38>
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00
 8000d9c:	40023800 	.word	0x40023800
 8000da0:	0800485a 	.word	0x0800485a
 8000da4:	20000028 	.word	0x20000028

08000da8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000da8:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <HAL_RCC_GetPCLK1Freq+0x14>)
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000db2:	5cd3      	ldrb	r3, [r2, r3]
 8000db4:	4a03      	ldr	r2, [pc, #12]	; (8000dc4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000db6:	6810      	ldr	r0, [r2, #0]
}
 8000db8:	40d8      	lsrs	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	0800486a 	.word	0x0800486a
 8000dc4:	20000028 	.word	0x20000028

08000dc8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dd6:	6810      	ldr	r0, [r2, #0]
}
 8000dd8:	40d8      	lsrs	r0, r3
 8000dda:	4770      	bx	lr
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	0800486a 	.word	0x0800486a
 8000de4:	20000028 	.word	0x20000028

08000de8 <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	4604      	mov	r4, r0
 8000dec:	460e      	mov	r6, r1
 8000dee:	4615      	mov	r5, r2
 8000df0:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000df2:	6821      	ldr	r1, [r4, #0]
 8000df4:	688a      	ldr	r2, [r1, #8]
 8000df6:	ea36 0302 	bics.w	r3, r6, r2
 8000dfa:	d001      	beq.n	8000e00 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000dfc:	2000      	movs	r0, #0
}
 8000dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e00:	1c6b      	adds	r3, r5, #1
 8000e02:	d0f7      	beq.n	8000df4 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000e04:	f7ff fc16 	bl	8000634 <HAL_GetTick>
 8000e08:	1bc0      	subs	r0, r0, r7
 8000e0a:	4285      	cmp	r5, r0
 8000e0c:	d8f1      	bhi.n	8000df2 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e0e:	6823      	ldr	r3, [r4, #0]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e16:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e18:	6862      	ldr	r2, [r4, #4]
 8000e1a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000e1e:	d10a      	bne.n	8000e36 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000e20:	68a2      	ldr	r2, [r4, #8]
 8000e22:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e26:	d002      	beq.n	8000e2e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e2c:	d103      	bne.n	8000e36 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e34:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e36:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e38:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e3c:	d107      	bne.n	8000e4e <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e4c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e54:	2300      	movs	r3, #0
 8000e56:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000e60:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000e62:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e64:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <SPI_EndRxTxTransaction+0x54>)
 8000e66:	4e14      	ldr	r6, [pc, #80]	; (8000eb8 <SPI_EndRxTxTransaction+0x58>)
 8000e68:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e6a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e6c:	fbb5 f6f6 	udiv	r6, r5, r6
 8000e70:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000e74:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e76:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e7a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000e7c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000e7e:	d10d      	bne.n	8000e9c <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e80:	460a      	mov	r2, r1
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	f7ff ffb0 	bl	8000de8 <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e88:	b910      	cbnz	r0, 8000e90 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000e8a:	2000      	movs	r0, #0
}
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e92:	f043 0320 	orr.w	r3, r3, #32
 8000e96:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000e98:	2003      	movs	r0, #3
 8000e9a:	e7f7      	b.n	8000e8c <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000e9c:	9b01      	ldr	r3, [sp, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f3      	beq.n	8000e8a <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000ea2:	9b01      	ldr	r3, [sp, #4]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	061b      	lsls	r3, r3, #24
 8000eae:	d4f5      	bmi.n	8000e9c <SPI_EndRxTxTransaction+0x3c>
 8000eb0:	e7eb      	b.n	8000e8a <SPI_EndRxTxTransaction+0x2a>
 8000eb2:	bf00      	nop
 8000eb4:	20000028 	.word	0x20000028
 8000eb8:	016e3600 	.word	0x016e3600

08000ebc <HAL_SPI_Init>:
{
 8000ebc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	d036      	beq.n	8000f32 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000ec8:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000ecc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ed0:	b91b      	cbnz	r3, 8000eda <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000ed2:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000ed6:	f001 fcf5 	bl	80028c4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000eda:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000edc:	68a0      	ldr	r0, [r4, #8]
 8000ede:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000ee6:	680b      	ldr	r3, [r1, #0]
 8000ee8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000eec:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	4303      	orrs	r3, r0
 8000ef2:	68e0      	ldr	r0, [r4, #12]
 8000ef4:	4303      	orrs	r3, r0
 8000ef6:	6920      	ldr	r0, [r4, #16]
 8000ef8:	4303      	orrs	r3, r0
 8000efa:	6960      	ldr	r0, [r4, #20]
 8000efc:	4303      	orrs	r3, r0
 8000efe:	69e0      	ldr	r0, [r4, #28]
 8000f00:	4303      	orrs	r3, r0
 8000f02:	6a20      	ldr	r0, [r4, #32]
 8000f04:	4303      	orrs	r3, r0
 8000f06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f08:	4303      	orrs	r3, r0
 8000f0a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000f0e:	4303      	orrs	r3, r0
 8000f10:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f12:	0c12      	lsrs	r2, r2, #16
 8000f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f16:	f002 0204 	and.w	r2, r2, #4
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f1e:	69cb      	ldr	r3, [r1, #28]
 8000f20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f24:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f26:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f28:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f2a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f2c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f30:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f32:	2001      	movs	r0, #1
}
 8000f34:	bd10      	pop	{r4, pc}

08000f36 <HAL_SPI_TransmitReceive>:
{
 8000f36:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8000f3a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f3c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8000f40:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8000f42:	2b01      	cmp	r3, #1
{
 8000f44:	4604      	mov	r4, r0
 8000f46:	460d      	mov	r5, r1
 8000f48:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8000f4a:	f000 80e2 	beq.w	8001112 <HAL_SPI_TransmitReceive+0x1dc>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000f54:	f7ff fb6e 	bl	8000634 <HAL_GetTick>
  tmp_state           = hspi->State;
 8000f58:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8000f5c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8000f5e:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f60:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8000f62:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8000f64:	d00a      	beq.n	8000f7c <HAL_SPI_TransmitReceive+0x46>
 8000f66:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8000f6a:	f040 80d0 	bne.w	800110e <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8000f6e:	68a0      	ldr	r0, [r4, #8]
 8000f70:	2800      	cmp	r0, #0
 8000f72:	f040 80cc 	bne.w	800110e <HAL_SPI_TransmitReceive+0x1d8>
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	f040 80c9 	bne.w	800110e <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000f7c:	2d00      	cmp	r5, #0
 8000f7e:	f000 80c4 	beq.w	800110a <HAL_SPI_TransmitReceive+0x1d4>
 8000f82:	f1b9 0f00 	cmp.w	r9, #0
 8000f86:	f000 80c0 	beq.w	800110a <HAL_SPI_TransmitReceive+0x1d4>
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	f000 80bd 	beq.w	800110a <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f90:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000f94:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000f98:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000f9a:	bf1c      	itt	ne
 8000f9c:	2305      	movne	r3, #5
 8000f9e:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8000fa6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8000fa8:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000faa:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8000fac:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8000fae:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fb0:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8000fb2:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000fb4:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8000fb6:	bf58      	it	pl
 8000fb8:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000fba:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8000fbc:	bf58      	it	pl
 8000fbe:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8000fc2:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8000fc4:	bf58      	it	pl
 8000fc6:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8000fc8:	68e2      	ldr	r2, [r4, #12]
 8000fca:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8000fce:	d158      	bne.n	8001082 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8000fd0:	b109      	cbz	r1, 8000fd6 <HAL_SPI_TransmitReceive+0xa0>
 8000fd2:	2e01      	cmp	r6, #1
 8000fd4:	d107      	bne.n	8000fe6 <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8000fd6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8000fda:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8000fdc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8000fde:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8000fe6:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000fe8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	b9ab      	cbnz	r3, 800101a <HAL_SPI_TransmitReceive+0xe4>
 8000fee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	b993      	cbnz	r3, 800101a <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000ff4:	4642      	mov	r2, r8
 8000ff6:	4639      	mov	r1, r7
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f7ff ff31 	bl	8000e60 <SPI_EndRxTxTransaction>
 8000ffe:	2800      	cmp	r0, #0
 8001000:	f040 8081 	bne.w	8001106 <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001004:	68a3      	ldr	r3, [r4, #8]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d132      	bne.n	8001070 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	9001      	str	r0, [sp, #4]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	9201      	str	r2, [sp, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	e02a      	b.n	8001070 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800101a:	6822      	ldr	r2, [r4, #0]
 800101c:	6893      	ldr	r3, [r2, #8]
 800101e:	0799      	lsls	r1, r3, #30
 8001020:	d50d      	bpl.n	800103e <HAL_SPI_TransmitReceive+0x108>
 8001022:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001024:	b29b      	uxth	r3, r3
 8001026:	b153      	cbz	r3, 800103e <HAL_SPI_TransmitReceive+0x108>
 8001028:	b14d      	cbz	r5, 800103e <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800102a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800102c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001030:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001032:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001034:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001036:	3b01      	subs	r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800103c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800103e:	6893      	ldr	r3, [r2, #8]
 8001040:	07db      	lsls	r3, r3, #31
 8001042:	d50c      	bpl.n	800105e <HAL_SPI_TransmitReceive+0x128>
 8001044:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001046:	b29b      	uxth	r3, r3
 8001048:	b14b      	cbz	r3, 800105e <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800104a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800104c:	68d2      	ldr	r2, [r2, #12]
 800104e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001052:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001054:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001056:	3b01      	subs	r3, #1
 8001058:	b29b      	uxth	r3, r3
 800105a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800105c:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800105e:	f7ff fae9 	bl	8000634 <HAL_GetTick>
 8001062:	eba0 0008 	sub.w	r0, r0, r8
 8001066:	4287      	cmp	r7, r0
 8001068:	d8be      	bhi.n	8000fe8 <HAL_SPI_TransmitReceive+0xb2>
 800106a:	1c7e      	adds	r6, r7, #1
 800106c:	d0bc      	beq.n	8000fe8 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 800106e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001070:	2301      	movs	r3, #1
 8001072:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001076:	2300      	movs	r3, #0
 8001078:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800107c:	b003      	add	sp, #12
 800107e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001082:	b109      	cbz	r1, 8001088 <HAL_SPI_TransmitReceive+0x152>
 8001084:	2e01      	cmp	r6, #1
 8001086:	d108      	bne.n	800109a <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001088:	782a      	ldrb	r2, [r5, #0]
 800108a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800108c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800108e:	3301      	adds	r3, #1
 8001090:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001092:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001094:	3b01      	subs	r3, #1
 8001096:	b29b      	uxth	r3, r3
 8001098:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800109a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800109c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b91b      	cbnz	r3, 80010aa <HAL_SPI_TransmitReceive+0x174>
 80010a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0a4      	beq.n	8000ff4 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80010aa:	6822      	ldr	r2, [r4, #0]
 80010ac:	6893      	ldr	r3, [r2, #8]
 80010ae:	0798      	lsls	r0, r3, #30
 80010b0:	d50e      	bpl.n	80010d0 <HAL_SPI_TransmitReceive+0x19a>
 80010b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	b15b      	cbz	r3, 80010d0 <HAL_SPI_TransmitReceive+0x19a>
 80010b8:	b155      	cbz	r5, 80010d0 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80010ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80010c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010c2:	3301      	adds	r3, #1
 80010c4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80010c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80010ce:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80010d0:	6822      	ldr	r2, [r4, #0]
 80010d2:	6893      	ldr	r3, [r2, #8]
 80010d4:	07d9      	lsls	r1, r3, #31
 80010d6:	d50d      	bpl.n	80010f4 <HAL_SPI_TransmitReceive+0x1be>
 80010d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010da:	b29b      	uxth	r3, r3
 80010dc:	b153      	cbz	r3, 80010f4 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80010de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010e0:	68d2      	ldr	r2, [r2, #12]
 80010e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80010e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80010e6:	3301      	adds	r3, #1
 80010e8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80010ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80010ec:	3b01      	subs	r3, #1
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80010f2:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80010f4:	f7ff fa9e 	bl	8000634 <HAL_GetTick>
 80010f8:	eba0 0008 	sub.w	r0, r0, r8
 80010fc:	4287      	cmp	r7, r0
 80010fe:	d8cd      	bhi.n	800109c <HAL_SPI_TransmitReceive+0x166>
 8001100:	1c7b      	adds	r3, r7, #1
 8001102:	d0cb      	beq.n	800109c <HAL_SPI_TransmitReceive+0x166>
 8001104:	e7b3      	b.n	800106e <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001106:	2320      	movs	r3, #32
 8001108:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800110a:	2001      	movs	r0, #1
 800110c:	e7b0      	b.n	8001070 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 800110e:	2002      	movs	r0, #2
 8001110:	e7ae      	b.n	8001070 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8001112:	2002      	movs	r0, #2
 8001114:	e7b2      	b.n	800107c <HAL_SPI_TransmitReceive+0x146>

08001116 <HAL_SPI_ErrorCallback>:
 8001116:	4770      	bx	lr

08001118 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8001118:	6803      	ldr	r3, [r0, #0]
{
 800111a:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 800111c:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800111e:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001120:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8001124:	2d01      	cmp	r5, #1
{
 8001126:	b085      	sub	sp, #20
 8001128:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800112a:	d105      	bne.n	8001138 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800112c:	064d      	lsls	r5, r1, #25
 800112e:	d503      	bpl.n	8001138 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 8001130:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hspi->TxISR(hspi);
 8001132:	4798      	blx	r3
}
 8001134:	b005      	add	sp, #20
 8001136:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001138:	0795      	lsls	r5, r2, #30
 800113a:	d504      	bpl.n	8001146 <HAL_SPI_IRQHandler+0x2e>
 800113c:	0608      	lsls	r0, r1, #24
 800113e:	d502      	bpl.n	8001146 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8001140:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001142:	4620      	mov	r0, r4
 8001144:	e7f5      	b.n	8001132 <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001146:	f412 7fb0 	tst.w	r2, #352	; 0x160
 800114a:	d0f3      	beq.n	8001134 <HAL_SPI_IRQHandler+0x1c>
 800114c:	068d      	lsls	r5, r1, #26
 800114e:	d5f1      	bpl.n	8001134 <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001150:	0650      	lsls	r0, r2, #25
 8001152:	d50f      	bpl.n	8001174 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001154:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001158:	2803      	cmp	r0, #3
 800115a:	f04f 0500 	mov.w	r5, #0
 800115e:	d04c      	beq.n	80011fa <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001160:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001162:	f040 0004 	orr.w	r0, r0, #4
 8001166:	6560      	str	r0, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001168:	9500      	str	r5, [sp, #0]
 800116a:	68d8      	ldr	r0, [r3, #12]
 800116c:	9000      	str	r0, [sp, #0]
 800116e:	6898      	ldr	r0, [r3, #8]
 8001170:	9000      	str	r0, [sp, #0]
 8001172:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001174:	0695      	lsls	r5, r2, #26
 8001176:	d50c      	bpl.n	8001192 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800117a:	f040 0001 	orr.w	r0, r0, #1
 800117e:	6560      	str	r0, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001180:	2000      	movs	r0, #0
 8001182:	9002      	str	r0, [sp, #8]
 8001184:	6898      	ldr	r0, [r3, #8]
 8001186:	9002      	str	r0, [sp, #8]
 8001188:	6818      	ldr	r0, [r3, #0]
 800118a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800118e:	6018      	str	r0, [r3, #0]
 8001190:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001192:	05d0      	lsls	r0, r2, #23
 8001194:	d508      	bpl.n	80011a8 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001196:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001198:	f042 0208 	orr.w	r2, r2, #8
 800119c:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800119e:	2200      	movs	r2, #0
 80011a0:	9203      	str	r2, [sp, #12]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	9203      	str	r2, [sp, #12]
 80011a6:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80011a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011aa:	2a00      	cmp	r2, #0
 80011ac:	d0c2      	beq.n	8001134 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80011b4:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80011b6:	2201      	movs	r2, #1
 80011b8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80011bc:	078a      	lsls	r2, r1, #30
 80011be:	d023      	beq.n	8001208 <HAL_SPI_IRQHandler+0xf0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80011c0:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80011c2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80011c4:	f022 0203 	bic.w	r2, r2, #3
 80011c8:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80011ca:	b140      	cbz	r0, 80011de <HAL_SPI_IRQHandler+0xc6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_SPI_IRQHandler+0xf8>)
 80011ce:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80011d0:	f7ff faa0 	bl	8000714 <HAL_DMA_Abort_IT>
 80011d4:	b118      	cbz	r0, 80011de <HAL_SPI_IRQHandler+0xc6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80011d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011dc:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80011de:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d0a7      	beq.n	8001134 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_SPI_IRQHandler+0xf8>)
 80011e6:	6503      	str	r3, [r0, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80011e8:	f7ff fa94 	bl	8000714 <HAL_DMA_Abort_IT>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d0a1      	beq.n	8001134 <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80011f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f6:	6563      	str	r3, [r4, #84]	; 0x54
 80011f8:	e79c      	b.n	8001134 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011fa:	9501      	str	r5, [sp, #4]
 80011fc:	68da      	ldr	r2, [r3, #12]
 80011fe:	9201      	str	r2, [sp, #4]
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	9b01      	ldr	r3, [sp, #4]
        return;
 8001206:	e795      	b.n	8001134 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8001208:	4620      	mov	r0, r4
 800120a:	f7ff ff84 	bl	8001116 <HAL_SPI_ErrorCallback>
 800120e:	e791      	b.n	8001134 <HAL_SPI_IRQHandler+0x1c>
 8001210:	08001215 	.word	0x08001215

08001214 <SPI_DMAAbortOnError>:
{
 8001214:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001216:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800121c:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 800121e:	f7ff ff7a 	bl	8001116 <HAL_SPI_ErrorCallback>
 8001222:	bd08      	pop	{r3, pc}

08001224 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001224:	6803      	ldr	r3, [r0, #0]
 8001226:	68da      	ldr	r2, [r3, #12]
 8001228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800122c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800122e:	695a      	ldr	r2, [r3, #20]
 8001230:	f022 0201 	bic.w	r2, r2, #1
 8001234:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001236:	2320      	movs	r3, #32
 8001238:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800123c:	4770      	bx	lr
	...

08001240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001244:	6806      	ldr	r6, [r0, #0]
 8001246:	68c2      	ldr	r2, [r0, #12]
 8001248:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800124a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800124c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001250:	4313      	orrs	r3, r2
 8001252:	6133      	str	r3, [r6, #16]
{
 8001254:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001256:	6883      	ldr	r3, [r0, #8]
 8001258:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800125a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800125c:	4303      	orrs	r3, r0
 800125e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001260:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001264:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8001266:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800126a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 800126c:	4313      	orrs	r3, r2
 800126e:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001270:	6973      	ldr	r3, [r6, #20]
 8001272:	69a2      	ldr	r2, [r4, #24]
 8001274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001278:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800127a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800127e:	6173      	str	r3, [r6, #20]
 8001280:	4b7a      	ldr	r3, [pc, #488]	; (800146c <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001282:	d17c      	bne.n	800137e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001284:	429e      	cmp	r6, r3
 8001286:	d003      	beq.n	8001290 <UART_SetConfig+0x50>
 8001288:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800128c:	429e      	cmp	r6, r3
 800128e:	d144      	bne.n	800131a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001290:	f7ff fd9a 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 8001294:	2519      	movs	r5, #25
 8001296:	fb05 f300 	mul.w	r3, r5, r0
 800129a:	6860      	ldr	r0, [r4, #4]
 800129c:	f04f 0964 	mov.w	r9, #100	; 0x64
 80012a0:	0040      	lsls	r0, r0, #1
 80012a2:	fbb3 f3f0 	udiv	r3, r3, r0
 80012a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80012aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80012ae:	f7ff fd8b 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	4368      	muls	r0, r5
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	fbb0 f7f3 	udiv	r7, r0, r3
 80012bc:	f7ff fd84 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80012c0:	6863      	ldr	r3, [r4, #4]
 80012c2:	4368      	muls	r0, r5
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80012ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80012ce:	fb09 7313 	mls	r3, r9, r3, r7
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	3332      	adds	r3, #50	; 0x32
 80012d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80012e0:	f7ff fd72 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80012e4:	6862      	ldr	r2, [r4, #4]
 80012e6:	4368      	muls	r0, r5
 80012e8:	0052      	lsls	r2, r2, #1
 80012ea:	fbb0 faf2 	udiv	sl, r0, r2
 80012ee:	f7ff fd6b 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80012f2:	6863      	ldr	r3, [r4, #4]
 80012f4:	4368      	muls	r0, r5
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001300:	fb09 a313 	mls	r3, r9, r3, sl
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	3332      	adds	r3, #50	; 0x32
 8001308:	fbb3 f3f9 	udiv	r3, r3, r9
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001312:	443b      	add	r3, r7
 8001314:	60b3      	str	r3, [r6, #8]
 8001316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800131a:	f7ff fd45 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800131e:	2519      	movs	r5, #25
 8001320:	fb05 f300 	mul.w	r3, r5, r0
 8001324:	6860      	ldr	r0, [r4, #4]
 8001326:	f04f 0964 	mov.w	r9, #100	; 0x64
 800132a:	0040      	lsls	r0, r0, #1
 800132c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001330:	fbb3 f3f9 	udiv	r3, r3, r9
 8001334:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001338:	f7ff fd36 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800133c:	6863      	ldr	r3, [r4, #4]
 800133e:	4368      	muls	r0, r5
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fbb0 f7f3 	udiv	r7, r0, r3
 8001346:	f7ff fd2f 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800134a:	6863      	ldr	r3, [r4, #4]
 800134c:	4368      	muls	r0, r5
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fbb0 f3f3 	udiv	r3, r0, r3
 8001354:	fbb3 f3f9 	udiv	r3, r3, r9
 8001358:	fb09 7313 	mls	r3, r9, r3, r7
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	3332      	adds	r3, #50	; 0x32
 8001360:	fbb3 f3f9 	udiv	r3, r3, r9
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800136a:	f7ff fd1d 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800136e:	6862      	ldr	r2, [r4, #4]
 8001370:	4368      	muls	r0, r5
 8001372:	0052      	lsls	r2, r2, #1
 8001374:	fbb0 faf2 	udiv	sl, r0, r2
 8001378:	f7ff fd16 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800137c:	e7b9      	b.n	80012f2 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800137e:	429e      	cmp	r6, r3
 8001380:	d002      	beq.n	8001388 <UART_SetConfig+0x148>
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <UART_SetConfig+0x230>)
 8001384:	429e      	cmp	r6, r3
 8001386:	d140      	bne.n	800140a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001388:	f7ff fd1e 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 800138c:	6867      	ldr	r7, [r4, #4]
 800138e:	2519      	movs	r5, #25
 8001390:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001394:	fb05 f300 	mul.w	r3, r5, r0
 8001398:	00bf      	lsls	r7, r7, #2
 800139a:	fbb3 f3f7 	udiv	r3, r3, r7
 800139e:	fbb3 f3f9 	udiv	r3, r3, r9
 80013a2:	011f      	lsls	r7, r3, #4
 80013a4:	f7ff fd10 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80013a8:	6863      	ldr	r3, [r4, #4]
 80013aa:	4368      	muls	r0, r5
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	fbb0 f8f3 	udiv	r8, r0, r3
 80013b2:	f7ff fd09 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80013b6:	6863      	ldr	r3, [r4, #4]
 80013b8:	4368      	muls	r0, r5
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80013c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80013c4:	fb09 8313 	mls	r3, r9, r3, r8
 80013c8:	011b      	lsls	r3, r3, #4
 80013ca:	3332      	adds	r3, #50	; 0x32
 80013cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80013d0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80013d4:	f7ff fcf8 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
 80013d8:	6862      	ldr	r2, [r4, #4]
 80013da:	4368      	muls	r0, r5
 80013dc:	0092      	lsls	r2, r2, #2
 80013de:	fbb0 faf2 	udiv	sl, r0, r2
 80013e2:	f7ff fcf1 	bl	8000dc8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013e6:	6863      	ldr	r3, [r4, #4]
 80013e8:	4368      	muls	r0, r5
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80013f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80013f4:	fb09 a313 	mls	r3, r9, r3, sl
 80013f8:	011b      	lsls	r3, r3, #4
 80013fa:	3332      	adds	r3, #50	; 0x32
 80013fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	ea43 0308 	orr.w	r3, r3, r8
 8001408:	e783      	b.n	8001312 <UART_SetConfig+0xd2>
 800140a:	f7ff fccd 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800140e:	6867      	ldr	r7, [r4, #4]
 8001410:	2519      	movs	r5, #25
 8001412:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001416:	fb05 f300 	mul.w	r3, r5, r0
 800141a:	00bf      	lsls	r7, r7, #2
 800141c:	fbb3 f3f7 	udiv	r3, r3, r7
 8001420:	fbb3 f3f9 	udiv	r3, r3, r9
 8001424:	011f      	lsls	r7, r3, #4
 8001426:	f7ff fcbf 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800142a:	6863      	ldr	r3, [r4, #4]
 800142c:	4368      	muls	r0, r5
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	fbb0 f8f3 	udiv	r8, r0, r3
 8001434:	f7ff fcb8 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001438:	6863      	ldr	r3, [r4, #4]
 800143a:	4368      	muls	r0, r5
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001442:	fbb3 f3f9 	udiv	r3, r3, r9
 8001446:	fb09 8313 	mls	r3, r9, r3, r8
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	3332      	adds	r3, #50	; 0x32
 800144e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001452:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001456:	f7ff fca7 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 800145a:	6862      	ldr	r2, [r4, #4]
 800145c:	4368      	muls	r0, r5
 800145e:	0092      	lsls	r2, r2, #2
 8001460:	fbb0 faf2 	udiv	sl, r0, r2
 8001464:	f7ff fca0 	bl	8000da8 <HAL_RCC_GetPCLK1Freq>
 8001468:	e7bd      	b.n	80013e6 <UART_SetConfig+0x1a6>
 800146a:	bf00      	nop
 800146c:	40011000 	.word	0x40011000
 8001470:	40011400 	.word	0x40011400

08001474 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	4604      	mov	r4, r0
 8001478:	460e      	mov	r6, r1
 800147a:	4617      	mov	r7, r2
 800147c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800147e:	6821      	ldr	r1, [r4, #0]
 8001480:	680b      	ldr	r3, [r1, #0]
 8001482:	ea36 0303 	bics.w	r3, r6, r3
 8001486:	d101      	bne.n	800148c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001488:	2000      	movs	r0, #0
}
 800148a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800148c:	1c6b      	adds	r3, r5, #1
 800148e:	d0f7      	beq.n	8001480 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001490:	b995      	cbnz	r5, 80014b8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001492:	6823      	ldr	r3, [r4, #0]
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800149a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80014a4:	2320      	movs	r3, #32
 80014a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80014aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80014ae:	2300      	movs	r3, #0
 80014b0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80014b4:	2003      	movs	r0, #3
 80014b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80014b8:	f7ff f8bc 	bl	8000634 <HAL_GetTick>
 80014bc:	1bc0      	subs	r0, r0, r7
 80014be:	4285      	cmp	r5, r0
 80014c0:	d2dd      	bcs.n	800147e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80014c2:	e7e6      	b.n	8001492 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080014c4 <HAL_UART_Init>:
{
 80014c4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80014c6:	4604      	mov	r4, r0
 80014c8:	b340      	cbz	r0, 800151c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80014ca:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014d2:	b91b      	cbnz	r3, 80014dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80014d4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80014d8:	f001 fa32 	bl	8002940 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80014dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80014de:	2324      	movs	r3, #36	; 0x24
 80014e0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80014e4:	68d3      	ldr	r3, [r2, #12]
 80014e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014ea:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7ff fea7 	bl	8001240 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014f2:	6823      	ldr	r3, [r4, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014fa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014fc:	695a      	ldr	r2, [r3, #20]
 80014fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001502:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800150a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800150c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800150e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001510:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001512:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001516:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800151a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800151c:	2001      	movs	r0, #1
}
 800151e:	bd10      	pop	{r4, pc}

08001520 <HAL_UART_Transmit>:
{
 8001520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001524:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001526:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800152a:	2b20      	cmp	r3, #32
{
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001532:	d14f      	bne.n	80015d4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8001534:	2900      	cmp	r1, #0
 8001536:	d04a      	beq.n	80015ce <HAL_UART_Transmit+0xae>
 8001538:	2a00      	cmp	r2, #0
 800153a:	d048      	beq.n	80015ce <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800153c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001540:	2b01      	cmp	r3, #1
 8001542:	d047      	beq.n	80015d4 <HAL_UART_Transmit+0xb4>
 8001544:	2301      	movs	r3, #1
 8001546:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154a:	2300      	movs	r3, #0
 800154c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800154e:	2321      	movs	r3, #33	; 0x21
 8001550:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8001554:	f7ff f86e 	bl	8000634 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001558:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800155c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800155e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001562:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001564:	b29b      	uxth	r3, r3
 8001566:	b96b      	cbnz	r3, 8001584 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001568:	463b      	mov	r3, r7
 800156a:	4632      	mov	r2, r6
 800156c:	2140      	movs	r1, #64	; 0x40
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff ff80 	bl	8001474 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001574:	b9b0      	cbnz	r0, 80015a4 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8001576:	2320      	movs	r3, #32
 8001578:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800157c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001584:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8001586:	3b01      	subs	r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800158c:	68a3      	ldr	r3, [r4, #8]
 800158e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001592:	4632      	mov	r2, r6
 8001594:	463b      	mov	r3, r7
 8001596:	f04f 0180 	mov.w	r1, #128	; 0x80
 800159a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800159c:	d10e      	bne.n	80015bc <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800159e:	f7ff ff69 	bl	8001474 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015a2:	b110      	cbz	r0, 80015aa <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 80015a4:	2003      	movs	r0, #3
 80015a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80015aa:	882b      	ldrh	r3, [r5, #0]
 80015ac:	6822      	ldr	r2, [r4, #0]
 80015ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80015b4:	6923      	ldr	r3, [r4, #16]
 80015b6:	b943      	cbnz	r3, 80015ca <HAL_UART_Transmit+0xaa>
          pData += 2U;
 80015b8:	3502      	adds	r5, #2
 80015ba:	e7d2      	b.n	8001562 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015bc:	f7ff ff5a 	bl	8001474 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d1ef      	bne.n	80015a4 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80015c4:	6823      	ldr	r3, [r4, #0]
 80015c6:	782a      	ldrb	r2, [r5, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	3501      	adds	r5, #1
 80015cc:	e7c9      	b.n	8001562 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80015ce:	2001      	movs	r0, #1
 80015d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80015d4:	2002      	movs	r0, #2
}
 80015d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080015da <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80015da:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d120      	bne.n	8001624 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80015e2:	b1e9      	cbz	r1, 8001620 <HAL_UART_Receive_IT+0x46>
 80015e4:	b1e2      	cbz	r2, 8001620 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80015e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d01a      	beq.n	8001624 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80015ee:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80015f0:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f2:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015f4:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015f6:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80015f8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80015fc:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80015fe:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001600:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001602:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001606:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800160a:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800160c:	6951      	ldr	r1, [r2, #20]
 800160e:	f041 0101 	orr.w	r1, r1, #1
 8001612:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001614:	68d1      	ldr	r1, [r2, #12]
 8001616:	f041 0120 	orr.w	r1, r1, #32
 800161a:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 800161c:	4618      	mov	r0, r3
 800161e:	4770      	bx	lr
      return HAL_ERROR;
 8001620:	2001      	movs	r0, #1
 8001622:	4770      	bx	lr
    return HAL_BUSY;
 8001624:	2002      	movs	r0, #2
}
 8001626:	4770      	bx	lr

08001628 <HAL_UART_TxCpltCallback>:
 8001628:	4770      	bx	lr

0800162a <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800162a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800162e:	2b22      	cmp	r3, #34	; 0x22
{
 8001630:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001632:	d136      	bne.n	80016a2 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001634:	6883      	ldr	r3, [r0, #8]
 8001636:	6901      	ldr	r1, [r0, #16]
 8001638:	6802      	ldr	r2, [r0, #0]
 800163a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800163e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001640:	d123      	bne.n	800168a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001642:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001644:	b9e9      	cbnz	r1, 8001682 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001646:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800164a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800164e:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8001650:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001652:	3c01      	subs	r4, #1
 8001654:	b2a4      	uxth	r4, r4
 8001656:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001658:	b98c      	cbnz	r4, 800167e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800165a:	6803      	ldr	r3, [r0, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	f022 0220 	bic.w	r2, r2, #32
 8001662:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800166a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	f022 0201 	bic.w	r2, r2, #1
 8001672:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001674:	2320      	movs	r3, #32
 8001676:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800167a:	f000 fceb 	bl	8002054 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 800167e:	2000      	movs	r0, #0
}
 8001680:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	f823 2b01 	strh.w	r2, [r3], #1
 8001688:	e7e1      	b.n	800164e <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800168a:	b921      	cbnz	r1, 8001696 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800168c:	1c59      	adds	r1, r3, #1
 800168e:	6852      	ldr	r2, [r2, #4]
 8001690:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e7dc      	b.n	8001650 <UART_Receive_IT+0x26>
 8001696:	6852      	ldr	r2, [r2, #4]
 8001698:	1c59      	adds	r1, r3, #1
 800169a:	6281      	str	r1, [r0, #40]	; 0x28
 800169c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016a0:	e7f7      	b.n	8001692 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80016a2:	2002      	movs	r0, #2
 80016a4:	bd10      	pop	{r4, pc}

080016a6 <HAL_UART_ErrorCallback>:
 80016a6:	4770      	bx	lr

080016a8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016a8:	6803      	ldr	r3, [r0, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016ac:	68d9      	ldr	r1, [r3, #12]
{
 80016ae:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80016b0:	0716      	lsls	r6, r2, #28
{
 80016b2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016b4:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80016b6:	d107      	bne.n	80016c8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016b8:	0696      	lsls	r6, r2, #26
 80016ba:	d55a      	bpl.n	8001772 <HAL_UART_IRQHandler+0xca>
 80016bc:	068d      	lsls	r5, r1, #26
 80016be:	d558      	bpl.n	8001772 <HAL_UART_IRQHandler+0xca>
}
 80016c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80016c4:	f7ff bfb1 	b.w	800162a <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016c8:	f015 0501 	ands.w	r5, r5, #1
 80016cc:	d102      	bne.n	80016d4 <HAL_UART_IRQHandler+0x2c>
 80016ce:	f411 7f90 	tst.w	r1, #288	; 0x120
 80016d2:	d04e      	beq.n	8001772 <HAL_UART_IRQHandler+0xca>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016d4:	07d3      	lsls	r3, r2, #31
 80016d6:	d505      	bpl.n	80016e4 <HAL_UART_IRQHandler+0x3c>
 80016d8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016da:	bf42      	ittt	mi
 80016dc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80016de:	f043 0301 	orrmi.w	r3, r3, #1
 80016e2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016e4:	0750      	lsls	r0, r2, #29
 80016e6:	d504      	bpl.n	80016f2 <HAL_UART_IRQHandler+0x4a>
 80016e8:	b11d      	cbz	r5, 80016f2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016ec:	f043 0302 	orr.w	r3, r3, #2
 80016f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016f2:	0793      	lsls	r3, r2, #30
 80016f4:	d504      	bpl.n	8001700 <HAL_UART_IRQHandler+0x58>
 80016f6:	b11d      	cbz	r5, 8001700 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80016f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001700:	0716      	lsls	r6, r2, #28
 8001702:	d504      	bpl.n	800170e <HAL_UART_IRQHandler+0x66>
 8001704:	b11d      	cbz	r5, 800170e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800170e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001710:	2b00      	cmp	r3, #0
 8001712:	d066      	beq.n	80017e2 <HAL_UART_IRQHandler+0x13a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001714:	0695      	lsls	r5, r2, #26
 8001716:	d504      	bpl.n	8001722 <HAL_UART_IRQHandler+0x7a>
 8001718:	0688      	lsls	r0, r1, #26
 800171a:	d502      	bpl.n	8001722 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff ff84 	bl	800162a <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001726:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001728:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800172a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800172c:	d402      	bmi.n	8001734 <HAL_UART_IRQHandler+0x8c>
 800172e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001732:	d01a      	beq.n	800176a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001734:	f7ff fd76 	bl	8001224 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	0652      	lsls	r2, r2, #25
 800173e:	d510      	bpl.n	8001762 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001740:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001742:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001748:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800174a:	b150      	cbz	r0, 8001762 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800174c:	4b25      	ldr	r3, [pc, #148]	; (80017e4 <HAL_UART_IRQHandler+0x13c>)
 800174e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001750:	f7fe ffe0 	bl	8000714 <HAL_DMA_Abort_IT>
 8001754:	2800      	cmp	r0, #0
 8001756:	d044      	beq.n	80017e2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001758:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800175a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800175e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001760:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff ff9f 	bl	80016a6 <HAL_UART_ErrorCallback>
 8001768:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800176a:	f7ff ff9c 	bl	80016a6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800176e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001770:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001772:	0616      	lsls	r6, r2, #24
 8001774:	d527      	bpl.n	80017c6 <HAL_UART_IRQHandler+0x11e>
 8001776:	060d      	lsls	r5, r1, #24
 8001778:	d525      	bpl.n	80017c6 <HAL_UART_IRQHandler+0x11e>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800177a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800177e:	2a21      	cmp	r2, #33	; 0x21
 8001780:	d12f      	bne.n	80017e2 <HAL_UART_IRQHandler+0x13a>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001782:	68a2      	ldr	r2, [r4, #8]
 8001784:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001788:	6a22      	ldr	r2, [r4, #32]
 800178a:	d117      	bne.n	80017bc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800178c:	8811      	ldrh	r1, [r2, #0]
 800178e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001792:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001794:	6921      	ldr	r1, [r4, #16]
 8001796:	b979      	cbnz	r1, 80017b8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001798:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800179a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800179c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800179e:	3a01      	subs	r2, #1
 80017a0:	b292      	uxth	r2, r2
 80017a2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80017a4:	b9ea      	cbnz	r2, 80017e2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017ac:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80017b8:	3201      	adds	r2, #1
 80017ba:	e7ee      	b.n	800179a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80017bc:	1c51      	adds	r1, r2, #1
 80017be:	6221      	str	r1, [r4, #32]
 80017c0:	7812      	ldrb	r2, [r2, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	e7ea      	b.n	800179c <HAL_UART_IRQHandler+0xf4>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80017c6:	0650      	lsls	r0, r2, #25
 80017c8:	d50b      	bpl.n	80017e2 <HAL_UART_IRQHandler+0x13a>
 80017ca:	064a      	lsls	r2, r1, #25
 80017cc:	d509      	bpl.n	80017e2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017d4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80017d6:	2320      	movs	r3, #32
 80017d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80017dc:	4620      	mov	r0, r4
 80017de:	f7ff ff23 	bl	8001628 <HAL_UART_TxCpltCallback>
 80017e2:	bd70      	pop	{r4, r5, r6, pc}
 80017e4:	080017e9 	.word	0x080017e9

080017e8 <UART_DMAAbortOnError>:
{
 80017e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80017f0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80017f2:	f7ff ff58 	bl	80016a6 <HAL_UART_ErrorCallback>
 80017f6:	bd08      	pop	{r3, pc}

080017f8 <get_Socket_status>:
	sock_status = status;
}
sock_sta get_Socket_status(void)
{
	return sock_status;
}
 80017f8:	4b01      	ldr	r3, [pc, #4]	; (8001800 <get_Socket_status+0x8>)
 80017fa:	7818      	ldrb	r0, [r3, #0]
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	20000440 	.word	0x20000440

08001804 <Queue_Full>:
{
	memset(&WizFi_Queue, 0, sizeof(WizFi_Queue));
}
uint8_t Queue_Full(void)
{
	if(WizFi_Queue.head + 1 >= MAX_BUFF)
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <Queue_Full+0x20>)
 8001806:	8813      	ldrh	r3, [r2, #0]
 8001808:	8850      	ldrh	r0, [r2, #2]
 800180a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800180e:	428b      	cmp	r3, r1
 8001810:	dd03      	ble.n	800181a <Queue_Full+0x16>
	{
		if(WizFi_Queue.tail == 0)
			return 1;
 8001812:	fab0 f080 	clz	r0, r0
 8001816:	0940      	lsrs	r0, r0, #5
 8001818:	4770      	bx	lr
	}
	else
	{
		if((WizFi_Queue.head + 1) == WizFi_Queue.tail)
 800181a:	3301      	adds	r3, #1
			return 1;
 800181c:	1a1b      	subs	r3, r3, r0
 800181e:	4258      	negs	r0, r3
 8001820:	4158      	adcs	r0, r3
			return 1;
	}
	return 0;
}
 8001822:	4770      	bx	lr
 8001824:	20000442 	.word	0x20000442

08001828 <Queue_Empty>:
uint16_t Queue_Empty(void)
{
	if(WizFi_Queue.head >= WizFi_Queue.tail)
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <Queue_Empty+0x14>)
 800182a:	8818      	ldrh	r0, [r3, #0]
 800182c:	885b      	ldrh	r3, [r3, #2]
 800182e:	4298      	cmp	r0, r3
		return WizFi_Queue.head - WizFi_Queue.tail;
	else
		return MAX_BUFF - WizFi_Queue.tail + WizFi_Queue.head;
 8001830:	bf38      	it	cc
 8001832:	f500 6080 	addcc.w	r0, r0, #1024	; 0x400
 8001836:	1ac0      	subs	r0, r0, r3
 8001838:	b280      	uxth	r0, r0
}
 800183a:	4770      	bx	lr
 800183c:	20000442 	.word	0x20000442

08001840 <EnQueue>:
void EnQueue(uint8_t input)
{
 8001840:	b538      	push	{r3, r4, r5, lr}
	if(WizFi_Queue.head + 1 >= MAX_BUFF)
 8001842:	4c09      	ldr	r4, [pc, #36]	; (8001868 <EnQueue+0x28>)
 8001844:	8822      	ldrh	r2, [r4, #0]
 8001846:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800184a:	429a      	cmp	r2, r3
		WizFi_Queue.head = 0;
 800184c:	bfc4      	itt	gt
 800184e:	2300      	movgt	r3, #0
 8001850:	8023      	strhgt	r3, [r4, #0]
{
 8001852:	4605      	mov	r5, r0

	if(Queue_Full())
 8001854:	f7ff ffd6 	bl	8001804 <Queue_Full>
 8001858:	b920      	cbnz	r0, 8001864 <EnQueue+0x24>
		return;

	WizFi_Queue.data[WizFi_Queue.head++] = input;
 800185a:	8823      	ldrh	r3, [r4, #0]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	8022      	strh	r2, [r4, #0]
 8001860:	441c      	add	r4, r3
 8001862:	7125      	strb	r5, [r4, #4]
 8001864:	bd38      	pop	{r3, r4, r5, pc}
 8001866:	bf00      	nop
 8001868:	20000442 	.word	0x20000442

0800186c <DeQueue>:
}
uint8_t DeQueue(void)
{
	if(WizFi_Queue.tail + 1 >= MAX_BUFF)
 800186c:	4a09      	ldr	r2, [pc, #36]	; (8001894 <DeQueue+0x28>)
 800186e:	8851      	ldrh	r1, [r2, #2]
{
 8001870:	b508      	push	{r3, lr}
	if(WizFi_Queue.tail + 1 >= MAX_BUFF)
 8001872:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001876:	4299      	cmp	r1, r3
		WizFi_Queue.tail = 0;
 8001878:	bfc4      	itt	gt
 800187a:	2300      	movgt	r3, #0
 800187c:	8053      	strhgt	r3, [r2, #2]

	if(Queue_Empty() == 0)
 800187e:	f7ff ffd3 	bl	8001828 <Queue_Empty>
 8001882:	b128      	cbz	r0, 8001890 <DeQueue+0x24>
		return 0xFF;

	return WizFi_Queue.data[WizFi_Queue.tail++];
 8001884:	8853      	ldrh	r3, [r2, #2]
 8001886:	1c59      	adds	r1, r3, #1
 8001888:	8051      	strh	r1, [r2, #2]
 800188a:	441a      	add	r2, r3
 800188c:	7910      	ldrb	r0, [r2, #4]
 800188e:	bd08      	pop	{r3, pc}
		return 0xFF;
 8001890:	20ff      	movs	r0, #255	; 0xff
}
 8001892:	bd08      	pop	{r3, pc}
 8001894:	20000442 	.word	0x20000442

08001898 <SPI_Input_Data_Proc>:

// connect status data process
int SPI_Input_Data_Proc(uint16_t Len, uint8_t *Data)
{
 8001898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return sock_status;
 800189c:	4d54      	ldr	r5, [pc, #336]	; (80019f0 <SPI_Input_Data_Proc+0x158>)
	static uint8_t sock_num = 0;
	switch(get_Socket_status())
 800189e:	782a      	ldrb	r2, [r5, #0]
 80018a0:	2a04      	cmp	r2, #4
{
 80018a2:	b085      	sub	sp, #20
 80018a4:	4607      	mov	r7, r0
 80018a6:	460c      	mov	r4, r1
 80018a8:	46a8      	mov	r8, r5
	switch(get_Socket_status())
 80018aa:	d01f      	beq.n	80018ec <SPI_Input_Data_Proc+0x54>
 80018ac:	2a05      	cmp	r2, #5
 80018ae:	d070      	beq.n	8001992 <SPI_Input_Data_Proc+0xfa>
 80018b0:	2a03      	cmp	r2, #3
 80018b2:	d131      	bne.n	8001918 <SPI_Input_Data_Proc+0x80>
	{
		case CONN_IDLE_MODE:
		if((Len == 11)&&(isdigit(Data[0])))
 80018b4:	280b      	cmp	r0, #11
 80018b6:	d12f      	bne.n	8001918 <SPI_Input_Data_Proc+0x80>
 80018b8:	780e      	ldrb	r6, [r1, #0]
 80018ba:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80018be:	2b09      	cmp	r3, #9
 80018c0:	d82a      	bhi.n	8001918 <SPI_Input_Data_Proc+0x80>
		{
			if((strncmp(Data + 2, "CONNECT", 7)== 0)&&((Data[0]-'0') < 5))
 80018c2:	2207      	movs	r2, #7
 80018c4:	494b      	ldr	r1, [pc, #300]	; (80019f4 <SPI_Input_Data_Proc+0x15c>)
 80018c6:	1ca0      	adds	r0, r4, #2
 80018c8:	f001 fa14 	bl	8002cf4 <strncmp>
 80018cc:	bb20      	cbnz	r0, 8001918 <SPI_Input_Data_Proc+0x80>
 80018ce:	2e34      	cmp	r6, #52	; 0x34
 80018d0:	dc22      	bgt.n	8001918 <SPI_Input_Data_Proc+0x80>
			{
				sock_count++;
 80018d2:	4a49      	ldr	r2, [pc, #292]	; (80019f8 <SPI_Input_Data_Proc+0x160>)
 80018d4:	7813      	ldrb	r3, [r2, #0]
 80018d6:	3301      	adds	r3, #1
 80018d8:	7013      	strb	r3, [r2, #0]
				sock_Con_Sta[Data[0]-'0'] = 1;
 80018da:	7822      	ldrb	r2, [r4, #0]
 80018dc:	4b47      	ldr	r3, [pc, #284]	; (80019fc <SPI_Input_Data_Proc+0x164>)
 80018de:	4413      	add	r3, r2
 80018e0:	2201      	movs	r2, #1
 80018e2:	f803 2c30 	strb.w	r2, [r3, #-48]
	sock_status = status;
 80018e6:	2304      	movs	r3, #4
 80018e8:	702b      	strb	r3, [r5, #0]
				sock_count--;
				sock_Con_Sta[Data[0]-'0'] = 0;
				if(sock_count <= 0)
				{
					set_Socket_status(CONN_IDLE_MODE);
					return 0;
 80018ea:	e015      	b.n	8001918 <SPI_Input_Data_Proc+0x80>
		if(strncmp(Data,"+IPD",4))
 80018ec:	4944      	ldr	r1, [pc, #272]	; (8001a00 <SPI_Input_Data_Proc+0x168>)
 80018ee:	4620      	mov	r0, r4
 80018f0:	f001 fa00 	bl	8002cf4 <strncmp>
 80018f4:	b1a0      	cbz	r0, 8001920 <SPI_Input_Data_Proc+0x88>
			printf("sock %d[%c]", (Data[7] - '0'), Data[7]);
 80018f6:	79e2      	ldrb	r2, [r4, #7]
 80018f8:	4842      	ldr	r0, [pc, #264]	; (8001a04 <SPI_Input_Data_Proc+0x16c>)
 80018fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80018fe:	f001 f959 	bl	8002bb4 <iprintf>
			sock_num = (Data[7] - '0') % 5;
 8001902:	79e3      	ldrb	r3, [r4, #7]
 8001904:	2105      	movs	r1, #5
 8001906:	3b30      	subs	r3, #48	; 0x30
 8001908:	fb93 f2f1 	sdiv	r2, r3, r1
 800190c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001910:	1a9b      	subs	r3, r3, r2
 8001912:	4a3d      	ldr	r2, [pc, #244]	; (8001a08 <SPI_Input_Data_Proc+0x170>)
	sock_status = status;
 8001914:	7029      	strb	r1, [r5, #0]
			sock_num = (Data[7] - '0') % 5;
 8001916:	7013      	strb	r3, [r2, #0]
		break;
		default :
		break;
	}
	return 0;
}
 8001918:	2000      	movs	r0, #0
 800191a:	b005      	add	sp, #20
 800191c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else if((Len == 11)&&(isdigit(Data[0])))
 8001920:	2f0b      	cmp	r7, #11
 8001922:	d118      	bne.n	8001956 <SPI_Input_Data_Proc+0xbe>
 8001924:	7825      	ldrb	r5, [r4, #0]
 8001926:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800192a:	2b09      	cmp	r3, #9
 800192c:	d8f4      	bhi.n	8001918 <SPI_Input_Data_Proc+0x80>
			if((strncmp(Data + 2, "CONNECT", 7)== 0)&&((Data[0]-'0') < 5))
 800192e:	2207      	movs	r2, #7
 8001930:	4930      	ldr	r1, [pc, #192]	; (80019f4 <SPI_Input_Data_Proc+0x15c>)
 8001932:	1ca0      	adds	r0, r4, #2
 8001934:	f001 f9de 	bl	8002cf4 <strncmp>
 8001938:	2800      	cmp	r0, #0
 800193a:	d1ed      	bne.n	8001918 <SPI_Input_Data_Proc+0x80>
 800193c:	2d34      	cmp	r5, #52	; 0x34
 800193e:	dceb      	bgt.n	8001918 <SPI_Input_Data_Proc+0x80>
				sock_count++;
 8001940:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <SPI_Input_Data_Proc+0x160>)
 8001942:	7813      	ldrb	r3, [r2, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	7013      	strb	r3, [r2, #0]
				sock_Con_Sta[Data[0]-'0'] = 1;
 8001948:	7822      	ldrb	r2, [r4, #0]
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <SPI_Input_Data_Proc+0x164>)
 800194c:	4413      	add	r3, r2
 800194e:	2201      	movs	r2, #1
 8001950:	f803 2c30 	strb.w	r2, [r3, #-48]
 8001954:	e7e0      	b.n	8001918 <SPI_Input_Data_Proc+0x80>
		else if((Len == 10)&&(isdigit(Data[0])))
 8001956:	2f0a      	cmp	r7, #10
 8001958:	d1de      	bne.n	8001918 <SPI_Input_Data_Proc+0x80>
 800195a:	7826      	ldrb	r6, [r4, #0]
 800195c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8001960:	2b09      	cmp	r3, #9
 8001962:	d8d9      	bhi.n	8001918 <SPI_Input_Data_Proc+0x80>
			if((strncmp(Data + 2, "CLOSED", 6)== 0)&&((Data[0]-'0') < 5))
 8001964:	2206      	movs	r2, #6
 8001966:	4929      	ldr	r1, [pc, #164]	; (8001a0c <SPI_Input_Data_Proc+0x174>)
 8001968:	1ca0      	adds	r0, r4, #2
 800196a:	f001 f9c3 	bl	8002cf4 <strncmp>
 800196e:	2800      	cmp	r0, #0
 8001970:	d1d2      	bne.n	8001918 <SPI_Input_Data_Proc+0x80>
 8001972:	2e34      	cmp	r6, #52	; 0x34
 8001974:	dcd0      	bgt.n	8001918 <SPI_Input_Data_Proc+0x80>
				sock_count--;
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <SPI_Input_Data_Proc+0x160>)
 8001978:	7813      	ldrb	r3, [r2, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	7013      	strb	r3, [r2, #0]
				sock_Con_Sta[Data[0]-'0'] = 0;
 8001980:	7821      	ldrb	r1, [r4, #0]
 8001982:	4a1e      	ldr	r2, [pc, #120]	; (80019fc <SPI_Input_Data_Proc+0x164>)
 8001984:	440a      	add	r2, r1
 8001986:	f802 0c30 	strb.w	r0, [r2, #-48]
				if(sock_count <= 0)
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1c4      	bne.n	8001918 <SPI_Input_Data_Proc+0x80>
	sock_status = status;
 800198e:	2303      	movs	r3, #3
 8001990:	e7aa      	b.n	80018e8 <SPI_Input_Data_Proc+0x50>
		memcpy(SPI_Recv_data[sock_num].data[SPI_Recv_data[sock_num].count++], Data, Len);
 8001992:	f8df a074 	ldr.w	sl, [pc, #116]	; 8001a08 <SPI_Input_Data_Proc+0x170>
 8001996:	4c1e      	ldr	r4, [pc, #120]	; (8001a10 <SPI_Input_Data_Proc+0x178>)
 8001998:	f89a 9000 	ldrb.w	r9, [sl]
 800199c:	25fb      	movs	r5, #251	; 0xfb
 800199e:	fb05 f309 	mul.w	r3, r5, r9
 80019a2:	2601      	movs	r6, #1
 80019a4:	5ce0      	ldrb	r0, [r4, r3]
 80019a6:	9303      	str	r3, [sp, #12]
 80019a8:	fb15 6b09 	smlabb	fp, r5, r9, r6
 80019ac:	2632      	movs	r6, #50	; 0x32
 80019ae:	1c42      	adds	r2, r0, #1
 80019b0:	fb16 b000 	smlabb	r0, r6, r0, fp
 80019b4:	54e2      	strb	r2, [r4, r3]
 80019b6:	4420      	add	r0, r4
 80019b8:	463a      	mov	r2, r7
 80019ba:	f001 f8e7 	bl	8002b8c <memcpy>
		printf("sock[%d],Data[%d]L[%d]:%s\r\n",sock_num, SPI_Recv_data[sock_num].count-1, Len, SPI_Recv_data[sock_num].data[SPI_Recv_data[sock_num].count-1]);
 80019be:	9b03      	ldr	r3, [sp, #12]
 80019c0:	4814      	ldr	r0, [pc, #80]	; (8001a14 <SPI_Input_Data_Proc+0x17c>)
 80019c2:	5ce2      	ldrb	r2, [r4, r3]
 80019c4:	3a01      	subs	r2, #1
 80019c6:	fb06 b602 	mla	r6, r6, r2, fp
 80019ca:	4426      	add	r6, r4
 80019cc:	463b      	mov	r3, r7
 80019ce:	9600      	str	r6, [sp, #0]
 80019d0:	4649      	mov	r1, r9
 80019d2:	f001 f8ef 	bl	8002bb4 <iprintf>
		if(SPI_Recv_data[sock_num].count > 4)
 80019d6:	f89a 3000 	ldrb.w	r3, [sl]
 80019da:	435d      	muls	r5, r3
 80019dc:	5d63      	ldrb	r3, [r4, r5]
 80019de:	2b04      	cmp	r3, #4
			SPI_Recv_data[sock_num].count = 0;
 80019e0:	bf84      	itt	hi
 80019e2:	2300      	movhi	r3, #0
 80019e4:	5563      	strbhi	r3, [r4, r5]
	sock_status = status;
 80019e6:	2304      	movs	r3, #4
 80019e8:	f888 3000 	strb.w	r3, [r8]
 80019ec:	e794      	b.n	8001918 <SPI_Input_Data_Proc+0x80>
 80019ee:	bf00      	nop
 80019f0:	20000440 	.word	0x20000440
 80019f4:	0800476e 	.word	0x0800476e
 80019f8:	20000223 	.word	0x20000223
 80019fc:	20000d2d 	.word	0x20000d2d
 8001a00:	08004708 	.word	0x08004708
 8001a04:	0800470d 	.word	0x0800470d
 8001a08:	20000224 	.word	0x20000224
 8001a0c:	08004719 	.word	0x08004719
 8001a10:	20000846 	.word	0x20000846
 8001a14:	08004720 	.word	0x08004720

08001a18 <delay_count>:

//
uint8_t delay_count(uint16_t *time1, uint16_t *time2, uint16_t set_time)
{
	*time1 += 1;
 8001a18:	8803      	ldrh	r3, [r0, #0]
 8001a1a:	3301      	adds	r3, #1
{
 8001a1c:	b510      	push	{r4, lr}
	*time1 += 1;
 8001a1e:	b29b      	uxth	r3, r3
	if(*time1 > 60000)
 8001a20:	f64e 2460 	movw	r4, #60000	; 0xea60
 8001a24:	42a3      	cmp	r3, r4
	*time1 += 1;
 8001a26:	8003      	strh	r3, [r0, #0]
	if(*time1 > 60000)
 8001a28:	d801      	bhi.n	8001a2e <delay_count+0x16>
		{
			*time2 = 0;
			return 1;
		}
	}
	return 0;
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	bd10      	pop	{r4, pc}
		*time2 += 1;
 8001a2e:	880b      	ldrh	r3, [r1, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	800b      	strh	r3, [r1, #0]
		*time1 = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	8003      	strh	r3, [r0, #0]
		if(*time2 > set_time)
 8001a38:	8808      	ldrh	r0, [r1, #0]
 8001a3a:	4290      	cmp	r0, r2
 8001a3c:	d9f5      	bls.n	8001a2a <delay_count+0x12>
			*time2 = 0;
 8001a3e:	800b      	strh	r3, [r1, #0]
			return 1;
 8001a40:	2001      	movs	r0, #1
}
 8001a42:	bd10      	pop	{r4, pc}

08001a44 <match_str>:
		}
	}
	return 0;
}
uint8_t match_str(uint8_t *data, uint16_t len, uint8_t *M_data)
{
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	4615      	mov	r5, r2
 8001a48:	4604      	mov	r4, r0
 8001a4a:	1847      	adds	r7, r0, r1
	uint16_t cnt = 0;
	for(cnt=0; cnt < len; cnt++)
 8001a4c:	42bc      	cmp	r4, r7
 8001a4e:	d101      	bne.n	8001a54 <match_str+0x10>
		{
			if(strncmp(data+cnt, M_data, strlen(M_data)) == 0)
				return 1;
		}
	}
	return 0;
 8001a50:	2000      	movs	r0, #0
 8001a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(data[cnt]==M_data[0])
 8001a54:	4626      	mov	r6, r4
 8001a56:	782b      	ldrb	r3, [r5, #0]
 8001a58:	7832      	ldrb	r2, [r6, #0]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	f104 0401 	add.w	r4, r4, #1
 8001a60:	d1f4      	bne.n	8001a4c <match_str+0x8>
			if(strncmp(data+cnt, M_data, strlen(M_data)) == 0)
 8001a62:	4628      	mov	r0, r5
 8001a64:	f7fe fbbc 	bl	80001e0 <strlen>
 8001a68:	4629      	mov	r1, r5
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f001 f941 	bl	8002cf4 <strncmp>
 8001a72:	2800      	cmp	r0, #0
 8001a74:	d1ea      	bne.n	8001a4c <match_str+0x8>
				return 1;
 8001a76:	2001      	movs	r0, #1
}
 8001a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a7c <AT_CMD_send>:
		return 1;
	}
	return 0;
}
int AT_CMD_send(uint8_t *cmd, enum cmd_send_type type, uint8_t sock, uint16_t val, uint8_t *S_data)
{
 8001a7c:	b510      	push	{r4, lr}
 8001a7e:	b0c2      	sub	sp, #264	; 0x108
	int len = 0;
	uint8_t cmd_buff[256];
	if(type == none)
 8001a80:	b929      	cbnz	r1, 8001a8e <AT_CMD_send+0x12>
	{
		len = sprintf((char*)cmd_buff,"AT+%s=%d\r\n", cmd, val);
 8001a82:	491f      	ldr	r1, [pc, #124]	; (8001b00 <AT_CMD_send+0x84>)
 8001a84:	4602      	mov	r2, r0
	{
		len = sprintf((char*)cmd_buff,"AT+%s_DEF=%s\r\n", cmd, S_data);
	}
	else if(type == none_str)
	{
		len = sprintf((char*)cmd_buff,"AT+%s=%s\r\n", cmd, S_data);
 8001a86:	a802      	add	r0, sp, #8
 8001a88:	f001 f910 	bl	8002cac <siprintf>
 8001a8c:	e006      	b.n	8001a9c <AT_CMD_send+0x20>
	else if(type == noneval)
 8001a8e:	2901      	cmp	r1, #1
 8001a90:	d112      	bne.n	8001ab8 <AT_CMD_send+0x3c>
		len = sprintf((char*)cmd_buff,"AT+%s\r\n", cmd);
 8001a92:	4602      	mov	r2, r0
 8001a94:	491b      	ldr	r1, [pc, #108]	; (8001b04 <AT_CMD_send+0x88>)
 8001a96:	a802      	add	r0, sp, #8
 8001a98:	f001 f908 	bl	8002cac <siprintf>
	}
	else
	{
		len = sprintf((char*)cmd_buff,"AT+%s=%d,%d\r\n", cmd, sock, val);
 8001a9c:	4604      	mov	r4, r0
	}
	printf("send[%d]%s\r\n", len, cmd_buff);
 8001a9e:	aa02      	add	r2, sp, #8
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	4819      	ldr	r0, [pc, #100]	; (8001b08 <AT_CMD_send+0x8c>)
 8001aa4:	f001 f886 	bl	8002bb4 <iprintf>
	send_U_message(0, cmd_buff, len);
 8001aa8:	b2a2      	uxth	r2, r4
 8001aaa:	a902      	add	r1, sp, #8
 8001aac:	2000      	movs	r0, #0
 8001aae:	f000 faf9 	bl	80020a4 <send_U_message>
	return len;
}
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	b042      	add	sp, #264	; 0x108
 8001ab6:	bd10      	pop	{r4, pc}
	else if(type == CUR_int)
 8001ab8:	2902      	cmp	r1, #2
 8001aba:	d102      	bne.n	8001ac2 <AT_CMD_send+0x46>
		len = sprintf((char*)cmd_buff,"AT+%s_CUR=%d\r\n", cmd, val);
 8001abc:	4602      	mov	r2, r0
 8001abe:	4913      	ldr	r1, [pc, #76]	; (8001b0c <AT_CMD_send+0x90>)
 8001ac0:	e7e1      	b.n	8001a86 <AT_CMD_send+0xa>
	else if(type == DEF_int)
 8001ac2:	2903      	cmp	r1, #3
 8001ac4:	d102      	bne.n	8001acc <AT_CMD_send+0x50>
		len = sprintf((char*)cmd_buff,"AT+%s_DEF=%d\r\n", cmd, val);
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4911      	ldr	r1, [pc, #68]	; (8001b10 <AT_CMD_send+0x94>)
 8001aca:	e7dc      	b.n	8001a86 <AT_CMD_send+0xa>
	else if(type == CUR_str)
 8001acc:	2904      	cmp	r1, #4
 8001ace:	d103      	bne.n	8001ad8 <AT_CMD_send+0x5c>
		len = sprintf((char*)cmd_buff,"AT+%s_CUR=%s\r\n", cmd, S_data);
 8001ad0:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8001ad2:	4910      	ldr	r1, [pc, #64]	; (8001b14 <AT_CMD_send+0x98>)
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	e7d6      	b.n	8001a86 <AT_CMD_send+0xa>
	else if(type == DEF_str)
 8001ad8:	2905      	cmp	r1, #5
 8001ada:	d103      	bne.n	8001ae4 <AT_CMD_send+0x68>
		len = sprintf((char*)cmd_buff,"AT+%s_DEF=%s\r\n", cmd, S_data);
 8001adc:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8001ade:	490e      	ldr	r1, [pc, #56]	; (8001b18 <AT_CMD_send+0x9c>)
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	e7d0      	b.n	8001a86 <AT_CMD_send+0xa>
	else if(type == none_str)
 8001ae4:	2906      	cmp	r1, #6
 8001ae6:	d103      	bne.n	8001af0 <AT_CMD_send+0x74>
		len = sprintf((char*)cmd_buff,"AT+%s=%s\r\n", cmd, S_data);
 8001ae8:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8001aea:	490c      	ldr	r1, [pc, #48]	; (8001b1c <AT_CMD_send+0xa0>)
 8001aec:	4602      	mov	r2, r0
 8001aee:	e7ca      	b.n	8001a86 <AT_CMD_send+0xa>
		len = sprintf((char*)cmd_buff,"AT+%s=%d,%d\r\n", cmd, sock, val);
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	490b      	ldr	r1, [pc, #44]	; (8001b20 <AT_CMD_send+0xa4>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	4602      	mov	r2, r0
 8001af8:	a802      	add	r0, sp, #8
 8001afa:	f001 f8d7 	bl	8002cac <siprintf>
 8001afe:	e7cd      	b.n	8001a9c <AT_CMD_send+0x20>
 8001b00:	08004612 	.word	0x08004612
 8001b04:	0800461d 	.word	0x0800461d
 8001b08:	0800467a 	.word	0x0800467a
 8001b0c:	08004625 	.word	0x08004625
 8001b10:	08004634 	.word	0x08004634
 8001b14:	08004643 	.word	0x08004643
 8001b18:	08004652 	.word	0x08004652
 8001b1c:	08004661 	.word	0x08004661
 8001b20:	0800466c 	.word	0x0800466c

08001b24 <AT_CMD_Proc>:
int AT_CMD_Proc(uint8_t *cmd, enum cmd_send_type type, uint8_t sock, uint16_t val, uint8_t *S_data, uint8_t *re_data, uint16_t time)
{
 8001b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	static uint8_t req = 0, retry = 0, pre_len = 0;
	static uint16_t Proc_cnt = 0, Proc_cnt1 = 0;
	static uint8_t temp_buf[512];
	static uint16_t temp_index = 0;
	uint16_t data_len = 0;
	if(req == 0)
 8001b26:	4d2e      	ldr	r5, [pc, #184]	; (8001be0 <AT_CMD_Proc+0xbc>)
 8001b28:	782c      	ldrb	r4, [r5, #0]
 8001b2a:	462e      	mov	r6, r5
 8001b2c:	b974      	cbnz	r4, 8001b4c <AT_CMD_Proc+0x28>
	{
		AT_CMD_send(cmd, type, sock, val, S_data);
 8001b2e:	9e08      	ldr	r6, [sp, #32]
 8001b30:	9600      	str	r6, [sp, #0]
 8001b32:	f7ff ffa3 	bl	8001a7c <AT_CMD_send>
		req = 1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	702b      	strb	r3, [r5, #0]
		Proc_cnt = 0;
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <AT_CMD_Proc+0xc0>)
 8001b3c:	801c      	strh	r4, [r3, #0]
		Proc_cnt1 = 0;
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <AT_CMD_Proc+0xc4>)
 8001b40:	801c      	strh	r4, [r3, #0]
		temp_index = 0;
 8001b42:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <AT_CMD_Proc+0xc8>)
 8001b44:	801c      	strh	r4, [r3, #0]
			retry++;
			if(retry > 5)
				return -1;
		}
	}
	return 0;
 8001b46:	2000      	movs	r0, #0
}
 8001b48:	b003      	add	sp, #12
 8001b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(req == 1)
 8001b4c:	2c01      	cmp	r4, #1
 8001b4e:	d114      	bne.n	8001b7a <AT_CMD_Proc+0x56>
		SPI_RECV_Proc();
 8001b50:	f000 fb30 	bl	80021b4 <SPI_RECV_Proc>
		if((delay_count(&Proc_cnt, &Proc_cnt1, time))|(Queue_Empty() > 0))
 8001b54:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8001b58:	4923      	ldr	r1, [pc, #140]	; (8001be8 <AT_CMD_Proc+0xc4>)
 8001b5a:	4822      	ldr	r0, [pc, #136]	; (8001be4 <AT_CMD_Proc+0xc0>)
 8001b5c:	f7ff ff5c 	bl	8001a18 <delay_count>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f7ff fe61 	bl	8001828 <Queue_Empty>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	4610      	moveq	r0, r2
 8001b6c:	f042 0001 	orrne.w	r0, r2, #1
 8001b70:	2800      	cmp	r0, #0
 8001b72:	d0e9      	beq.n	8001b48 <AT_CMD_Proc+0x24>
			req = 2;
 8001b74:	2302      	movs	r3, #2
 8001b76:	702b      	strb	r3, [r5, #0]
 8001b78:	e7e5      	b.n	8001b46 <AT_CMD_Proc+0x22>
		data_len = Queue_Empty();
 8001b7a:	f7ff fe55 	bl	8001828 <Queue_Empty>
		if(data_len > 0)
 8001b7e:	b9f8      	cbnz	r0, 8001bc0 <AT_CMD_Proc+0x9c>
			req=1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	702b      	strb	r3, [r5, #0]
 8001b84:	e021      	b.n	8001bca <AT_CMD_Proc+0xa6>
				temp_buf[temp_index++] = DeQueue();
 8001b86:	882c      	ldrh	r4, [r5, #0]
 8001b88:	1c63      	adds	r3, r4, #1
 8001b8a:	802b      	strh	r3, [r5, #0]
 8001b8c:	f7ff fe6e 	bl	800186c <DeQueue>
 8001b90:	5538      	strb	r0, [r7, r4]
			while(Queue_Empty())
 8001b92:	f7ff fe49 	bl	8001828 <Queue_Empty>
 8001b96:	4604      	mov	r4, r0
 8001b98:	2800      	cmp	r0, #0
 8001b9a:	d1f4      	bne.n	8001b86 <AT_CMD_Proc+0x62>
			temp_buf[temp_index] = 0;
 8001b9c:	882b      	ldrh	r3, [r5, #0]
 8001b9e:	54f8      	strb	r0, [r7, r3]
			if(match_str(temp_buf, strlen(temp_buf), re_data))
 8001ba0:	4813      	ldr	r0, [pc, #76]	; (8001bf0 <AT_CMD_Proc+0xcc>)
 8001ba2:	f7fe fb1d 	bl	80001e0 <strlen>
 8001ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001ba8:	b281      	uxth	r1, r0
 8001baa:	4811      	ldr	r0, [pc, #68]	; (8001bf0 <AT_CMD_Proc+0xcc>)
 8001bac:	f7ff ff4a 	bl	8001a44 <match_str>
 8001bb0:	b148      	cbz	r0, 8001bc6 <AT_CMD_Proc+0xa2>
				Proc_cnt = 0;
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <AT_CMD_Proc+0xc0>)
				req = 0;
 8001bb4:	7034      	strb	r4, [r6, #0]
				Proc_cnt = 0;
 8001bb6:	801c      	strh	r4, [r3, #0]
				Proc_cnt1 = 0;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <AT_CMD_Proc+0xc4>)
				return 1;
 8001bba:	2001      	movs	r0, #1
				Proc_cnt1 = 0;
 8001bbc:	801c      	strh	r4, [r3, #0]
 8001bbe:	e7c3      	b.n	8001b48 <AT_CMD_Proc+0x24>
 8001bc0:	4d0a      	ldr	r5, [pc, #40]	; (8001bec <AT_CMD_Proc+0xc8>)
 8001bc2:	4f0b      	ldr	r7, [pc, #44]	; (8001bf0 <AT_CMD_Proc+0xcc>)
 8001bc4:	e7e5      	b.n	8001b92 <AT_CMD_Proc+0x6e>
				req = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	7033      	strb	r3, [r6, #0]
			retry++;
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <AT_CMD_Proc+0xd0>)
 8001bcc:	7818      	ldrb	r0, [r3, #0]
 8001bce:	3001      	adds	r0, #1
 8001bd0:	b2c0      	uxtb	r0, r0
			if(retry > 5)
 8001bd2:	2805      	cmp	r0, #5
			retry++;
 8001bd4:	7018      	strb	r0, [r3, #0]
			if(retry > 5)
 8001bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bda:	bf98      	it	ls
 8001bdc:	2000      	movls	r0, #0
 8001bde:	e7b3      	b.n	8001b48 <AT_CMD_Proc+0x24>
 8001be0:	2000021d 	.word	0x2000021d
 8001be4:	20000218 	.word	0x20000218
 8001be8:	2000021a 	.word	0x2000021a
 8001bec:	20000426 	.word	0x20000426
 8001bf0:	20000225 	.word	0x20000225
 8001bf4:	2000021e 	.word	0x2000021e

08001bf8 <AT_Connect_Proc>:
		}
	}
	return 0;
}
int AT_Connect_Proc(void)
{
 8001bf8:	b530      	push	{r4, r5, lr}
	static uint8_t seq = 0;
	switch(seq)
 8001bfa:	4d24      	ldr	r5, [pc, #144]	; (8001c8c <AT_Connect_Proc+0x94>)
 8001bfc:	782b      	ldrb	r3, [r5, #0]
{
 8001bfe:	b085      	sub	sp, #20
	switch(seq)
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d810      	bhi.n	8001c26 <AT_Connect_Proc+0x2e>
 8001c04:	e8df f003 	tbb	[pc, r3]
 8001c08:	31251402 	.word	0x31251402
	{
	case 0:		//CWMODE_CUR = 1
		if(AT_CMD_Proc("CWMODE", CUR_int, 0, 1, 0, "OK", 3))
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	2400      	movs	r4, #0
 8001c10:	9302      	str	r3, [sp, #8]
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <AT_Connect_Proc+0x98>)
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	9400      	str	r4, [sp, #0]
 8001c18:	2301      	movs	r3, #1
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	481d      	ldr	r0, [pc, #116]	; (8001c94 <AT_Connect_Proc+0x9c>)
 8001c20:	f7ff ff80 	bl	8001b24 <AT_CMD_Proc>
 8001c24:	b908      	cbnz	r0, 8001c2a <AT_Connect_Proc+0x32>
	case 3:
		if(AT_CMD_Proc("CIPSTART", none_str, 0, 0, "\"TCP\",\"192.168.0.2\",3000", "CONNECT", 100))
			return 1;
		break;
	}
	return 0;
 8001c26:	2000      	movs	r0, #0
 8001c28:	e02e      	b.n	8001c88 <AT_Connect_Proc+0x90>
			seq = 2;
 8001c2a:	2302      	movs	r3, #2
			seq++;
 8001c2c:	702b      	strb	r3, [r5, #0]
 8001c2e:	e7fa      	b.n	8001c26 <AT_Connect_Proc+0x2e>
		if(AT_CMD_Proc("CWLAP", noneval, 0, 0, 0, "OK", 100))
 8001c30:	2364      	movs	r3, #100	; 0x64
 8001c32:	2400      	movs	r4, #0
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	4818      	ldr	r0, [pc, #96]	; (8001c98 <AT_Connect_Proc+0xa0>)
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <AT_Connect_Proc+0x98>)
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	9400      	str	r4, [sp, #0]
 8001c3e:	4623      	mov	r3, r4
 8001c40:	4622      	mov	r2, r4
 8001c42:	2101      	movs	r1, #1
		if(AT_CMD_Proc("CWJAP", CUR_str, 0, 0, "\"Teddy_AP\",\"12345678\"", "WIFI GOT IP", 1000))
 8001c44:	f7ff ff6e 	bl	8001b24 <AT_CMD_Proc>
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d0ec      	beq.n	8001c26 <AT_Connect_Proc+0x2e>
			seq++;
 8001c4c:	782b      	ldrb	r3, [r5, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	e7ec      	b.n	8001c2c <AT_Connect_Proc+0x34>
		if(AT_CMD_Proc("CWJAP", CUR_str, 0, 0, "\"Teddy_AP\",\"12345678\"", "WIFI GOT IP", 1000))
 8001c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <AT_Connect_Proc+0xa4>)
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <AT_Connect_Proc+0xa8>)
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2300      	movs	r3, #0
 8001c62:	461a      	mov	r2, r3
 8001c64:	2104      	movs	r1, #4
 8001c66:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <AT_Connect_Proc+0xac>)
 8001c68:	e7ec      	b.n	8001c44 <AT_Connect_Proc+0x4c>
		if(AT_CMD_Proc("CIPSTART", none_str, 0, 0, "\"TCP\",\"192.168.0.2\",3000", "CONNECT", 100))
 8001c6a:	2364      	movs	r3, #100	; 0x64
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <AT_Connect_Proc+0xb0>)
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <AT_Connect_Proc+0xb4>)
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	2106      	movs	r1, #6
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <AT_Connect_Proc+0xb8>)
 8001c7e:	f7ff ff51 	bl	8001b24 <AT_CMD_Proc>
 8001c82:	3000      	adds	r0, #0
 8001c84:	bf18      	it	ne
 8001c86:	2001      	movne	r0, #1
}
 8001c88:	b005      	add	sp, #20
 8001c8a:	bd30      	pop	{r4, r5, pc}
 8001c8c:	20000220 	.word	0x20000220
 8001c90:	080046da 	.word	0x080046da
 8001c94:	08004687 	.word	0x08004687
 8001c98:	0800468e 	.word	0x0800468e
 8001c9c:	0800473c 	.word	0x0800473c
 8001ca0:	0800469a 	.word	0x0800469a
 8001ca4:	08004694 	.word	0x08004694
 8001ca8:	0800476e 	.word	0x0800476e
 8001cac:	080046b9 	.word	0x080046b9
 8001cb0:	080046b0 	.word	0x080046b0

08001cb4 <AT_trans_Proc>:
int AT_trans_Proc(void)
{
 8001cb4:	b530      	push	{r4, r5, lr}
	static uint8_t seq = 0;
	switch(seq)
 8001cb6:	4d34      	ldr	r5, [pc, #208]	; (8001d88 <AT_trans_Proc+0xd4>)
 8001cb8:	782b      	ldrb	r3, [r5, #0]
{
 8001cba:	b085      	sub	sp, #20
	switch(seq)
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d811      	bhi.n	8001ce4 <AT_trans_Proc+0x30>
 8001cc0:	e8df f003 	tbb	[pc, r3]
 8001cc4:	3b281703 	.word	0x3b281703
 8001cc8:	5146      	.short	0x5146
	{
	case 0:		//CWMODE_CUR = 1
		if(AT_CMD_Proc("CWMODE", CUR_int, 0, 1, 0, "OK", 3))
 8001cca:	2303      	movs	r3, #3
 8001ccc:	2400      	movs	r4, #0
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <AT_trans_Proc+0xd8>)
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	9400      	str	r4, [sp, #0]
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	4622      	mov	r2, r4
 8001cda:	2102      	movs	r1, #2
 8001cdc:	482c      	ldr	r0, [pc, #176]	; (8001d90 <AT_trans_Proc+0xdc>)
 8001cde:	f7ff ff21 	bl	8001b24 <AT_CMD_Proc>
 8001ce2:	b908      	cbnz	r0, 8001ce8 <AT_trans_Proc+0x34>
			seq = 0;
			return 1;
		}
		break;
	}
	return 0;
 8001ce4:	2400      	movs	r4, #0
 8001ce6:	e001      	b.n	8001cec <AT_trans_Proc+0x38>
			seq = 2;
 8001ce8:	2302      	movs	r3, #2
			seq++;
 8001cea:	702b      	strb	r3, [r5, #0]
}
 8001cec:	4620      	mov	r0, r4
 8001cee:	b005      	add	sp, #20
 8001cf0:	bd30      	pop	{r4, r5, pc}
		if(AT_CMD_Proc("CWLAP", noneval, 0, 0, 0, "OK", 100))
 8001cf2:	2364      	movs	r3, #100	; 0x64
 8001cf4:	2400      	movs	r4, #0
 8001cf6:	9302      	str	r3, [sp, #8]
 8001cf8:	4826      	ldr	r0, [pc, #152]	; (8001d94 <AT_trans_Proc+0xe0>)
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <AT_trans_Proc+0xd8>)
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	9400      	str	r4, [sp, #0]
 8001d00:	4623      	mov	r3, r4
 8001d02:	4622      	mov	r2, r4
 8001d04:	2101      	movs	r1, #1
		if(AT_CMD_Proc("CIPMODE", none, 0, 1, 0, "OK", 3))
 8001d06:	f7ff ff0d 	bl	8001b24 <AT_CMD_Proc>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	d0ea      	beq.n	8001ce4 <AT_trans_Proc+0x30>
			seq++;
 8001d0e:	782b      	ldrb	r3, [r5, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	e7ea      	b.n	8001cea <AT_trans_Proc+0x36>
		if(AT_CMD_Proc("CWJAP", CUR_str, 0, 0, "\"Teddy_AP\",\"12345678\"", "WIFI GOT IP", 1000))
 8001d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d18:	9302      	str	r3, [sp, #8]
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <AT_trans_Proc+0xe4>)
 8001d1c:	9301      	str	r3, [sp, #4]
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <AT_trans_Proc+0xe8>)
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	481f      	ldr	r0, [pc, #124]	; (8001da0 <AT_trans_Proc+0xec>)
 8001d24:	2300      	movs	r3, #0
 8001d26:	461a      	mov	r2, r3
 8001d28:	2104      	movs	r1, #4
		if(AT_CMD_Proc("CIPSTART", none_str, 0, 0, "\"TCP\",\"192.168.0.2\",3000", "CONNECT", 100))
 8001d2a:	f7ff fefb 	bl	8001b24 <AT_CMD_Proc>
 8001d2e:	2800      	cmp	r0, #0
 8001d30:	d0d8      	beq.n	8001ce4 <AT_trans_Proc+0x30>
			seq++;
 8001d32:	782b      	ldrb	r3, [r5, #0]
 8001d34:	3301      	adds	r3, #1
 8001d36:	702b      	strb	r3, [r5, #0]
 8001d38:	e7d4      	b.n	8001ce4 <AT_trans_Proc+0x30>
		if(AT_CMD_Proc("CIPMODE", none, 0, 1, 0, "OK", 3))
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	2400      	movs	r4, #0
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <AT_trans_Proc+0xd8>)
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	9400      	str	r4, [sp, #0]
 8001d46:	2301      	movs	r3, #1
 8001d48:	4622      	mov	r2, r4
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	4815      	ldr	r0, [pc, #84]	; (8001da4 <AT_trans_Proc+0xf0>)
 8001d4e:	e7da      	b.n	8001d06 <AT_trans_Proc+0x52>
		if(AT_CMD_Proc("CIPSTART", none_str, 0, 0, "\"TCP\",\"192.168.0.2\",3000", "CONNECT", 100))
 8001d50:	2364      	movs	r3, #100	; 0x64
 8001d52:	9302      	str	r3, [sp, #8]
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <AT_trans_Proc+0xf4>)
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <AT_trans_Proc+0xf8>)
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	2106      	movs	r1, #6
 8001d62:	4813      	ldr	r0, [pc, #76]	; (8001db0 <AT_trans_Proc+0xfc>)
 8001d64:	e7e1      	b.n	8001d2a <AT_trans_Proc+0x76>
		if(AT_CMD_Proc("CIPSEND", noneval, 0, 0, 0, "\r\n>", 3))
 8001d66:	2303      	movs	r3, #3
 8001d68:	2400      	movs	r4, #0
 8001d6a:	9302      	str	r3, [sp, #8]
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <AT_trans_Proc+0x100>)
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	9400      	str	r4, [sp, #0]
 8001d72:	4623      	mov	r3, r4
 8001d74:	4622      	mov	r2, r4
 8001d76:	2101      	movs	r1, #1
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <AT_trans_Proc+0x104>)
 8001d7a:	f7ff fed3 	bl	8001b24 <AT_CMD_Proc>
 8001d7e:	2800      	cmp	r0, #0
 8001d80:	d0b0      	beq.n	8001ce4 <AT_trans_Proc+0x30>
			seq = 0;
 8001d82:	702c      	strb	r4, [r5, #0]
			return 1;
 8001d84:	2401      	movs	r4, #1
 8001d86:	e7b1      	b.n	8001cec <AT_trans_Proc+0x38>
 8001d88:	20000221 	.word	0x20000221
 8001d8c:	080046da 	.word	0x080046da
 8001d90:	08004687 	.word	0x08004687
 8001d94:	0800468e 	.word	0x0800468e
 8001d98:	0800473c 	.word	0x0800473c
 8001d9c:	0800469a 	.word	0x0800469a
 8001da0:	08004694 	.word	0x08004694
 8001da4:	080046f4 	.word	0x080046f4
 8001da8:	0800476e 	.word	0x0800476e
 8001dac:	080046b9 	.word	0x080046b9
 8001db0:	080046b0 	.word	0x080046b0
 8001db4:	08004704 	.word	0x08004704
 8001db8:	080046fc 	.word	0x080046fc

08001dbc <AT_Server_Open_Proc>:
int AT_Server_Open_Proc(void)
{
 8001dbc:	b530      	push	{r4, r5, lr}
	static uint8_t seq = 0;
	extern char AP_CON_DATA[30]; 
	switch(seq)
 8001dbe:	4d36      	ldr	r5, [pc, #216]	; (8001e98 <AT_Server_Open_Proc+0xdc>)
 8001dc0:	782b      	ldrb	r3, [r5, #0]
{
 8001dc2:	b085      	sub	sp, #20
	switch(seq)
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d811      	bhi.n	8001dec <AT_Server_Open_Proc+0x30>
 8001dc8:	e8df f003 	tbb	[pc, r3]
 8001dcc:	3b281703 	.word	0x3b281703
 8001dd0:	5246      	.short	0x5246
	{
	case 0:		//CWMODE_CUR = 1
		if(AT_CMD_Proc("CWMODE", CUR_int, 0, 1, 0, "OK", 3))
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	2400      	movs	r4, #0
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <AT_Server_Open_Proc+0xe0>)
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	9400      	str	r4, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	4622      	mov	r2, r4
 8001de2:	2102      	movs	r1, #2
 8001de4:	482e      	ldr	r0, [pc, #184]	; (8001ea0 <AT_Server_Open_Proc+0xe4>)
 8001de6:	f7ff fe9d 	bl	8001b24 <AT_CMD_Proc>
 8001dea:	b908      	cbnz	r0, 8001df0 <AT_Server_Open_Proc+0x34>
			seq = 0;
			set_Socket_status(CONN_IDLE_MODE);
			return 1;
		break;
	}
	return 0;
 8001dec:	2400      	movs	r4, #0
 8001dee:	e001      	b.n	8001df4 <AT_Server_Open_Proc+0x38>
			seq = 2;
 8001df0:	2302      	movs	r3, #2
			seq++;
 8001df2:	702b      	strb	r3, [r5, #0]
}
 8001df4:	4620      	mov	r0, r4
 8001df6:	b005      	add	sp, #20
 8001df8:	bd30      	pop	{r4, r5, pc}
		if(AT_CMD_Proc("CWLAP", noneval, 0, 0, 0, "OK", 100))
 8001dfa:	2364      	movs	r3, #100	; 0x64
 8001dfc:	2400      	movs	r4, #0
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	4828      	ldr	r0, [pc, #160]	; (8001ea4 <AT_Server_Open_Proc+0xe8>)
 8001e02:	4b26      	ldr	r3, [pc, #152]	; (8001e9c <AT_Server_Open_Proc+0xe0>)
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	9400      	str	r4, [sp, #0]
 8001e08:	4623      	mov	r3, r4
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	2101      	movs	r1, #1
		if(AT_CMD_Proc("CIPSERVER", none_soc, 1, 5001, 0, "OK", 100))
 8001e0e:	f7ff fe89 	bl	8001b24 <AT_CMD_Proc>
 8001e12:	2800      	cmp	r0, #0
 8001e14:	d0ea      	beq.n	8001dec <AT_Server_Open_Proc+0x30>
			seq++;
 8001e16:	782b      	ldrb	r3, [r5, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	e7ea      	b.n	8001df2 <AT_Server_Open_Proc+0x36>
		if(AT_CMD_Proc("CWJAP", CUR_str, 0, 0, AP_CON_DATA, "OK", 1000))
 8001e1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <AT_Server_Open_Proc+0xe0>)
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <AT_Server_Open_Proc+0xec>)
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2104      	movs	r1, #4
 8001e30:	481e      	ldr	r0, [pc, #120]	; (8001eac <AT_Server_Open_Proc+0xf0>)
 8001e32:	f7ff fe77 	bl	8001b24 <AT_CMD_Proc>
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d0d8      	beq.n	8001dec <AT_Server_Open_Proc+0x30>
			seq++;
 8001e3a:	782b      	ldrb	r3, [r5, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	702b      	strb	r3, [r5, #0]
 8001e40:	e7d4      	b.n	8001dec <AT_Server_Open_Proc+0x30>
		if(AT_CMD_Proc("CIPMUX", none, 0, 1, 0, "OK", 10))
 8001e42:	230a      	movs	r3, #10
 8001e44:	2400      	movs	r4, #0
 8001e46:	9302      	str	r3, [sp, #8]
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <AT_Server_Open_Proc+0xe0>)
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	9400      	str	r4, [sp, #0]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	4622      	mov	r2, r4
 8001e52:	4621      	mov	r1, r4
 8001e54:	4816      	ldr	r0, [pc, #88]	; (8001eb0 <AT_Server_Open_Proc+0xf4>)
 8001e56:	e7da      	b.n	8001e0e <AT_Server_Open_Proc+0x52>
		if(AT_CMD_Proc("CIPSERVER", none_soc, 1, 5001, 0, "OK", 100))
 8001e58:	2364      	movs	r3, #100	; 0x64
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	2400      	movs	r4, #0
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <AT_Server_Open_Proc+0xe0>)
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	9400      	str	r4, [sp, #0]
 8001e64:	f241 3389 	movw	r3, #5001	; 0x1389
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2107      	movs	r1, #7
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <AT_Server_Open_Proc+0xf8>)
 8001e6e:	e7ce      	b.n	8001e0e <AT_Server_Open_Proc+0x52>
		if(AT_CMD_Proc("CIFSR", noneval, 0, 0, 0, "OK", 10))
 8001e70:	230a      	movs	r3, #10
 8001e72:	2400      	movs	r4, #0
 8001e74:	9302      	str	r3, [sp, #8]
 8001e76:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <AT_Server_Open_Proc+0xe0>)
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	9400      	str	r4, [sp, #0]
 8001e7c:	4623      	mov	r3, r4
 8001e7e:	4622      	mov	r2, r4
 8001e80:	2101      	movs	r1, #1
 8001e82:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <AT_Server_Open_Proc+0xfc>)
 8001e84:	f7ff fe4e 	bl	8001b24 <AT_CMD_Proc>
 8001e88:	b100      	cbz	r0, 8001e8c <AT_Server_Open_Proc+0xd0>
			seq = 0;
 8001e8a:	702c      	strb	r4, [r5, #0]
	sock_status = status;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <AT_Server_Open_Proc+0x100>)
 8001e8e:	2203      	movs	r2, #3
 8001e90:	701a      	strb	r2, [r3, #0]
			return 1;
 8001e92:	2401      	movs	r4, #1
 8001e94:	e7ae      	b.n	8001df4 <AT_Server_Open_Proc+0x38>
 8001e96:	bf00      	nop
 8001e98:	20000222 	.word	0x20000222
 8001e9c:	080046da 	.word	0x080046da
 8001ea0:	08004687 	.word	0x08004687
 8001ea4:	0800468e 	.word	0x0800468e
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	08004694 	.word	0x08004694
 8001eb0:	080046dd 	.word	0x080046dd
 8001eb4:	080046e4 	.word	0x080046e4
 8001eb8:	080046ee 	.word	0x080046ee
 8001ebc:	20000440 	.word	0x20000440

08001ec0 <AT_SEND_Proc>:
int AT_SEND_Proc(uint8_t *data, uint16_t len)
{
 8001ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint8_t send_seq = 0, recv_retry = 0;
	static uint16_t wait_time = 0;
	uint8_t temp_buf[512], temp_index = 0;
	uint16_t data_len = len, data_shift = 0;
	switch(send_seq)
 8001ec4:	4d39      	ldr	r5, [pc, #228]	; (8001fac <AT_SEND_Proc+0xec>)
 8001ec6:	782b      	ldrb	r3, [r5, #0]
{
 8001ec8:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001ecc:	4607      	mov	r7, r0
 8001ece:	460e      	mov	r6, r1
	switch(send_seq)
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d849      	bhi.n	8001f68 <AT_SEND_Proc+0xa8>
 8001ed4:	e8df f003 	tbb	[pc, r3]
 8001ed8:	511e3431 	.word	0x511e3431
 8001edc:	03          	.byte	0x03
 8001edd:	00          	.byte	0x00
 8001ede:	2400      	movs	r4, #0
 8001ee0:	ae04      	add	r6, sp, #16
		#endif
		if(Queue_Empty()>0)
			send_seq++;
		break;
	case 4:
		while(Queue_Empty())
 8001ee2:	f7ff fca1 	bl	8001828 <Queue_Empty>
 8001ee6:	f104 0801 	add.w	r8, r4, #1
 8001eea:	4607      	mov	r7, r0
 8001eec:	b2e4      	uxtb	r4, r4
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d14a      	bne.n	8001f88 <AT_SEND_Proc+0xc8>
		{
			temp_buf[temp_index++] = DeQueue();
		}
		temp_buf[temp_index] = 0;
 8001ef2:	5530      	strb	r0, [r6, r4]
		//printf("recv[%d]%s \r\n", temp_index, temp_buf);
		if(match_str(temp_buf, strlen(temp_buf), "SEND OK"))
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	f7fe f973 	bl	80001e0 <strlen>
 8001efa:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <AT_SEND_Proc+0xf0>)
 8001efc:	b281      	uxth	r1, r0
 8001efe:	4630      	mov	r0, r6
 8001f00:	f7ff fda0 	bl	8001a44 <match_str>
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d044      	beq.n	8001f92 <AT_SEND_Proc+0xd2>
		{
			send_seq = 0;
 8001f08:	702f      	strb	r7, [r5, #0]
			return 1;
 8001f0a:	2001      	movs	r0, #1
			return -1;
		}
		break;
	}
	return 0;
}
 8001f0c:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 8001f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch(send_seq)
 8001f14:	2400      	movs	r4, #0
		while (data_len > 0)
 8001f16:	b36e      	cbz	r6, 8001f74 <AT_SEND_Proc+0xb4>
			if(data_len > 500)
 8001f18:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
 8001f1c:	eb07 0104 	add.w	r1, r7, r4
 8001f20:	d924      	bls.n	8001f6c <AT_SEND_Proc+0xac>
				send_U_message(1, data + data_shift, 500);
 8001f22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f26:	2001      	movs	r0, #1
				data_shift += 500;
 8001f28:	f504 74fa 	add.w	r4, r4, #500	; 0x1f4
				data_len = data_len - 500;
 8001f2c:	f5a6 76fa 	sub.w	r6, r6, #500	; 0x1f4
				send_U_message(1, data + data_shift, 500);
 8001f30:	f000 f8b8 	bl	80020a4 <send_U_message>
				data_shift += 500;
 8001f34:	b2a4      	uxth	r4, r4
				data_len = data_len - 500;
 8001f36:	b2b6      	uxth	r6, r6
 8001f38:	e7ed      	b.n	8001f16 <AT_SEND_Proc+0x56>
		send_seq++;
 8001f3a:	2301      	movs	r3, #1
			send_seq++;
 8001f3c:	702b      	strb	r3, [r5, #0]
 8001f3e:	e013      	b.n	8001f68 <AT_SEND_Proc+0xa8>
		if(AT_CMD_Proc("CIPSEND", none, 0, len, 0, "> ", 3) == 1)
 8001f40:	2303      	movs	r3, #3
 8001f42:	2400      	movs	r4, #0
 8001f44:	9302      	str	r3, [sp, #8]
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <AT_SEND_Proc+0xf4>)
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	9400      	str	r4, [sp, #0]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4622      	mov	r2, r4
 8001f50:	4621      	mov	r1, r4
 8001f52:	4819      	ldr	r0, [pc, #100]	; (8001fb8 <AT_SEND_Proc+0xf8>)
 8001f54:	f7ff fde6 	bl	8001b24 <AT_CMD_Proc>
 8001f58:	2801      	cmp	r0, #1
			send_seq++;
 8001f5a:	bf01      	itttt	eq
 8001f5c:	782b      	ldrbeq	r3, [r5, #0]
 8001f5e:	3301      	addeq	r3, #1
 8001f60:	702b      	strbeq	r3, [r5, #0]
			recv_retry = 0;
 8001f62:	4b16      	ldreq	r3, [pc, #88]	; (8001fbc <AT_SEND_Proc+0xfc>)
 8001f64:	bf08      	it	eq
 8001f66:	701c      	strbeq	r4, [r3, #0]
	return 0;
 8001f68:	2000      	movs	r0, #0
 8001f6a:	e7cf      	b.n	8001f0c <AT_SEND_Proc+0x4c>
				send_U_message(1, data + data_shift, data_len);
 8001f6c:	4632      	mov	r2, r6
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 f898 	bl	80020a4 <send_U_message>
			send_seq++;
 8001f74:	782b      	ldrb	r3, [r5, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	e7e0      	b.n	8001f3c <AT_SEND_Proc+0x7c>
		SPI_RECV_Proc();
 8001f7a:	f000 f91b 	bl	80021b4 <SPI_RECV_Proc>
		if(Queue_Empty()>0)
 8001f7e:	f7ff fc53 	bl	8001828 <Queue_Empty>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d0f0      	beq.n	8001f68 <AT_SEND_Proc+0xa8>
 8001f86:	e7f5      	b.n	8001f74 <AT_SEND_Proc+0xb4>
			temp_buf[temp_index++] = DeQueue();
 8001f88:	f7ff fc70 	bl	800186c <DeQueue>
 8001f8c:	5530      	strb	r0, [r6, r4]
 8001f8e:	4644      	mov	r4, r8
 8001f90:	e7a7      	b.n	8001ee2 <AT_SEND_Proc+0x22>
		send_seq--;
 8001f92:	2303      	movs	r3, #3
 8001f94:	702b      	strb	r3, [r5, #0]
		recv_retry++;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <AT_SEND_Proc+0xfc>)
 8001f98:	7818      	ldrb	r0, [r3, #0]
 8001f9a:	3001      	adds	r0, #1
 8001f9c:	b2c0      	uxtb	r0, r0
		if(recv_retry > 5)
 8001f9e:	2805      	cmp	r0, #5
		recv_retry++;
 8001fa0:	7018      	strb	r0, [r3, #0]
		if(recv_retry > 5)
 8001fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa6:	bf98      	it	ls
 8001fa8:	2000      	movls	r0, #0
 8001faa:	e7af      	b.n	8001f0c <AT_SEND_Proc+0x4c>
 8001fac:	2000021f 	.word	0x2000021f
 8001fb0:	080046d5 	.word	0x080046d5
 8001fb4:	080046d2 	.word	0x080046d2
 8001fb8:	080046fc 	.word	0x080046fc
 8001fbc:	2000021c 	.word	0x2000021c

08001fc0 <AT_SEND_Proc1>:
int AT_SEND_Proc1(uint8_t *data, uint16_t len)
{
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	4606      	mov	r6, r0
 8001fc4:	460c      	mov	r4, r1
	uint16_t data_len = len, data_shift = 0;
 8001fc6:	2500      	movs	r5, #0
	while (data_len > 0)
 8001fc8:	b1a4      	cbz	r4, 8001ff4 <AT_SEND_Proc1+0x34>
	{
		if(data_len > 500)
 8001fca:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
 8001fce:	eb06 0105 	add.w	r1, r6, r5
 8001fd2:	d90b      	bls.n	8001fec <AT_SEND_Proc1+0x2c>
		{
			send_U_message(1, data + data_shift, 500);
 8001fd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fd8:	2001      	movs	r0, #1
			data_shift += 500;
 8001fda:	f505 75fa 	add.w	r5, r5, #500	; 0x1f4
			data_len = data_len - 500;
 8001fde:	f5a4 74fa 	sub.w	r4, r4, #500	; 0x1f4
			send_U_message(1, data + data_shift, 500);
 8001fe2:	f000 f85f 	bl	80020a4 <send_U_message>
			data_shift += 500;
 8001fe6:	b2ad      	uxth	r5, r5
			data_len = data_len - 500;
 8001fe8:	b2a4      	uxth	r4, r4
 8001fea:	e7ed      	b.n	8001fc8 <AT_SEND_Proc1+0x8>
		}
		else
		{
			send_U_message(1, data + data_shift, data_len);
 8001fec:	4622      	mov	r2, r4
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f000 f858 	bl	80020a4 <send_U_message>
			data_len = 0;
		}
	}
	return 0;
}
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}

08001ff8 <MX_SPI1_Init>:

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001ff8:	480a      	ldr	r0, [pc, #40]	; (8002024 <MX_SPI1_Init+0x2c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_SPI1_Init+0x30>)
 8001ffc:	f44f 7c82 	mov.w	ip, #260	; 0x104
 8002000:	e880 1008 	stmia.w	r0, {r3, ip}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002004:	2300      	movs	r3, #0
 8002006:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002008:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800200a:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800200c:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800200e:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002012:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002014:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002016:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002018:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800201a:	230a      	movs	r3, #10
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800201c:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800201e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002020:	f7fe bf4c 	b.w	8000ebc <HAL_SPI_Init>
 8002024:	20001b6c 	.word	0x20001b6c
 8002028:	40013000 	.word	0x40013000

0800202c <_write>:
{
 800202c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800202e:	4f08      	ldr	r7, [pc, #32]	; (8002050 <_write+0x24>)
{
 8002030:	460e      	mov	r6, r1
 8002032:	4615      	mov	r5, r2
	for(int i=0; i<len; i++)
 8002034:	2400      	movs	r4, #0
 8002036:	42ac      	cmp	r4, r5
 8002038:	db01      	blt.n	800203e <_write+0x12>
}
 800203a:	4628      	mov	r0, r5
 800203c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800203e:	1931      	adds	r1, r6, r4
 8002040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002044:	2201      	movs	r2, #1
 8002046:	4638      	mov	r0, r7
 8002048:	f7ff fa6a 	bl	8001520 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 800204c:	3401      	adds	r4, #1
 800204e:	e7f2      	b.n	8002036 <_write+0xa>
 8002050:	20001bc4 	.word	0x20001bc4

08002054 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002054:	b510      	push	{r4, lr}
     HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8002056:	4c09      	ldr	r4, [pc, #36]	; (800207c <HAL_UART_RxCpltCallback+0x28>)
 8002058:	4809      	ldr	r0, [pc, #36]	; (8002080 <HAL_UART_RxCpltCallback+0x2c>)
 800205a:	2201      	movs	r2, #1
 800205c:	4621      	mov	r1, r4
 800205e:	f7ff fabc 	bl	80015da <HAL_UART_Receive_IT>
     RX_BUFFER[RX_Index++] = rxData;
 8002062:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_UART_RxCpltCallback+0x30>)
 8002064:	881a      	ldrh	r2, [r3, #0]
 8002066:	1c51      	adds	r1, r2, #1
 8002068:	8019      	strh	r1, [r3, #0]
 800206a:	7823      	ldrb	r3, [r4, #0]
 800206c:	4906      	ldr	r1, [pc, #24]	; (8002088 <HAL_UART_RxCpltCallback+0x34>)
     if(rxData == '\n')
 800206e:	2b0a      	cmp	r3, #10
     RX_BUFFER[RX_Index++] = rxData;
 8002070:	548b      	strb	r3, [r1, r2]
    	 RX_Flag = 1;
 8002072:	bf02      	ittt	eq
 8002074:	4b05      	ldreq	r3, [pc, #20]	; (800208c <HAL_UART_RxCpltCallback+0x38>)
 8002076:	2201      	moveq	r2, #1
 8002078:	701a      	strbeq	r2, [r3, #0]
 800207a:	bd10      	pop	{r4, pc}
 800207c:	20001138 	.word	0x20001138
 8002080:	20001bc4 	.word	0x20001bc4
 8002084:	2000042a 	.word	0x2000042a
 8002088:	20001139 	.word	0x20001139
 800208c:	20000428 	.word	0x20000428

08002090 <HAL_GPIO_EXTI_Callback>:
	if(GPIO_Pin == GPIO_PIN_8)
 8002090:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
		Spi_rx_flag = 1;
 8002094:	bf02      	ittt	eq
 8002096:	4b02      	ldreq	r3, [pc, #8]	; (80020a0 <HAL_GPIO_EXTI_Callback+0x10>)
 8002098:	2201      	moveq	r2, #1
 800209a:	701a      	strbeq	r2, [r3, #0]
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	2000042c 	.word	0x2000042c

080020a4 <send_U_message>:
{
 80020a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint8_t temp_CMD, retry = 0, err = 0, dum = 0xFF, dum2=0x00, rx_temp[2];
 80020a8:	2400      	movs	r4, #0
 80020aa:	23ff      	movs	r3, #255	; 0xff
{
 80020ac:	4680      	mov	r8, r0
 80020ae:	460f      	mov	r7, r1
 80020b0:	4615      	mov	r5, r2
  memset(SPI_TX_BUFF,0, sizeof(SPI_TX_BUFF));
 80020b2:	4621      	mov	r1, r4
 80020b4:	f44f 6283 	mov.w	r2, #1048	; 0x418
 80020b8:	483a      	ldr	r0, [pc, #232]	; (80021a4 <send_U_message+0x100>)
  uint8_t temp_CMD, retry = 0, err = 0, dum = 0xFF, dum2=0x00, rx_temp[2];
 80020ba:	f88d 300a 	strb.w	r3, [sp, #10]
 80020be:	f88d 400b 	strb.w	r4, [sp, #11]
  memset(SPI_TX_BUFF,0, sizeof(SPI_TX_BUFF));
 80020c2:	f000 fd6e 	bl	8002ba2 <memset>
  SPI_CS_OFF;
 80020c6:	4622      	mov	r2, r4
 80020c8:	2140      	movs	r1, #64	; 0x40
 80020ca:	4837      	ldr	r0, [pc, #220]	; (80021a8 <send_U_message+0x104>)
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 80020cc:	4e37      	ldr	r6, [pc, #220]	; (80021ac <send_U_message+0x108>)
  SPI_CS_OFF;
 80020ce:	f7fe fc0f 	bl	80008f0 <HAL_GPIO_WritePin>
  temp_CMD = SPI_REG_TX_BUFF_AVAIL;
 80020d2:	2303      	movs	r3, #3
 80020d4:	f88d 3009 	strb.w	r3, [sp, #9]
  while((spi_rx_len != 0xffff) && (0 == (spi_rx_len & 0x02)))
 80020d8:	07a3      	lsls	r3, r4, #30
 80020da:	d424      	bmi.n	8002126 <send_U_message+0x82>
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 80020dc:	240a      	movs	r4, #10
 80020de:	9400      	str	r4, [sp, #0]
 80020e0:	2301      	movs	r3, #1
 80020e2:	f10d 020b 	add.w	r2, sp, #11
 80020e6:	f10d 0109 	add.w	r1, sp, #9
 80020ea:	4630      	mov	r0, r6
 80020ec:	f7fe ff23 	bl	8000f36 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[0], 1, 10);
 80020f0:	eb0d 0104 	add.w	r1, sp, r4
 80020f4:	9400      	str	r4, [sp, #0]
 80020f6:	2301      	movs	r3, #1
 80020f8:	aa03      	add	r2, sp, #12
 80020fa:	4630      	mov	r0, r6
 80020fc:	f7fe ff1b 	bl	8000f36 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[1], 1, 10);
 8002100:	9400      	str	r4, [sp, #0]
 8002102:	2301      	movs	r3, #1
 8002104:	eb0d 0104 	add.w	r1, sp, r4
 8002108:	f10d 020d 	add.w	r2, sp, #13
 800210c:	4630      	mov	r0, r6
 800210e:	f7fe ff12 	bl	8000f36 <HAL_SPI_TransmitReceive>
    spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 8002112:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002116:	f89d 400c 	ldrb.w	r4, [sp, #12]
 800211a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  while((spi_rx_len != 0xffff) && (0 == (spi_rx_len & 0x02)))
 800211e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002122:	429c      	cmp	r4, r3
 8002124:	d1d8      	bne.n	80020d8 <send_U_message+0x34>
  TX_len = len + 2;
 8002126:	1cac      	adds	r4, r5, #2
  SPI_CS_ON;
 8002128:	2201      	movs	r2, #1
 800212a:	2140      	movs	r1, #64	; 0x40
 800212c:	481e      	ldr	r0, [pc, #120]	; (80021a8 <send_U_message+0x104>)
  TX_len = len + 2;
 800212e:	b2a4      	uxth	r4, r4
  SPI_CS_ON;
 8002130:	f7fe fbde 	bl	80008f0 <HAL_GPIO_WritePin>
  if(TX_len % 4)
 8002134:	07a2      	lsls	r2, r4, #30
 8002136:	d12e      	bne.n	8002196 <send_U_message+0xf2>
    SPI_CS_OFF;
 8002138:	2200      	movs	r2, #0
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	481a      	ldr	r0, [pc, #104]	; (80021a8 <send_U_message+0x104>)
 800213e:	f7fe fbd7 	bl	80008f0 <HAL_GPIO_WritePin>
    if(type)
 8002142:	f1b8 0f00 	cmp.w	r8, #0
 8002146:	d02b      	beq.n	80021a0 <send_U_message+0xfc>
      temp_CMD = SPI_CMD_TX_DATA;
 8002148:	2390      	movs	r3, #144	; 0x90
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 800214a:	f04f 080a 	mov.w	r8, #10
    memcpy(SPI_TX_BUFF , &len, sizeof(len));
 800214e:	4e15      	ldr	r6, [pc, #84]	; (80021a4 <send_U_message+0x100>)
      temp_CMD = SPI_CMD_TX_CMD;
 8002150:	f88d 3009 	strb.w	r3, [sp, #9]
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 8002154:	f10d 020b 	add.w	r2, sp, #11
 8002158:	2301      	movs	r3, #1
 800215a:	f10d 0109 	add.w	r1, sp, #9
 800215e:	f8cd 8000 	str.w	r8, [sp]
 8002162:	4812      	ldr	r0, [pc, #72]	; (80021ac <send_U_message+0x108>)
 8002164:	f7fe fee7 	bl	8000f36 <HAL_SPI_TransmitReceive>
    memcpy(SPI_TX_BUFF , &len, sizeof(len));
 8002168:	4630      	mov	r0, r6
    memcpy(SPI_TX_BUFF + 2, data, len);
 800216a:	462a      	mov	r2, r5
 800216c:	4639      	mov	r1, r7
    memcpy(SPI_TX_BUFF , &len, sizeof(len));
 800216e:	f820 5b02 	strh.w	r5, [r0], #2
    memcpy(SPI_TX_BUFF + 2, data, len);
 8002172:	f000 fd0b 	bl	8002b8c <memcpy>
    HAL_SPI_TransmitReceive(&hspi1, SPI_TX_BUFF, RX_BUFFER, TX_len, 10);
 8002176:	4623      	mov	r3, r4
 8002178:	4631      	mov	r1, r6
 800217a:	f8cd 8000 	str.w	r8, [sp]
 800217e:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <send_U_message+0x10c>)
 8002180:	480a      	ldr	r0, [pc, #40]	; (80021ac <send_U_message+0x108>)
 8002182:	f7fe fed8 	bl	8000f36 <HAL_SPI_TransmitReceive>
    SPI_CS_ON;
 8002186:	2201      	movs	r2, #1
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	4807      	ldr	r0, [pc, #28]	; (80021a8 <send_U_message+0x104>)
 800218c:	f7fe fbb0 	bl	80008f0 <HAL_GPIO_WritePin>
}
 8002190:	b004      	add	sp, #16
 8002192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TX_len = ((TX_len + 3)/4) << 2;
 8002196:	1ce3      	adds	r3, r4, #3
 8002198:	f64f 74fc 	movw	r4, #65532	; 0xfffc
 800219c:	401c      	ands	r4, r3
 800219e:	e7cb      	b.n	8002138 <send_U_message+0x94>
      temp_CMD = SPI_CMD_TX_CMD;
 80021a0:	2391      	movs	r3, #145	; 0x91
 80021a2:	e7d2      	b.n	800214a <send_U_message+0xa6>
 80021a4:	20001339 	.word	0x20001339
 80021a8:	40020400 	.word	0x40020400
 80021ac:	20001b6c 	.word	0x20001b6c
 80021b0:	20001139 	.word	0x20001139

080021b4 <SPI_RECV_Proc>:
{
 80021b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t temp_CMD, dum = 0xFF, dum2=0x00,rx_temp[2]={0,0};
 80021b6:	2600      	movs	r6, #0
 80021b8:	23ff      	movs	r3, #255	; 0xff
  SPI_CS_OFF;
 80021ba:	4632      	mov	r2, r6
 80021bc:	2140      	movs	r1, #64	; 0x40
 80021be:	4853      	ldr	r0, [pc, #332]	; (800230c <SPI_RECV_Proc+0x158>)
  uint8_t temp_CMD, dum = 0xFF, dum2=0x00,rx_temp[2]={0,0};
 80021c0:	f88d 300a 	strb.w	r3, [sp, #10]
  HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 80021c4:	250a      	movs	r5, #10
  uint8_t temp_CMD, dum = 0xFF, dum2=0x00,rx_temp[2]={0,0};
 80021c6:	f88d 600b 	strb.w	r6, [sp, #11]
 80021ca:	f88d 600c 	strb.w	r6, [sp, #12]
 80021ce:	f88d 600d 	strb.w	r6, [sp, #13]
  SPI_CS_OFF;
 80021d2:	f7fe fb8d 	bl	80008f0 <HAL_GPIO_WritePin>
  temp_CMD = SPI_REG_INT_STTS;
 80021d6:	2306      	movs	r3, #6
 80021d8:	f88d 3009 	strb.w	r3, [sp, #9]
  HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 80021dc:	f10d 020b 	add.w	r2, sp, #11
 80021e0:	2301      	movs	r3, #1
 80021e2:	f10d 0109 	add.w	r1, sp, #9
 80021e6:	9500      	str	r5, [sp, #0]
 80021e8:	4849      	ldr	r0, [pc, #292]	; (8002310 <SPI_RECV_Proc+0x15c>)
 80021ea:	f7fe fea4 	bl	8000f36 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[0], 1, 10);
 80021ee:	2301      	movs	r3, #1
 80021f0:	aa03      	add	r2, sp, #12
 80021f2:	eb0d 0105 	add.w	r1, sp, r5
 80021f6:	9500      	str	r5, [sp, #0]
 80021f8:	4845      	ldr	r0, [pc, #276]	; (8002310 <SPI_RECV_Proc+0x15c>)
 80021fa:	f7fe fe9c 	bl	8000f36 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[1], 1, 10);
 80021fe:	2301      	movs	r3, #1
 8002200:	f10d 020d 	add.w	r2, sp, #13
 8002204:	eb0d 0105 	add.w	r1, sp, r5
 8002208:	9500      	str	r5, [sp, #0]
 800220a:	4841      	ldr	r0, [pc, #260]	; (8002310 <SPI_RECV_Proc+0x15c>)
 800220c:	f7fe fe93 	bl	8000f36 <HAL_SPI_TransmitReceive>
  spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 8002210:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002214:	f89d 400c 	ldrb.w	r4, [sp, #12]
  SPI_CS_ON;
 8002218:	2201      	movs	r2, #1
  spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 800221a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  SPI_CS_ON;
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	483a      	ldr	r0, [pc, #232]	; (800230c <SPI_RECV_Proc+0x158>)
 8002222:	f7fe fb65 	bl	80008f0 <HAL_GPIO_WritePin>
  if((spi_rx_len != 0xffff) && (spi_rx_len & 0x01))
 8002226:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800222a:	429c      	cmp	r4, r3
 800222c:	d030      	beq.n	8002290 <SPI_RECV_Proc+0xdc>
 800222e:	07e3      	lsls	r3, r4, #31
 8002230:	d52c      	bpl.n	800228c <SPI_RECV_Proc+0xd8>
    SPI_CS_OFF;
 8002232:	4632      	mov	r2, r6
 8002234:	2140      	movs	r1, #64	; 0x40
 8002236:	4835      	ldr	r0, [pc, #212]	; (800230c <SPI_RECV_Proc+0x158>)
 8002238:	f7fe fb5a 	bl	80008f0 <HAL_GPIO_WritePin>
    temp_CMD = SPI_REG_RX_DAT_LEN;
 800223c:	2302      	movs	r3, #2
 800223e:	f88d 3009 	strb.w	r3, [sp, #9]
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 8002242:	f10d 020b 	add.w	r2, sp, #11
 8002246:	2301      	movs	r3, #1
 8002248:	f10d 0109 	add.w	r1, sp, #9
 800224c:	9500      	str	r5, [sp, #0]
 800224e:	4830      	ldr	r0, [pc, #192]	; (8002310 <SPI_RECV_Proc+0x15c>)
 8002250:	f7fe fe71 	bl	8000f36 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[0], 1, 10);
 8002254:	2301      	movs	r3, #1
 8002256:	aa03      	add	r2, sp, #12
 8002258:	eb0d 0105 	add.w	r1, sp, r5
 800225c:	9500      	str	r5, [sp, #0]
 800225e:	482c      	ldr	r0, [pc, #176]	; (8002310 <SPI_RECV_Proc+0x15c>)
 8002260:	f7fe fe69 	bl	8000f36 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[1], 1, 10);
 8002264:	f10d 020d 	add.w	r2, sp, #13
 8002268:	eb0d 0105 	add.w	r1, sp, r5
 800226c:	9500      	str	r5, [sp, #0]
 800226e:	2301      	movs	r3, #1
 8002270:	4827      	ldr	r0, [pc, #156]	; (8002310 <SPI_RECV_Proc+0x15c>)
 8002272:	f7fe fe60 	bl	8000f36 <HAL_SPI_TransmitReceive>
    spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 8002276:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800227a:	f89d 400c 	ldrb.w	r4, [sp, #12]
    SPI_CS_ON;
 800227e:	2201      	movs	r2, #1
    spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 8002280:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    SPI_CS_ON;
 8002284:	2140      	movs	r1, #64	; 0x40
 8002286:	4821      	ldr	r0, [pc, #132]	; (800230c <SPI_RECV_Proc+0x158>)
 8002288:	f7fe fb32 	bl	80008f0 <HAL_GPIO_WritePin>
  if(spi_rx_len > 0)
 800228c:	2c00      	cmp	r4, #0
 800228e:	d03a      	beq.n	8002306 <SPI_RECV_Proc+0x152>
    SPI_CS_OFF;
 8002290:	2200      	movs	r2, #0
 8002292:	2140      	movs	r1, #64	; 0x40
 8002294:	481d      	ldr	r0, [pc, #116]	; (800230c <SPI_RECV_Proc+0x158>)
    HAL_SPI_TransmitReceive(&hspi1, &dum, SPI_RX_BUFF, spi_rx_len, 10);
 8002296:	4d1f      	ldr	r5, [pc, #124]	; (8002314 <SPI_RECV_Proc+0x160>)
    SPI_CS_OFF;
 8002298:	f7fe fb2a 	bl	80008f0 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 800229c:	260a      	movs	r6, #10
    temp_CMD = SPI_CMD_RX_DATA;
 800229e:	2310      	movs	r3, #16
 80022a0:	f88d 3009 	strb.w	r3, [sp, #9]
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 80022a4:	9600      	str	r6, [sp, #0]
 80022a6:	2301      	movs	r3, #1
 80022a8:	f10d 020b 	add.w	r2, sp, #11
 80022ac:	f10d 0109 	add.w	r1, sp, #9
 80022b0:	4817      	ldr	r0, [pc, #92]	; (8002310 <SPI_RECV_Proc+0x15c>)
 80022b2:	f7fe fe40 	bl	8000f36 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &dum, SPI_RX_BUFF, spi_rx_len, 10);
 80022b6:	eb0d 0106 	add.w	r1, sp, r6
 80022ba:	9600      	str	r6, [sp, #0]
 80022bc:	4623      	mov	r3, r4
 80022be:	462a      	mov	r2, r5
 80022c0:	4813      	ldr	r0, [pc, #76]	; (8002310 <SPI_RECV_Proc+0x15c>)
 80022c2:	f7fe fe38 	bl	8000f36 <HAL_SPI_TransmitReceive>
    SPI_RX_BUFF[spi_rx_len] = 0;
 80022c6:	2300      	movs	r3, #0
    SPI_CS_ON;
 80022c8:	2201      	movs	r2, #1
 80022ca:	2140      	movs	r1, #64	; 0x40
 80022cc:	480f      	ldr	r0, [pc, #60]	; (800230c <SPI_RECV_Proc+0x158>)
    SPI_RX_BUFF[spi_rx_len] = 0;
 80022ce:	552b      	strb	r3, [r5, r4]
    SPI_CS_ON;
 80022d0:	f7fe fb0e 	bl	80008f0 <HAL_GPIO_WritePin>
    if(get_Socket_status() == 0)
 80022d4:	f7ff fa90 	bl	80017f8 <get_Socket_status>
 80022d8:	462e      	mov	r6, r5
 80022da:	b978      	cbnz	r0, 80022fc <SPI_RECV_Proc+0x148>
 80022dc:	4605      	mov	r5, r0
        EnQueue(SPI_RX_BUFF[i]);
 80022de:	5d70      	ldrb	r0, [r6, r5]
 80022e0:	3501      	adds	r5, #1
 80022e2:	f7ff faad 	bl	8001840 <EnQueue>
      for(i=0; i<spi_rx_len; i++)
 80022e6:	b2ab      	uxth	r3, r5
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	d3f8      	bcc.n	80022de <SPI_RECV_Proc+0x12a>
    printf("RX[%d]:[%s]\r\n", spi_rx_len, SPI_RX_BUFF);
 80022ec:	4a09      	ldr	r2, [pc, #36]	; (8002314 <SPI_RECV_Proc+0x160>)
 80022ee:	480a      	ldr	r0, [pc, #40]	; (8002318 <SPI_RECV_Proc+0x164>)
 80022f0:	4621      	mov	r1, r4
 80022f2:	f000 fc5f 	bl	8002bb4 <iprintf>
    return 1;
 80022f6:	2001      	movs	r0, #1
}
 80022f8:	b004      	add	sp, #16
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
      SPI_Input_Data_Proc(spi_rx_len, SPI_RX_BUFF);
 80022fc:	4629      	mov	r1, r5
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff faca 	bl	8001898 <SPI_Input_Data_Proc>
 8002304:	e7f2      	b.n	80022ec <SPI_RECV_Proc+0x138>
  return 0;
 8002306:	4620      	mov	r0, r4
 8002308:	e7f6      	b.n	80022f8 <SPI_RECV_Proc+0x144>
 800230a:	bf00      	nop
 800230c:	40020400 	.word	0x40020400
 8002310:	20001b6c 	.word	0x20001b6c
 8002314:	20001751 	.word	0x20001751
 8002318:	08004748 	.word	0x08004748

0800231c <SPI_RECV_Proc1>:
{
 800231c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t temp_CMD, dum = 0xFF, dum2=0x00,rx_temp[2];
 800231e:	2600      	movs	r6, #0
 8002320:	23ff      	movs	r3, #255	; 0xff
  SPI_CS_OFF;
 8002322:	4632      	mov	r2, r6
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	484e      	ldr	r0, [pc, #312]	; (8002460 <SPI_RECV_Proc1+0x144>)
  uint8_t temp_CMD, dum = 0xFF, dum2=0x00,rx_temp[2];
 8002328:	f88d 300a 	strb.w	r3, [sp, #10]
  HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 800232c:	250a      	movs	r5, #10
  uint8_t temp_CMD, dum = 0xFF, dum2=0x00,rx_temp[2];
 800232e:	f88d 600b 	strb.w	r6, [sp, #11]
  SPI_CS_OFF;
 8002332:	f7fe fadd 	bl	80008f0 <HAL_GPIO_WritePin>
  temp_CMD = SPI_REG_INT_STTS;
 8002336:	2306      	movs	r3, #6
 8002338:	f88d 3009 	strb.w	r3, [sp, #9]
  HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 800233c:	f10d 020b 	add.w	r2, sp, #11
 8002340:	2301      	movs	r3, #1
 8002342:	f10d 0109 	add.w	r1, sp, #9
 8002346:	9500      	str	r5, [sp, #0]
 8002348:	4846      	ldr	r0, [pc, #280]	; (8002464 <SPI_RECV_Proc1+0x148>)
 800234a:	f7fe fdf4 	bl	8000f36 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[0], 1, 10);
 800234e:	2301      	movs	r3, #1
 8002350:	aa03      	add	r2, sp, #12
 8002352:	eb0d 0105 	add.w	r1, sp, r5
 8002356:	9500      	str	r5, [sp, #0]
 8002358:	4842      	ldr	r0, [pc, #264]	; (8002464 <SPI_RECV_Proc1+0x148>)
 800235a:	f7fe fdec 	bl	8000f36 <HAL_SPI_TransmitReceive>
  HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[1], 1, 10);
 800235e:	2301      	movs	r3, #1
 8002360:	f10d 020d 	add.w	r2, sp, #13
 8002364:	eb0d 0105 	add.w	r1, sp, r5
 8002368:	9500      	str	r5, [sp, #0]
 800236a:	483e      	ldr	r0, [pc, #248]	; (8002464 <SPI_RECV_Proc1+0x148>)
 800236c:	f7fe fde3 	bl	8000f36 <HAL_SPI_TransmitReceive>
  spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 8002370:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002374:	f89d 400c 	ldrb.w	r4, [sp, #12]
  SPI_CS_ON;
 8002378:	2201      	movs	r2, #1
  spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 800237a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
  SPI_CS_ON;
 800237e:	2140      	movs	r1, #64	; 0x40
 8002380:	4837      	ldr	r0, [pc, #220]	; (8002460 <SPI_RECV_Proc1+0x144>)
 8002382:	f7fe fab5 	bl	80008f0 <HAL_GPIO_WritePin>
  if((spi_rx_len != 0xffff) && (spi_rx_len & 0x01))
 8002386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238a:	429c      	cmp	r4, r3
 800238c:	d030      	beq.n	80023f0 <SPI_RECV_Proc1+0xd4>
 800238e:	07e3      	lsls	r3, r4, #31
 8002390:	d52c      	bpl.n	80023ec <SPI_RECV_Proc1+0xd0>
    SPI_CS_OFF;
 8002392:	4632      	mov	r2, r6
 8002394:	2140      	movs	r1, #64	; 0x40
 8002396:	4832      	ldr	r0, [pc, #200]	; (8002460 <SPI_RECV_Proc1+0x144>)
 8002398:	f7fe faaa 	bl	80008f0 <HAL_GPIO_WritePin>
    temp_CMD = SPI_REG_RX_DAT_LEN;
 800239c:	2302      	movs	r3, #2
 800239e:	f88d 3009 	strb.w	r3, [sp, #9]
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 80023a2:	f10d 020b 	add.w	r2, sp, #11
 80023a6:	2301      	movs	r3, #1
 80023a8:	f10d 0109 	add.w	r1, sp, #9
 80023ac:	9500      	str	r5, [sp, #0]
 80023ae:	482d      	ldr	r0, [pc, #180]	; (8002464 <SPI_RECV_Proc1+0x148>)
 80023b0:	f7fe fdc1 	bl	8000f36 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[0], 1, 10);
 80023b4:	2301      	movs	r3, #1
 80023b6:	aa03      	add	r2, sp, #12
 80023b8:	eb0d 0105 	add.w	r1, sp, r5
 80023bc:	9500      	str	r5, [sp, #0]
 80023be:	4829      	ldr	r0, [pc, #164]	; (8002464 <SPI_RECV_Proc1+0x148>)
 80023c0:	f7fe fdb9 	bl	8000f36 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &dum, &rx_temp[1], 1, 10);
 80023c4:	f10d 020d 	add.w	r2, sp, #13
 80023c8:	eb0d 0105 	add.w	r1, sp, r5
 80023cc:	9500      	str	r5, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	4824      	ldr	r0, [pc, #144]	; (8002464 <SPI_RECV_Proc1+0x148>)
 80023d2:	f7fe fdb0 	bl	8000f36 <HAL_SPI_TransmitReceive>
    spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 80023d6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80023da:	f89d 400c 	ldrb.w	r4, [sp, #12]
    SPI_CS_ON;
 80023de:	2201      	movs	r2, #1
    spi_rx_len = rx_temp[0] | (rx_temp[1] << 8);
 80023e0:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
    SPI_CS_ON;
 80023e4:	2140      	movs	r1, #64	; 0x40
 80023e6:	481e      	ldr	r0, [pc, #120]	; (8002460 <SPI_RECV_Proc1+0x144>)
 80023e8:	f7fe fa82 	bl	80008f0 <HAL_GPIO_WritePin>
  if(spi_rx_len > 0)
 80023ec:	2c00      	cmp	r4, #0
 80023ee:	d035      	beq.n	800245c <SPI_RECV_Proc1+0x140>
    SPI_CS_OFF;
 80023f0:	2200      	movs	r2, #0
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	481a      	ldr	r0, [pc, #104]	; (8002460 <SPI_RECV_Proc1+0x144>)
    HAL_SPI_TransmitReceive(&hspi1, &dum, SPI_RX_BUFF, spi_rx_len, 10);
 80023f6:	4e1c      	ldr	r6, [pc, #112]	; (8002468 <SPI_RECV_Proc1+0x14c>)
    SPI_CS_OFF;
 80023f8:	f7fe fa7a 	bl	80008f0 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 80023fc:	250a      	movs	r5, #10
    temp_CMD = SPI_CMD_RX_DATA;
 80023fe:	2310      	movs	r3, #16
 8002400:	f88d 3009 	strb.w	r3, [sp, #9]
    HAL_SPI_TransmitReceive(&hspi1, &temp_CMD, &dum2, 1, 10);
 8002404:	9500      	str	r5, [sp, #0]
 8002406:	2301      	movs	r3, #1
 8002408:	f10d 020b 	add.w	r2, sp, #11
 800240c:	f10d 0109 	add.w	r1, sp, #9
 8002410:	4814      	ldr	r0, [pc, #80]	; (8002464 <SPI_RECV_Proc1+0x148>)
 8002412:	f7fe fd90 	bl	8000f36 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&hspi1, &dum, SPI_RX_BUFF, spi_rx_len, 10);
 8002416:	9500      	str	r5, [sp, #0]
 8002418:	4623      	mov	r3, r4
 800241a:	eb0d 0105 	add.w	r1, sp, r5
 800241e:	4632      	mov	r2, r6
 8002420:	4810      	ldr	r0, [pc, #64]	; (8002464 <SPI_RECV_Proc1+0x148>)
 8002422:	f7fe fd88 	bl	8000f36 <HAL_SPI_TransmitReceive>
    SPI_RX_BUFF[spi_rx_len+1] = 0;
 8002426:	1933      	adds	r3, r6, r4
 8002428:	2500      	movs	r5, #0
 800242a:	705d      	strb	r5, [r3, #1]
      EnQueue(SPI_RX_BUFF[i]);
 800242c:	5d70      	ldrb	r0, [r6, r5]
 800242e:	3501      	adds	r5, #1
 8002430:	f7ff fa06 	bl	8001840 <EnQueue>
    for(i=0; i<spi_rx_len; i++)
 8002434:	b2ab      	uxth	r3, r5
 8002436:	42a3      	cmp	r3, r4
 8002438:	d3f8      	bcc.n	800242c <SPI_RECV_Proc1+0x110>
    SPI_CS_ON;
 800243a:	2201      	movs	r2, #1
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	4808      	ldr	r0, [pc, #32]	; (8002460 <SPI_RECV_Proc1+0x144>)
 8002440:	f7fe fa56 	bl	80008f0 <HAL_GPIO_WritePin>
    printf("RX data[%d]:%s \r\n", spi_rx_len, SPI_RX_BUFF);
 8002444:	4a08      	ldr	r2, [pc, #32]	; (8002468 <SPI_RECV_Proc1+0x14c>)
 8002446:	4809      	ldr	r0, [pc, #36]	; (800246c <SPI_RECV_Proc1+0x150>)
 8002448:	4621      	mov	r1, r4
 800244a:	f000 fbb3 	bl	8002bb4 <iprintf>
    AT_SEND_Proc1(SPI_RX_BUFF, spi_rx_len);
 800244e:	4621      	mov	r1, r4
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <SPI_RECV_Proc1+0x14c>)
 8002452:	f7ff fdb5 	bl	8001fc0 <AT_SEND_Proc1>
    return 1;
 8002456:	2001      	movs	r0, #1
}
 8002458:	b004      	add	sp, #16
 800245a:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 800245c:	4620      	mov	r0, r4
 800245e:	e7fb      	b.n	8002458 <SPI_RECV_Proc1+0x13c>
 8002460:	40020400 	.word	0x40020400
 8002464:	20001b6c 	.word	0x20001b6c
 8002468:	20001751 	.word	0x20001751
 800246c:	08004756 	.word	0x08004756

08002470 <check_US_cmd>:
{
 8002470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002474:	4c2a      	ldr	r4, [pc, #168]	; (8002520 <check_US_cmd+0xb0>)
  for(cnt=0; cnt<RX_Index; cnt++)
 8002476:	4f2b      	ldr	r7, [pc, #172]	; (8002524 <check_US_cmd+0xb4>)
      if(strncmp(RX_BUFFER + cnt, "CONNECT", 6) == 0)
 8002478:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002544 <check_US_cmd+0xd4>
      else if(strncmp(RX_BUFFER + cnt, "TRANS CONNECT", 12) == 0)
 800247c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8002548 <check_US_cmd+0xd8>
{
 8002480:	4605      	mov	r5, r0
  for(cnt=0; cnt<RX_Index; cnt++)
 8002482:	2600      	movs	r6, #0
 8002484:	883b      	ldrh	r3, [r7, #0]
 8002486:	429e      	cmp	r6, r3
 8002488:	da3c      	bge.n	8002504 <check_US_cmd+0x94>
    if(isalpha(RX_BUFFER[cnt]))
 800248a:	f000 fb5f 	bl	8002b4c <__locale_ctype_ptr>
 800248e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002492:	4418      	add	r0, r3
 8002494:	7843      	ldrb	r3, [r0, #1]
 8002496:	079b      	lsls	r3, r3, #30
 8002498:	d014      	beq.n	80024c4 <check_US_cmd+0x54>
      if(strncmp(RX_BUFFER + cnt, "CONNECT", 6) == 0)
 800249a:	2206      	movs	r2, #6
 800249c:	4641      	mov	r1, r8
 800249e:	4620      	mov	r0, r4
 80024a0:	f000 fc28 	bl	8002cf4 <strncmp>
 80024a4:	b388      	cbz	r0, 800250a <check_US_cmd+0x9a>
      else if(strncmp(RX_BUFFER + cnt, "TRANS CONNECT", 12) == 0)
 80024a6:	220c      	movs	r2, #12
 80024a8:	4649      	mov	r1, r9
 80024aa:	4620      	mov	r0, r4
 80024ac:	f000 fc22 	bl	8002cf4 <strncmp>
 80024b0:	b368      	cbz	r0, 800250e <check_US_cmd+0x9e>
      else if(strncmp(RX_BUFFER + cnt, "TRANS LOOFBACK", 12) == 0)
 80024b2:	220c      	movs	r2, #12
 80024b4:	491c      	ldr	r1, [pc, #112]	; (8002528 <check_US_cmd+0xb8>)
 80024b6:	4620      	mov	r0, r4
 80024b8:	f000 fc1c 	bl	8002cf4 <strncmp>
 80024bc:	b920      	cbnz	r0, 80024c8 <check_US_cmd+0x58>
        printf("not supported!!\r\n");
 80024be:	481b      	ldr	r0, [pc, #108]	; (800252c <check_US_cmd+0xbc>)
 80024c0:	f000 fbec 	bl	8002c9c <puts>
  for(cnt=0; cnt<RX_Index; cnt++)
 80024c4:	3601      	adds	r6, #1
 80024c6:	e7dd      	b.n	8002484 <check_US_cmd+0x14>
      else if(strncmp(RX_BUFFER + cnt, "SEND TRANS DATA", 15) == 0)
 80024c8:	220f      	movs	r2, #15
 80024ca:	4919      	ldr	r1, [pc, #100]	; (8002530 <check_US_cmd+0xc0>)
 80024cc:	4620      	mov	r0, r4
 80024ce:	f000 fc11 	bl	8002cf4 <strncmp>
 80024d2:	b1f0      	cbz	r0, 8002512 <check_US_cmd+0xa2>
      else if(strncmp(RX_BUFFER + cnt, "SEND DATA", 9) == 0)
 80024d4:	2209      	movs	r2, #9
 80024d6:	4917      	ldr	r1, [pc, #92]	; (8002534 <check_US_cmd+0xc4>)
 80024d8:	4620      	mov	r0, r4
 80024da:	f000 fc0b 	bl	8002cf4 <strncmp>
 80024de:	b1d0      	cbz	r0, 8002516 <check_US_cmd+0xa6>
      else if(strncmp(RX_BUFFER + cnt, "Server open", 11) == 0)
 80024e0:	220b      	movs	r2, #11
 80024e2:	4915      	ldr	r1, [pc, #84]	; (8002538 <check_US_cmd+0xc8>)
 80024e4:	4620      	mov	r0, r4
 80024e6:	f000 fc05 	bl	8002cf4 <strncmp>
 80024ea:	b1b0      	cbz	r0, 800251a <check_US_cmd+0xaa>
      else if(strncmp(RX_BUFFER + cnt, "exit", 4) == 0)
 80024ec:	2204      	movs	r2, #4
 80024ee:	4913      	ldr	r1, [pc, #76]	; (800253c <check_US_cmd+0xcc>)
 80024f0:	4620      	mov	r0, r4
 80024f2:	f000 fbff 	bl	8002cf4 <strncmp>
 80024f6:	4682      	mov	sl, r0
 80024f8:	2800      	cmp	r0, #0
 80024fa:	d1e3      	bne.n	80024c4 <check_US_cmd+0x54>
        printf("exit\r\n");
 80024fc:	4810      	ldr	r0, [pc, #64]	; (8002540 <check_US_cmd+0xd0>)
 80024fe:	f000 fbcd 	bl	8002c9c <puts>
        return 0;
 8002502:	4655      	mov	r5, sl
}
 8002504:	4628      	mov	r0, r5
 8002506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return 1;
 800250a:	2501      	movs	r5, #1
 800250c:	e7fa      	b.n	8002504 <check_US_cmd+0x94>
        return 2;
 800250e:	2502      	movs	r5, #2
 8002510:	e7f8      	b.n	8002504 <check_US_cmd+0x94>
        return 4;
 8002512:	2504      	movs	r5, #4
 8002514:	e7f6      	b.n	8002504 <check_US_cmd+0x94>
        return 3;
 8002516:	2503      	movs	r5, #3
 8002518:	e7f4      	b.n	8002504 <check_US_cmd+0x94>
        return 6;
 800251a:	2506      	movs	r5, #6
 800251c:	e7f2      	b.n	8002504 <check_US_cmd+0x94>
 800251e:	bf00      	nop
 8002520:	20001138 	.word	0x20001138
 8002524:	2000042a 	.word	0x2000042a
 8002528:	08004776 	.word	0x08004776
 800252c:	08004785 	.word	0x08004785
 8002530:	08004796 	.word	0x08004796
 8002534:	080047a6 	.word	0x080047a6
 8002538:	080047b0 	.word	0x080047b0
 800253c:	080047bc 	.word	0x080047bc
 8002540:	080047c1 	.word	0x080047c1
 8002544:	0800476e 	.word	0x0800476e
 8002548:	08004768 	.word	0x08004768

0800254c <main_proc>:
{
 800254c:	b530      	push	{r4, r5, lr}
 800254e:	4605      	mov	r5, r0
 8002550:	f2ad 7ddc 	subw	sp, sp, #2012	; 0x7dc
  uint8_t
 8002554:	f240 72d1 	movw	r2, #2001	; 0x7d1
 8002558:	4936      	ldr	r1, [pc, #216]	; (8002634 <main_proc+0xe8>)
 800255a:	a801      	add	r0, sp, #4
 800255c:	f000 fb16 	bl	8002b8c <memcpy>
  switch(*main_seq)
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	3b01      	subs	r3, #1
 8002564:	2b05      	cmp	r3, #5
 8002566:	d810      	bhi.n	800258a <main_proc+0x3e>
 8002568:	e8df f003 	tbb	[pc, r3]
 800256c:	40151203 	.word	0x40151203
 8002570:	5b0f      	.short	0x5b0f
      if(AT_Connect_Proc() == 1)
 8002572:	f7ff fb41 	bl	8001bf8 <AT_Connect_Proc>
 8002576:	2801      	cmp	r0, #1
 8002578:	d104      	bne.n	8002584 <main_proc+0x38>
        printf("Connect Success !!\r\n");
 800257a:	482f      	ldr	r0, [pc, #188]	; (8002638 <main_proc+0xec>)
 800257c:	f000 fb8e 	bl	8002c9c <puts>
        *main_seq = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	602b      	str	r3, [r5, #0]
      cnt = 0;
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <main_proc+0xf0>)
 8002586:	2200      	movs	r2, #0
 8002588:	801a      	strh	r2, [r3, #0]
}
 800258a:	f20d 7ddc 	addw	sp, sp, #2012	; 0x7dc
 800258e:	bd30      	pop	{r4, r5, pc}
      if(AT_trans_Proc() == 1)
 8002590:	f7ff fb90 	bl	8001cb4 <AT_trans_Proc>
 8002594:	e7ef      	b.n	8002576 <main_proc+0x2a>
      if(cnt<1048)
 8002596:	4c29      	ldr	r4, [pc, #164]	; (800263c <main_proc+0xf0>)
 8002598:	8823      	ldrh	r3, [r4, #0]
 800259a:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 800259e:	d213      	bcs.n	80025c8 <main_proc+0x7c>
        res = AT_SEND_Proc(TEST_DATA, 1000);
 80025a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80025a4:	a801      	add	r0, sp, #4
 80025a6:	f7ff fc8b 	bl	8001ec0 <AT_SEND_Proc>
        if(res< 0)
 80025aa:	2800      	cmp	r0, #0
 80025ac:	da06      	bge.n	80025bc <main_proc+0x70>
          printf("SPI SEND Fail[%d]\r\n", cnt);
 80025ae:	8821      	ldrh	r1, [r4, #0]
 80025b0:	4823      	ldr	r0, [pc, #140]	; (8002640 <main_proc+0xf4>)
 80025b2:	f000 faff 	bl	8002bb4 <iprintf>
          cnt--;
 80025b6:	8823      	ldrh	r3, [r4, #0]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	e003      	b.n	80025c4 <main_proc+0x78>
        else if(res == 1)
 80025bc:	2801      	cmp	r0, #1
 80025be:	d1e4      	bne.n	800258a <main_proc+0x3e>
        cnt++;
 80025c0:	8823      	ldrh	r3, [r4, #0]
 80025c2:	3301      	adds	r3, #1
 80025c4:	8023      	strh	r3, [r4, #0]
 80025c6:	e7e0      	b.n	800258a <main_proc+0x3e>
        res = AT_SEND_Proc(TEST_DATA, 75);
 80025c8:	214b      	movs	r1, #75	; 0x4b
 80025ca:	a801      	add	r0, sp, #4
 80025cc:	f7ff fc78 	bl	8001ec0 <AT_SEND_Proc>
        if(res < 0)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	dbec      	blt.n	80025ae <main_proc+0x62>
        else if(res == 1)
 80025d4:	2801      	cmp	r0, #1
 80025d6:	d1d8      	bne.n	800258a <main_proc+0x3e>
        printf("SPI SEND COMPLETE[%d]\r\n", cnt);
 80025d8:	8821      	ldrh	r1, [r4, #0]
 80025da:	481a      	ldr	r0, [pc, #104]	; (8002644 <main_proc+0xf8>)
 80025dc:	f000 faea 	bl	8002bb4 <iprintf>
        cnt++;
 80025e0:	8823      	ldrh	r3, [r4, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	8023      	strh	r3, [r4, #0]
      *main_seq = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	602b      	str	r3, [r5, #0]
}
 80025ea:	e7ce      	b.n	800258a <main_proc+0x3e>
    if(cnt<2097)
 80025ec:	4c13      	ldr	r4, [pc, #76]	; (800263c <main_proc+0xf0>)
 80025ee:	8823      	ldrh	r3, [r4, #0]
 80025f0:	f5b3 6f03 	cmp.w	r3, #2096	; 0x830
 80025f4:	d806      	bhi.n	8002604 <main_proc+0xb8>
      send_U_message(1, TEST_DATA, 500);
 80025f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025fa:	a901      	add	r1, sp, #4
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7ff fd51 	bl	80020a4 <send_U_message>
 8002602:	e7dd      	b.n	80025c0 <main_proc+0x74>
      send_U_message(1, TEST_DATA, 75);      
 8002604:	224b      	movs	r2, #75	; 0x4b
 8002606:	a901      	add	r1, sp, #4
 8002608:	2001      	movs	r0, #1
 800260a:	f7ff fd4b 	bl	80020a4 <send_U_message>
      cnt++;
 800260e:	8821      	ldrh	r1, [r4, #0]
		  printf("SPI SEND OK[%d]\r\n", cnt);
 8002610:	480d      	ldr	r0, [pc, #52]	; (8002648 <main_proc+0xfc>)
      cnt++;
 8002612:	3101      	adds	r1, #1
 8002614:	b289      	uxth	r1, r1
 8002616:	8021      	strh	r1, [r4, #0]
		  printf("SPI SEND OK[%d]\r\n", cnt);
 8002618:	f000 facc 	bl	8002bb4 <iprintf>
		  *main_seq =0;
 800261c:	2300      	movs	r3, #0
 800261e:	602b      	str	r3, [r5, #0]
 8002620:	e7d0      	b.n	80025c4 <main_proc+0x78>
    if(AT_Server_Open_Proc())
 8002622:	f7ff fbcb 	bl	8001dbc <AT_Server_Open_Proc>
 8002626:	2800      	cmp	r0, #0
 8002628:	d0af      	beq.n	800258a <main_proc+0x3e>
      printf("Connect and Server Open Success !!\r\n");
 800262a:	4808      	ldr	r0, [pc, #32]	; (800264c <main_proc+0x100>)
 800262c:	f000 fb36 	bl	8002c9c <puts>
 8002630:	e7d9      	b.n	80025e6 <main_proc+0x9a>
 8002632:	bf00      	nop
 8002634:	08003e40 	.word	0x08003e40
 8002638:	080047e4 	.word	0x080047e4
 800263c:	2000042e 	.word	0x2000042e
 8002640:	080047f8 	.word	0x080047f8
 8002644:	0800480c 	.word	0x0800480c
 8002648:	08004824 	.word	0x08004824
 800264c:	08004836 	.word	0x08004836

08002650 <SystemClock_Config>:
{
 8002650:	b530      	push	{r4, r5, lr}
 8002652:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002654:	2230      	movs	r2, #48	; 0x30
 8002656:	2100      	movs	r1, #0
 8002658:	a808      	add	r0, sp, #32
 800265a:	f000 faa2 	bl	8002ba2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800265e:	2100      	movs	r1, #0
 8002660:	2214      	movs	r2, #20
 8002662:	a803      	add	r0, sp, #12
 8002664:	f000 fa9d 	bl	8002ba2 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	2400      	movs	r4, #0
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <SystemClock_Config+0x8c>)
 800266c:	9401      	str	r4, [sp, #4]
 800266e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002670:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
 8002676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002678:	4a19      	ldr	r2, [pc, #100]	; (80026e0 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002682:	9402      	str	r4, [sp, #8]
 8002684:	6813      	ldr	r3, [r2, #0]
 8002686:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800268a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002692:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800269c:	2301      	movs	r3, #1
 800269e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026a0:	2310      	movs	r3, #16
 80026a2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 80026a4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80026a6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80026aa:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80026ac:	2304      	movs	r3, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026ae:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80026b0:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026b4:	2307      	movs	r3, #7
 80026b6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026b8:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026ba:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026bc:	f7fe f92a 	bl	8000914 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c0:	230f      	movs	r3, #15
 80026c2:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026c4:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026ca:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026cc:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ce:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026d0:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d2:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d4:	f7fe face 	bl	8000c74 <HAL_RCC_ClockConfig>
}
 80026d8:	b015      	add	sp, #84	; 0x54
 80026da:	bd30      	pop	{r4, r5, pc}
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40007000 	.word	0x40007000

080026e4 <main>:
{
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	b08b      	sub	sp, #44	; 0x2c
  int main_seq = 0;
 80026e8:	2400      	movs	r4, #0
 80026ea:	9400      	str	r4, [sp, #0]
  HAL_Init();
 80026ec:	f7fd ff7c 	bl	80005e8 <HAL_Init>
  SystemClock_Config();
 80026f0:	f7ff ffae 	bl	8002650 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	2214      	movs	r2, #20
 80026f6:	4621      	mov	r1, r4
 80026f8:	eb0d 0002 	add.w	r0, sp, r2
 80026fc:	f000 fa51 	bl	8002ba2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002700:	4b4f      	ldr	r3, [pc, #316]	; (8002840 <main+0x15c>)
 8002702:	9401      	str	r4, [sp, #4]
 8002704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002706:	484f      	ldr	r0, [pc, #316]	; (8002844 <main+0x160>)
  huart2.Instance = USART2;
 8002708:	4d4f      	ldr	r5, [pc, #316]	; (8002848 <main+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270a:	f042 0204 	orr.w	r2, r2, #4
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
 8002710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002712:	f002 0204 	and.w	r2, r2, #4
 8002716:	9201      	str	r2, [sp, #4]
 8002718:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800271a:	9402      	str	r4, [sp, #8]
 800271c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800271e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
 8002724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002726:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800272a:	9202      	str	r2, [sp, #8]
 800272c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	9403      	str	r4, [sp, #12]
 8002730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002732:	f042 0201 	orr.w	r2, r2, #1
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
 8002738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800273a:	f002 0201 	and.w	r2, r2, #1
 800273e:	9203      	str	r2, [sp, #12]
 8002740:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	9404      	str	r4, [sp, #16]
 8002744:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002746:	f042 0202 	orr.w	r2, r2, #2
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002752:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002754:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002756:	2140      	movs	r1, #64	; 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800275a:	f7fe f8c9 	bl	80008f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800275e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002762:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002764:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <main+0x168>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002768:	4839      	ldr	r0, [pc, #228]	; (8002850 <main+0x16c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800276a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800276e:	f7fd ffe3 	bl	8000738 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002776:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <main+0x170>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	4836      	ldr	r0, [pc, #216]	; (8002858 <main+0x174>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800277e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	9407      	str	r4, [sp, #28]

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002782:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002784:	f7fd ffd8 	bl	8000738 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002788:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	a905      	add	r1, sp, #20
 800278c:	482d      	ldr	r0, [pc, #180]	; (8002844 <main+0x160>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800278e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002796:	f7fd ffcf 	bl	8000738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800279a:	4621      	mov	r1, r4
 800279c:	4622      	mov	r2, r4
 800279e:	2017      	movs	r0, #23
 80027a0:	f7fd ff60 	bl	8000664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80027a4:	2017      	movs	r0, #23
 80027a6:	f7fd ff91 	bl	80006cc <HAL_NVIC_EnableIRQ>
  MX_SPI1_Init();
 80027aa:	f7ff fc25 	bl	8001ff8 <MX_SPI1_Init>
  huart2.Init.BaudRate = 115200;
 80027ae:	4a2b      	ldr	r2, [pc, #172]	; (800285c <main+0x178>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027b0:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 115200;
 80027b2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80027b6:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027ba:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027bc:	230c      	movs	r3, #12
 80027be:	616b      	str	r3, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027c0:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027c2:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027c4:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c6:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027c8:	f7fe fe7c 	bl	80014c4 <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80027cc:	4632      	mov	r2, r6
 80027ce:	4924      	ldr	r1, [pc, #144]	; (8002860 <main+0x17c>)
    if(RX_Flag)
 80027d0:	4c24      	ldr	r4, [pc, #144]	; (8002864 <main+0x180>)
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80027d2:	4628      	mov	r0, r5
 80027d4:	f7fe ff01 	bl	80015da <HAL_UART_Receive_IT>
  printf("Hello !!\r\n");
 80027d8:	4823      	ldr	r0, [pc, #140]	; (8002868 <main+0x184>)
    if(Spi_rx_flag||(SPI_INT_STTS == 0))
 80027da:	4d24      	ldr	r5, [pc, #144]	; (800286c <main+0x188>)
  printf("Hello !!\r\n");
 80027dc:	f000 fa5e 	bl	8002c9c <puts>
  printf("WizFi360 Ready !!\r\n");
 80027e0:	4823      	ldr	r0, [pc, #140]	; (8002870 <main+0x18c>)
 80027e2:	f000 fa5b 	bl	8002c9c <puts>
 80027e6:	462f      	mov	r7, r5
    if(RX_Flag)
 80027e8:	7823      	ldrb	r3, [r4, #0]
 80027ea:	b13b      	cbz	r3, 80027fc <main+0x118>
    	main_seq = check_US_cmd(main_seq);
 80027ec:	9800      	ldr	r0, [sp, #0]
 80027ee:	f7ff fe3f 	bl	8002470 <check_US_cmd>
    	RX_Index = 0;
 80027f2:	4a20      	ldr	r2, [pc, #128]	; (8002874 <main+0x190>)
    	main_seq = check_US_cmd(main_seq);
 80027f4:	9000      	str	r0, [sp, #0]
    	RX_Index = 0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	8013      	strh	r3, [r2, #0]
    	RX_Flag  = 0;
 80027fa:	7023      	strb	r3, [r4, #0]
    if(Spi_rx_flag||(SPI_INT_STTS == 0))
 80027fc:	782b      	ldrb	r3, [r5, #0]
 80027fe:	b13b      	cbz	r3, 8002810 <main+0x12c>
      if(main_seq == 5)
 8002800:	9b00      	ldr	r3, [sp, #0]
 8002802:	2b05      	cmp	r3, #5
 8002804:	d118      	bne.n	8002838 <main+0x154>
        SPI_RECV_Proc1();
 8002806:	f7ff fd89 	bl	800231c <SPI_RECV_Proc1>
      Spi_rx_flag = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	703b      	strb	r3, [r7, #0]
 800280e:	e006      	b.n	800281e <main+0x13a>
    if(Spi_rx_flag||(SPI_INT_STTS == 0))
 8002810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002814:	4810      	ldr	r0, [pc, #64]	; (8002858 <main+0x174>)
 8002816:	f7fe f865 	bl	80008e4 <HAL_GPIO_ReadPin>
 800281a:	2800      	cmp	r0, #0
 800281c:	d0f0      	beq.n	8002800 <main+0x11c>
    main_proc(&main_seq);
 800281e:	4668      	mov	r0, sp
 8002820:	f7ff fe94 	bl	800254c <main_proc>
    if(temp_set_seq)
 8002824:	2e00      	cmp	r6, #0
 8002826:	d0df      	beq.n	80027e8 <main+0x104>
    	if(Queue_Empty()>0)
 8002828:	f7fe fffe 	bl	8001828 <Queue_Empty>
 800282c:	2800      	cmp	r0, #0
 800282e:	d0db      	beq.n	80027e8 <main+0x104>
		  main_seq = 6;
 8002830:	2306      	movs	r3, #6
 8002832:	9300      	str	r3, [sp, #0]
    		temp_set_seq = 0;
 8002834:	2600      	movs	r6, #0
 8002836:	e7d7      	b.n	80027e8 <main+0x104>
      SPI_RECV_Proc();
 8002838:	f7ff fcbc 	bl	80021b4 <SPI_RECV_Proc>
 800283c:	e7e5      	b.n	800280a <main+0x126>
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800
 8002844:	40020400 	.word	0x40020400
 8002848:	20001bc4 	.word	0x20001bc4
 800284c:	10210000 	.word	0x10210000
 8002850:	40020800 	.word	0x40020800
 8002854:	10110000 	.word	0x10110000
 8002858:	40020000 	.word	0x40020000
 800285c:	40004400 	.word	0x40004400
 8002860:	20001138 	.word	0x20001138
 8002864:	20000428 	.word	0x20000428
 8002868:	080047c7 	.word	0x080047c7
 800286c:	2000042c 	.word	0x2000042c
 8002870:	080047d1 	.word	0x080047d1
 8002874:	2000042a 	.word	0x2000042a

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_MspInit+0x48>)
 800287c:	2400      	movs	r4, #0
 800287e:	9400      	str	r4, [sp, #0]
 8002880:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002886:	645a      	str	r2, [r3, #68]	; 0x44
 8002888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800288a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800288e:	9200      	str	r2, [sp, #0]
 8002890:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	9401      	str	r4, [sp, #4]
 8002894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002896:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800289a:	641a      	str	r2, [r3, #64]	; 0x40
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028a4:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028a8:	f7fd feca 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80028ac:	4622      	mov	r2, r4
 80028ae:	4621      	mov	r1, r4
 80028b0:	2005      	movs	r0, #5
 80028b2:	f7fd fed7 	bl	8000664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80028b6:	2005      	movs	r0, #5
 80028b8:	f7fd ff08 	bl	80006cc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028bc:	b002      	add	sp, #8
 80028be:	bd10      	pop	{r4, pc}
 80028c0:	40023800 	.word	0x40023800

080028c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028c4:	b510      	push	{r4, lr}
 80028c6:	4604      	mov	r4, r0
 80028c8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ca:	2214      	movs	r2, #20
 80028cc:	2100      	movs	r1, #0
 80028ce:	a803      	add	r0, sp, #12
 80028d0:	f000 f967 	bl	8002ba2 <memset>
  if(hspi->Instance==SPI1)
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	4b18      	ldr	r3, [pc, #96]	; (8002938 <HAL_SPI_MspInit+0x74>)
 80028d8:	429a      	cmp	r2, r3
 80028da:	d12a      	bne.n	8002932 <HAL_SPI_MspInit+0x6e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028dc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80028e0:	2400      	movs	r4, #0
 80028e2:	9401      	str	r4, [sp, #4]
 80028e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028e6:	4815      	ldr	r0, [pc, #84]	; (800293c <HAL_SPI_MspInit+0x78>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028ec:	645a      	str	r2, [r3, #68]	; 0x44
 80028ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028f4:	9201      	str	r2, [sp, #4]
 80028f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f8:	9402      	str	r4, [sp, #8]
 80028fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	631a      	str	r2, [r3, #48]	; 0x30
 8002902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	9302      	str	r3, [sp, #8]
 800290a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800290c:	23f0      	movs	r3, #240	; 0xf0
 800290e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800291a:	2305      	movs	r3, #5
 800291c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291e:	f7fd ff0b 	bl	8000738 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002922:	2023      	movs	r0, #35	; 0x23
 8002924:	4622      	mov	r2, r4
 8002926:	4621      	mov	r1, r4
 8002928:	f7fd fe9c 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800292c:	2023      	movs	r0, #35	; 0x23
 800292e:	f7fd fecd 	bl	80006cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002932:	b008      	add	sp, #32
 8002934:	bd10      	pop	{r4, pc}
 8002936:	bf00      	nop
 8002938:	40013000 	.word	0x40013000
 800293c:	40020000 	.word	0x40020000

08002940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002940:	b510      	push	{r4, lr}
 8002942:	4604      	mov	r4, r0
 8002944:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002946:	2214      	movs	r2, #20
 8002948:	2100      	movs	r1, #0
 800294a:	a803      	add	r0, sp, #12
 800294c:	f000 f929 	bl	8002ba2 <memset>
  if(huart->Instance==USART2)
 8002950:	6822      	ldr	r2, [r4, #0]
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <HAL_UART_MspInit+0x70>)
 8002954:	429a      	cmp	r2, r3
 8002956:	d128      	bne.n	80029aa <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002958:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800295c:	2400      	movs	r4, #0
 800295e:	9401      	str	r4, [sp, #4]
 8002960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002962:	4814      	ldr	r0, [pc, #80]	; (80029b4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002964:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
 800296a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800296c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002970:	9201      	str	r2, [sp, #4]
 8002972:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	9402      	str	r4, [sp, #8]
 8002976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002978:	f042 0201 	orr.w	r2, r2, #1
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	9302      	str	r3, [sp, #8]
 8002986:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002988:	230c      	movs	r3, #12
 800298a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298c:	2302      	movs	r3, #2
 800298e:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002992:	2307      	movs	r3, #7
 8002994:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f7fd fecf 	bl	8000738 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800299a:	2026      	movs	r0, #38	; 0x26
 800299c:	4622      	mov	r2, r4
 800299e:	4621      	mov	r1, r4
 80029a0:	f7fd fe60 	bl	8000664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029a4:	2026      	movs	r0, #38	; 0x26
 80029a6:	f7fd fe91 	bl	80006cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029aa:	b008      	add	sp, #32
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	bf00      	nop
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40020000 	.word	0x40020000

080029b8 <NMI_Handler>:
 80029b8:	4770      	bx	lr

080029ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ba:	e7fe      	b.n	80029ba <HardFault_Handler>

080029bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029bc:	e7fe      	b.n	80029bc <MemManage_Handler>

080029be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029be:	e7fe      	b.n	80029be <BusFault_Handler>

080029c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c0:	e7fe      	b.n	80029c0 <UsageFault_Handler>

080029c2 <SVC_Handler>:
 80029c2:	4770      	bx	lr

080029c4 <DebugMon_Handler>:
 80029c4:	4770      	bx	lr

080029c6 <PendSV_Handler>:
 80029c6:	4770      	bx	lr

080029c8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c8:	f7fd be28 	b.w	800061c <HAL_IncTick>

080029cc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80029cc:	4770      	bx	lr

080029ce <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80029ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029d2:	f7fd bf93 	b.w	80008fc <HAL_GPIO_EXTI_IRQHandler>
	...

080029d8 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80029d8:	4801      	ldr	r0, [pc, #4]	; (80029e0 <SPI1_IRQHandler+0x8>)
 80029da:	f7fe bb9d 	b.w	8001118 <HAL_SPI_IRQHandler>
 80029de:	bf00      	nop
 80029e0:	20001b6c 	.word	0x20001b6c

080029e4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80029e4:	4801      	ldr	r0, [pc, #4]	; (80029ec <USART2_IRQHandler+0x8>)
 80029e6:	f7fe be5f 	b.w	80016a8 <HAL_UART_IRQHandler>
 80029ea:	bf00      	nop
 80029ec:	20001bc4 	.word	0x20001bc4

080029f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	460e      	mov	r6, r1
 80029f4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f6:	460c      	mov	r4, r1
 80029f8:	1ba3      	subs	r3, r4, r6
 80029fa:	429d      	cmp	r5, r3
 80029fc:	dc01      	bgt.n	8002a02 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80029fe:	4628      	mov	r0, r5
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002a02:	f3af 8000 	nop.w
 8002a06:	f804 0b01 	strb.w	r0, [r4], #1
 8002a0a:	e7f5      	b.n	80029f8 <_read+0x8>

08002a0c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002a0c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <_sbrk+0x2c>)
 8002a10:	6819      	ldr	r1, [r3, #0]
{
 8002a12:	4602      	mov	r2, r0
	if (heap_end == 0)
 8002a14:	b909      	cbnz	r1, 8002a1a <_sbrk+0xe>
		heap_end = &end;
 8002a16:	4909      	ldr	r1, [pc, #36]	; (8002a3c <_sbrk+0x30>)
 8002a18:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8002a1a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8002a1c:	4669      	mov	r1, sp
 8002a1e:	4402      	add	r2, r0
 8002a20:	428a      	cmp	r2, r1
 8002a22:	d906      	bls.n	8002a32 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002a24:	f000 f868 	bl	8002af8 <__errno>
 8002a28:	230c      	movs	r3, #12
 8002a2a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8002a32:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8002a34:	bd08      	pop	{r3, pc}
 8002a36:	bf00      	nop
 8002a38:	20000430 	.word	0x20000430
 8002a3c:	20001c08 	.word	0x20001c08

08002a40 <_close>:

int _close(int file)
{
	return -1;
}
 8002a40:	f04f 30ff 	mov.w	r0, #4294967295
 8002a44:	4770      	bx	lr

08002a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a4a:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	4770      	bx	lr

08002a50 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002a50:	2001      	movs	r0, #1
 8002a52:	4770      	bx	lr

08002a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002a54:	2000      	movs	r0, #0
 8002a56:	4770      	bx	lr

08002a58 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a58:	490f      	ldr	r1, [pc, #60]	; (8002a98 <SystemInit+0x40>)
 8002a5a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002a5e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002a66:	4b0d      	ldr	r3, [pc, #52]	; (8002a9c <SystemInit+0x44>)
 8002a68:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a6a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002a72:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002a7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002a80:	4a07      	ldr	r2, [pc, #28]	; (8002aa0 <SystemInit+0x48>)
 8002a82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002a8c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a8e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002a92:	608b      	str	r3, [r1, #8]
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	e000ed00 	.word	0xe000ed00
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	24003010 	.word	0x24003010

08002aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002adc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002aa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002aaa:	e003      	b.n	8002ab4 <LoopCopyDataInit>

08002aac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002aae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002ab0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002ab2:	3104      	adds	r1, #4

08002ab4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ab4:	480b      	ldr	r0, [pc, #44]	; (8002ae4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ab8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002aba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002abc:	d3f6      	bcc.n	8002aac <CopyDataInit>
  ldr  r2, =_sbss
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ac0:	e002      	b.n	8002ac8 <LoopFillZerobss>

08002ac2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ac2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ac4:	f842 3b04 	str.w	r3, [r2], #4

08002ac8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002aca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002acc:	d3f9      	bcc.n	8002ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ace:	f7ff ffc3 	bl	8002a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ad2:	f000 f817 	bl	8002b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ad6:	f7ff fe05 	bl	80026e4 <main>
  bx  lr    
 8002ada:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002adc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002ae0:	08004a28 	.word	0x08004a28
  ldr  r0, =_sdata
 8002ae4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ae8:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002aec:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8002af0:	20001c08 	.word	0x20001c08

08002af4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af4:	e7fe      	b.n	8002af4 <ADC_IRQHandler>
	...

08002af8 <__errno>:
 8002af8:	4b01      	ldr	r3, [pc, #4]	; (8002b00 <__errno+0x8>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	2000002c 	.word	0x2000002c

08002b04 <__libc_init_array>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	4e0d      	ldr	r6, [pc, #52]	; (8002b3c <__libc_init_array+0x38>)
 8002b08:	4c0d      	ldr	r4, [pc, #52]	; (8002b40 <__libc_init_array+0x3c>)
 8002b0a:	1ba4      	subs	r4, r4, r6
 8002b0c:	10a4      	asrs	r4, r4, #2
 8002b0e:	2500      	movs	r5, #0
 8002b10:	42a5      	cmp	r5, r4
 8002b12:	d109      	bne.n	8002b28 <__libc_init_array+0x24>
 8002b14:	4e0b      	ldr	r6, [pc, #44]	; (8002b44 <__libc_init_array+0x40>)
 8002b16:	4c0c      	ldr	r4, [pc, #48]	; (8002b48 <__libc_init_array+0x44>)
 8002b18:	f001 f986 	bl	8003e28 <_init>
 8002b1c:	1ba4      	subs	r4, r4, r6
 8002b1e:	10a4      	asrs	r4, r4, #2
 8002b20:	2500      	movs	r5, #0
 8002b22:	42a5      	cmp	r5, r4
 8002b24:	d105      	bne.n	8002b32 <__libc_init_array+0x2e>
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b2c:	4798      	blx	r3
 8002b2e:	3501      	adds	r5, #1
 8002b30:	e7ee      	b.n	8002b10 <__libc_init_array+0xc>
 8002b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b36:	4798      	blx	r3
 8002b38:	3501      	adds	r5, #1
 8002b3a:	e7f2      	b.n	8002b22 <__libc_init_array+0x1e>
 8002b3c:	08004a20 	.word	0x08004a20
 8002b40:	08004a20 	.word	0x08004a20
 8002b44:	08004a20 	.word	0x08004a20
 8002b48:	08004a24 	.word	0x08004a24

08002b4c <__locale_ctype_ptr>:
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <__locale_ctype_ptr+0x14>)
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <__locale_ctype_ptr+0x18>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf08      	it	eq
 8002b58:	4613      	moveq	r3, r2
 8002b5a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8002b5e:	4770      	bx	lr
 8002b60:	2000002c 	.word	0x2000002c
 8002b64:	20000090 	.word	0x20000090

08002b68 <__ascii_mbtowc>:
 8002b68:	b082      	sub	sp, #8
 8002b6a:	b901      	cbnz	r1, 8002b6e <__ascii_mbtowc+0x6>
 8002b6c:	a901      	add	r1, sp, #4
 8002b6e:	b142      	cbz	r2, 8002b82 <__ascii_mbtowc+0x1a>
 8002b70:	b14b      	cbz	r3, 8002b86 <__ascii_mbtowc+0x1e>
 8002b72:	7813      	ldrb	r3, [r2, #0]
 8002b74:	600b      	str	r3, [r1, #0]
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	1c10      	adds	r0, r2, #0
 8002b7a:	bf18      	it	ne
 8002b7c:	2001      	movne	r0, #1
 8002b7e:	b002      	add	sp, #8
 8002b80:	4770      	bx	lr
 8002b82:	4610      	mov	r0, r2
 8002b84:	e7fb      	b.n	8002b7e <__ascii_mbtowc+0x16>
 8002b86:	f06f 0001 	mvn.w	r0, #1
 8002b8a:	e7f8      	b.n	8002b7e <__ascii_mbtowc+0x16>

08002b8c <memcpy>:
 8002b8c:	b510      	push	{r4, lr}
 8002b8e:	1e43      	subs	r3, r0, #1
 8002b90:	440a      	add	r2, r1
 8002b92:	4291      	cmp	r1, r2
 8002b94:	d100      	bne.n	8002b98 <memcpy+0xc>
 8002b96:	bd10      	pop	{r4, pc}
 8002b98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002ba0:	e7f7      	b.n	8002b92 <memcpy+0x6>

08002ba2 <memset>:
 8002ba2:	4402      	add	r2, r0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d100      	bne.n	8002bac <memset+0xa>
 8002baa:	4770      	bx	lr
 8002bac:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb0:	e7f9      	b.n	8002ba6 <memset+0x4>
	...

08002bb4 <iprintf>:
 8002bb4:	b40f      	push	{r0, r1, r2, r3}
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <iprintf+0x2c>)
 8002bb8:	b513      	push	{r0, r1, r4, lr}
 8002bba:	681c      	ldr	r4, [r3, #0]
 8002bbc:	b124      	cbz	r4, 8002bc8 <iprintf+0x14>
 8002bbe:	69a3      	ldr	r3, [r4, #24]
 8002bc0:	b913      	cbnz	r3, 8002bc8 <iprintf+0x14>
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f000 fa68 	bl	8003098 <__sinit>
 8002bc8:	ab05      	add	r3, sp, #20
 8002bca:	9a04      	ldr	r2, [sp, #16]
 8002bcc:	68a1      	ldr	r1, [r4, #8]
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f000 fd75 	bl	80036c0 <_vfiprintf_r>
 8002bd6:	b002      	add	sp, #8
 8002bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bdc:	b004      	add	sp, #16
 8002bde:	4770      	bx	lr
 8002be0:	2000002c 	.word	0x2000002c

08002be4 <_puts_r>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	460e      	mov	r6, r1
 8002be8:	4605      	mov	r5, r0
 8002bea:	b118      	cbz	r0, 8002bf4 <_puts_r+0x10>
 8002bec:	6983      	ldr	r3, [r0, #24]
 8002bee:	b90b      	cbnz	r3, 8002bf4 <_puts_r+0x10>
 8002bf0:	f000 fa52 	bl	8003098 <__sinit>
 8002bf4:	69ab      	ldr	r3, [r5, #24]
 8002bf6:	68ac      	ldr	r4, [r5, #8]
 8002bf8:	b913      	cbnz	r3, 8002c00 <_puts_r+0x1c>
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f000 fa4c 	bl	8003098 <__sinit>
 8002c00:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <_puts_r+0xac>)
 8002c02:	429c      	cmp	r4, r3
 8002c04:	d117      	bne.n	8002c36 <_puts_r+0x52>
 8002c06:	686c      	ldr	r4, [r5, #4]
 8002c08:	89a3      	ldrh	r3, [r4, #12]
 8002c0a:	071b      	lsls	r3, r3, #28
 8002c0c:	d51d      	bpl.n	8002c4a <_puts_r+0x66>
 8002c0e:	6923      	ldr	r3, [r4, #16]
 8002c10:	b1db      	cbz	r3, 8002c4a <_puts_r+0x66>
 8002c12:	3e01      	subs	r6, #1
 8002c14:	68a3      	ldr	r3, [r4, #8]
 8002c16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	60a3      	str	r3, [r4, #8]
 8002c1e:	b9e9      	cbnz	r1, 8002c5c <_puts_r+0x78>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da2e      	bge.n	8002c82 <_puts_r+0x9e>
 8002c24:	4622      	mov	r2, r4
 8002c26:	210a      	movs	r1, #10
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f000 f875 	bl	8002d18 <__swbuf_r>
 8002c2e:	3001      	adds	r0, #1
 8002c30:	d011      	beq.n	8002c56 <_puts_r+0x72>
 8002c32:	200a      	movs	r0, #10
 8002c34:	bd70      	pop	{r4, r5, r6, pc}
 8002c36:	4b17      	ldr	r3, [pc, #92]	; (8002c94 <_puts_r+0xb0>)
 8002c38:	429c      	cmp	r4, r3
 8002c3a:	d101      	bne.n	8002c40 <_puts_r+0x5c>
 8002c3c:	68ac      	ldr	r4, [r5, #8]
 8002c3e:	e7e3      	b.n	8002c08 <_puts_r+0x24>
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <_puts_r+0xb4>)
 8002c42:	429c      	cmp	r4, r3
 8002c44:	bf08      	it	eq
 8002c46:	68ec      	ldreq	r4, [r5, #12]
 8002c48:	e7de      	b.n	8002c08 <_puts_r+0x24>
 8002c4a:	4621      	mov	r1, r4
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	f000 f8c3 	bl	8002dd8 <__swsetup_r>
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d0dd      	beq.n	8002c12 <_puts_r+0x2e>
 8002c56:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	da04      	bge.n	8002c6a <_puts_r+0x86>
 8002c60:	69a2      	ldr	r2, [r4, #24]
 8002c62:	4293      	cmp	r3, r2
 8002c64:	db06      	blt.n	8002c74 <_puts_r+0x90>
 8002c66:	290a      	cmp	r1, #10
 8002c68:	d004      	beq.n	8002c74 <_puts_r+0x90>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	6022      	str	r2, [r4, #0]
 8002c70:	7019      	strb	r1, [r3, #0]
 8002c72:	e7cf      	b.n	8002c14 <_puts_r+0x30>
 8002c74:	4622      	mov	r2, r4
 8002c76:	4628      	mov	r0, r5
 8002c78:	f000 f84e 	bl	8002d18 <__swbuf_r>
 8002c7c:	3001      	adds	r0, #1
 8002c7e:	d1c9      	bne.n	8002c14 <_puts_r+0x30>
 8002c80:	e7e9      	b.n	8002c56 <_puts_r+0x72>
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	200a      	movs	r0, #10
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	6022      	str	r2, [r4, #0]
 8002c8a:	7018      	strb	r0, [r3, #0]
 8002c8c:	bd70      	pop	{r4, r5, r6, pc}
 8002c8e:	bf00      	nop
 8002c90:	080049a4 	.word	0x080049a4
 8002c94:	080049c4 	.word	0x080049c4
 8002c98:	08004984 	.word	0x08004984

08002c9c <puts>:
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <puts+0xc>)
 8002c9e:	4601      	mov	r1, r0
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	f7ff bf9f 	b.w	8002be4 <_puts_r>
 8002ca6:	bf00      	nop
 8002ca8:	2000002c 	.word	0x2000002c

08002cac <siprintf>:
 8002cac:	b40e      	push	{r1, r2, r3}
 8002cae:	b500      	push	{lr}
 8002cb0:	b09c      	sub	sp, #112	; 0x70
 8002cb2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8002cb8:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002cbc:	9002      	str	r0, [sp, #8]
 8002cbe:	9006      	str	r0, [sp, #24]
 8002cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002cc4:	480a      	ldr	r0, [pc, #40]	; (8002cf0 <siprintf+0x44>)
 8002cc6:	9104      	str	r1, [sp, #16]
 8002cc8:	9107      	str	r1, [sp, #28]
 8002cca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cce:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cd2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002cd6:	6800      	ldr	r0, [r0, #0]
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	a902      	add	r1, sp, #8
 8002cdc:	f000 fbd2 	bl	8003484 <_svfiprintf_r>
 8002ce0:	9b02      	ldr	r3, [sp, #8]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	b01c      	add	sp, #112	; 0x70
 8002ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002cec:	b003      	add	sp, #12
 8002cee:	4770      	bx	lr
 8002cf0:	2000002c 	.word	0x2000002c

08002cf4 <strncmp>:
 8002cf4:	b510      	push	{r4, lr}
 8002cf6:	b16a      	cbz	r2, 8002d14 <strncmp+0x20>
 8002cf8:	3901      	subs	r1, #1
 8002cfa:	1884      	adds	r4, r0, r2
 8002cfc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002d00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d103      	bne.n	8002d10 <strncmp+0x1c>
 8002d08:	42a0      	cmp	r0, r4
 8002d0a:	d001      	beq.n	8002d10 <strncmp+0x1c>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f5      	bne.n	8002cfc <strncmp+0x8>
 8002d10:	1a98      	subs	r0, r3, r2
 8002d12:	bd10      	pop	{r4, pc}
 8002d14:	4610      	mov	r0, r2
 8002d16:	bd10      	pop	{r4, pc}

08002d18 <__swbuf_r>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	460e      	mov	r6, r1
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	4605      	mov	r5, r0
 8002d20:	b118      	cbz	r0, 8002d2a <__swbuf_r+0x12>
 8002d22:	6983      	ldr	r3, [r0, #24]
 8002d24:	b90b      	cbnz	r3, 8002d2a <__swbuf_r+0x12>
 8002d26:	f000 f9b7 	bl	8003098 <__sinit>
 8002d2a:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <__swbuf_r+0x98>)
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	d12a      	bne.n	8002d86 <__swbuf_r+0x6e>
 8002d30:	686c      	ldr	r4, [r5, #4]
 8002d32:	69a3      	ldr	r3, [r4, #24]
 8002d34:	60a3      	str	r3, [r4, #8]
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	071a      	lsls	r2, r3, #28
 8002d3a:	d52e      	bpl.n	8002d9a <__swbuf_r+0x82>
 8002d3c:	6923      	ldr	r3, [r4, #16]
 8002d3e:	b363      	cbz	r3, 8002d9a <__swbuf_r+0x82>
 8002d40:	6923      	ldr	r3, [r4, #16]
 8002d42:	6820      	ldr	r0, [r4, #0]
 8002d44:	1ac0      	subs	r0, r0, r3
 8002d46:	6963      	ldr	r3, [r4, #20]
 8002d48:	b2f6      	uxtb	r6, r6
 8002d4a:	4298      	cmp	r0, r3
 8002d4c:	4637      	mov	r7, r6
 8002d4e:	db04      	blt.n	8002d5a <__swbuf_r+0x42>
 8002d50:	4621      	mov	r1, r4
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 f936 	bl	8002fc4 <_fflush_r>
 8002d58:	bb28      	cbnz	r0, 8002da6 <__swbuf_r+0x8e>
 8002d5a:	68a3      	ldr	r3, [r4, #8]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60a3      	str	r3, [r4, #8]
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	6022      	str	r2, [r4, #0]
 8002d66:	701e      	strb	r6, [r3, #0]
 8002d68:	6963      	ldr	r3, [r4, #20]
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	4298      	cmp	r0, r3
 8002d6e:	d004      	beq.n	8002d7a <__swbuf_r+0x62>
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	07db      	lsls	r3, r3, #31
 8002d74:	d519      	bpl.n	8002daa <__swbuf_r+0x92>
 8002d76:	2e0a      	cmp	r6, #10
 8002d78:	d117      	bne.n	8002daa <__swbuf_r+0x92>
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f000 f921 	bl	8002fc4 <_fflush_r>
 8002d82:	b190      	cbz	r0, 8002daa <__swbuf_r+0x92>
 8002d84:	e00f      	b.n	8002da6 <__swbuf_r+0x8e>
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <__swbuf_r+0x9c>)
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d101      	bne.n	8002d90 <__swbuf_r+0x78>
 8002d8c:	68ac      	ldr	r4, [r5, #8]
 8002d8e:	e7d0      	b.n	8002d32 <__swbuf_r+0x1a>
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <__swbuf_r+0xa0>)
 8002d92:	429c      	cmp	r4, r3
 8002d94:	bf08      	it	eq
 8002d96:	68ec      	ldreq	r4, [r5, #12]
 8002d98:	e7cb      	b.n	8002d32 <__swbuf_r+0x1a>
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f000 f81b 	bl	8002dd8 <__swsetup_r>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d0cc      	beq.n	8002d40 <__swbuf_r+0x28>
 8002da6:	f04f 37ff 	mov.w	r7, #4294967295
 8002daa:	4638      	mov	r0, r7
 8002dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	080049a4 	.word	0x080049a4
 8002db4:	080049c4 	.word	0x080049c4
 8002db8:	08004984 	.word	0x08004984

08002dbc <__ascii_wctomb>:
 8002dbc:	b149      	cbz	r1, 8002dd2 <__ascii_wctomb+0x16>
 8002dbe:	2aff      	cmp	r2, #255	; 0xff
 8002dc0:	bf85      	ittet	hi
 8002dc2:	238a      	movhi	r3, #138	; 0x8a
 8002dc4:	6003      	strhi	r3, [r0, #0]
 8002dc6:	700a      	strbls	r2, [r1, #0]
 8002dc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8002dcc:	bf98      	it	ls
 8002dce:	2001      	movls	r0, #1
 8002dd0:	4770      	bx	lr
 8002dd2:	4608      	mov	r0, r1
 8002dd4:	4770      	bx	lr
	...

08002dd8 <__swsetup_r>:
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <__swsetup_r+0xcc>)
 8002dda:	b570      	push	{r4, r5, r6, lr}
 8002ddc:	681d      	ldr	r5, [r3, #0]
 8002dde:	4606      	mov	r6, r0
 8002de0:	460c      	mov	r4, r1
 8002de2:	b125      	cbz	r5, 8002dee <__swsetup_r+0x16>
 8002de4:	69ab      	ldr	r3, [r5, #24]
 8002de6:	b913      	cbnz	r3, 8002dee <__swsetup_r+0x16>
 8002de8:	4628      	mov	r0, r5
 8002dea:	f000 f955 	bl	8003098 <__sinit>
 8002dee:	4b2e      	ldr	r3, [pc, #184]	; (8002ea8 <__swsetup_r+0xd0>)
 8002df0:	429c      	cmp	r4, r3
 8002df2:	d10f      	bne.n	8002e14 <__swsetup_r+0x3c>
 8002df4:	686c      	ldr	r4, [r5, #4]
 8002df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	0715      	lsls	r5, r2, #28
 8002dfe:	d42c      	bmi.n	8002e5a <__swsetup_r+0x82>
 8002e00:	06d0      	lsls	r0, r2, #27
 8002e02:	d411      	bmi.n	8002e28 <__swsetup_r+0x50>
 8002e04:	2209      	movs	r2, #9
 8002e06:	6032      	str	r2, [r6, #0]
 8002e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e0c:	81a3      	strh	r3, [r4, #12]
 8002e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e12:	bd70      	pop	{r4, r5, r6, pc}
 8002e14:	4b25      	ldr	r3, [pc, #148]	; (8002eac <__swsetup_r+0xd4>)
 8002e16:	429c      	cmp	r4, r3
 8002e18:	d101      	bne.n	8002e1e <__swsetup_r+0x46>
 8002e1a:	68ac      	ldr	r4, [r5, #8]
 8002e1c:	e7eb      	b.n	8002df6 <__swsetup_r+0x1e>
 8002e1e:	4b24      	ldr	r3, [pc, #144]	; (8002eb0 <__swsetup_r+0xd8>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	bf08      	it	eq
 8002e24:	68ec      	ldreq	r4, [r5, #12]
 8002e26:	e7e6      	b.n	8002df6 <__swsetup_r+0x1e>
 8002e28:	0751      	lsls	r1, r2, #29
 8002e2a:	d512      	bpl.n	8002e52 <__swsetup_r+0x7a>
 8002e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e2e:	b141      	cbz	r1, 8002e42 <__swsetup_r+0x6a>
 8002e30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e34:	4299      	cmp	r1, r3
 8002e36:	d002      	beq.n	8002e3e <__swsetup_r+0x66>
 8002e38:	4630      	mov	r0, r6
 8002e3a:	f000 fa1b 	bl	8003274 <_free_r>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6363      	str	r3, [r4, #52]	; 0x34
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e48:	81a3      	strh	r3, [r4, #12]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	6063      	str	r3, [r4, #4]
 8002e4e:	6923      	ldr	r3, [r4, #16]
 8002e50:	6023      	str	r3, [r4, #0]
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f043 0308 	orr.w	r3, r3, #8
 8002e58:	81a3      	strh	r3, [r4, #12]
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	b94b      	cbnz	r3, 8002e72 <__swsetup_r+0x9a>
 8002e5e:	89a3      	ldrh	r3, [r4, #12]
 8002e60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e68:	d003      	beq.n	8002e72 <__swsetup_r+0x9a>
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	f000 f9c1 	bl	80031f4 <__smakebuf_r>
 8002e72:	89a2      	ldrh	r2, [r4, #12]
 8002e74:	f012 0301 	ands.w	r3, r2, #1
 8002e78:	d00c      	beq.n	8002e94 <__swsetup_r+0xbc>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	60a3      	str	r3, [r4, #8]
 8002e7e:	6963      	ldr	r3, [r4, #20]
 8002e80:	425b      	negs	r3, r3
 8002e82:	61a3      	str	r3, [r4, #24]
 8002e84:	6923      	ldr	r3, [r4, #16]
 8002e86:	b953      	cbnz	r3, 8002e9e <__swsetup_r+0xc6>
 8002e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002e90:	d1ba      	bne.n	8002e08 <__swsetup_r+0x30>
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
 8002e94:	0792      	lsls	r2, r2, #30
 8002e96:	bf58      	it	pl
 8002e98:	6963      	ldrpl	r3, [r4, #20]
 8002e9a:	60a3      	str	r3, [r4, #8]
 8002e9c:	e7f2      	b.n	8002e84 <__swsetup_r+0xac>
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	e7f7      	b.n	8002e92 <__swsetup_r+0xba>
 8002ea2:	bf00      	nop
 8002ea4:	2000002c 	.word	0x2000002c
 8002ea8:	080049a4 	.word	0x080049a4
 8002eac:	080049c4 	.word	0x080049c4
 8002eb0:	08004984 	.word	0x08004984

08002eb4 <__sflush_r>:
 8002eb4:	898a      	ldrh	r2, [r1, #12]
 8002eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eba:	4605      	mov	r5, r0
 8002ebc:	0710      	lsls	r0, r2, #28
 8002ebe:	460c      	mov	r4, r1
 8002ec0:	d45a      	bmi.n	8002f78 <__sflush_r+0xc4>
 8002ec2:	684b      	ldr	r3, [r1, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	dc05      	bgt.n	8002ed4 <__sflush_r+0x20>
 8002ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	dc02      	bgt.n	8002ed4 <__sflush_r+0x20>
 8002ece:	2000      	movs	r0, #0
 8002ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ed6:	2e00      	cmp	r6, #0
 8002ed8:	d0f9      	beq.n	8002ece <__sflush_r+0x1a>
 8002eda:	2300      	movs	r3, #0
 8002edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ee0:	682f      	ldr	r7, [r5, #0]
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	d033      	beq.n	8002f4e <__sflush_r+0x9a>
 8002ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	075a      	lsls	r2, r3, #29
 8002eec:	d505      	bpl.n	8002efa <__sflush_r+0x46>
 8002eee:	6863      	ldr	r3, [r4, #4]
 8002ef0:	1ac0      	subs	r0, r0, r3
 8002ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002ef4:	b10b      	cbz	r3, 8002efa <__sflush_r+0x46>
 8002ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef8:	1ac0      	subs	r0, r0, r3
 8002efa:	2300      	movs	r3, #0
 8002efc:	4602      	mov	r2, r0
 8002efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f00:	6a21      	ldr	r1, [r4, #32]
 8002f02:	4628      	mov	r0, r5
 8002f04:	47b0      	blx	r6
 8002f06:	1c43      	adds	r3, r0, #1
 8002f08:	89a3      	ldrh	r3, [r4, #12]
 8002f0a:	d106      	bne.n	8002f1a <__sflush_r+0x66>
 8002f0c:	6829      	ldr	r1, [r5, #0]
 8002f0e:	291d      	cmp	r1, #29
 8002f10:	d84b      	bhi.n	8002faa <__sflush_r+0xf6>
 8002f12:	4a2b      	ldr	r2, [pc, #172]	; (8002fc0 <__sflush_r+0x10c>)
 8002f14:	40ca      	lsrs	r2, r1
 8002f16:	07d6      	lsls	r6, r2, #31
 8002f18:	d547      	bpl.n	8002faa <__sflush_r+0xf6>
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	6062      	str	r2, [r4, #4]
 8002f1e:	04d9      	lsls	r1, r3, #19
 8002f20:	6922      	ldr	r2, [r4, #16]
 8002f22:	6022      	str	r2, [r4, #0]
 8002f24:	d504      	bpl.n	8002f30 <__sflush_r+0x7c>
 8002f26:	1c42      	adds	r2, r0, #1
 8002f28:	d101      	bne.n	8002f2e <__sflush_r+0x7a>
 8002f2a:	682b      	ldr	r3, [r5, #0]
 8002f2c:	b903      	cbnz	r3, 8002f30 <__sflush_r+0x7c>
 8002f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8002f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f32:	602f      	str	r7, [r5, #0]
 8002f34:	2900      	cmp	r1, #0
 8002f36:	d0ca      	beq.n	8002ece <__sflush_r+0x1a>
 8002f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f3c:	4299      	cmp	r1, r3
 8002f3e:	d002      	beq.n	8002f46 <__sflush_r+0x92>
 8002f40:	4628      	mov	r0, r5
 8002f42:	f000 f997 	bl	8003274 <_free_r>
 8002f46:	2000      	movs	r0, #0
 8002f48:	6360      	str	r0, [r4, #52]	; 0x34
 8002f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f4e:	6a21      	ldr	r1, [r4, #32]
 8002f50:	2301      	movs	r3, #1
 8002f52:	4628      	mov	r0, r5
 8002f54:	47b0      	blx	r6
 8002f56:	1c41      	adds	r1, r0, #1
 8002f58:	d1c6      	bne.n	8002ee8 <__sflush_r+0x34>
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0c3      	beq.n	8002ee8 <__sflush_r+0x34>
 8002f60:	2b1d      	cmp	r3, #29
 8002f62:	d001      	beq.n	8002f68 <__sflush_r+0xb4>
 8002f64:	2b16      	cmp	r3, #22
 8002f66:	d101      	bne.n	8002f6c <__sflush_r+0xb8>
 8002f68:	602f      	str	r7, [r5, #0]
 8002f6a:	e7b0      	b.n	8002ece <__sflush_r+0x1a>
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f72:	81a3      	strh	r3, [r4, #12]
 8002f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f78:	690f      	ldr	r7, [r1, #16]
 8002f7a:	2f00      	cmp	r7, #0
 8002f7c:	d0a7      	beq.n	8002ece <__sflush_r+0x1a>
 8002f7e:	0793      	lsls	r3, r2, #30
 8002f80:	680e      	ldr	r6, [r1, #0]
 8002f82:	bf08      	it	eq
 8002f84:	694b      	ldreq	r3, [r1, #20]
 8002f86:	600f      	str	r7, [r1, #0]
 8002f88:	bf18      	it	ne
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	eba6 0807 	sub.w	r8, r6, r7
 8002f90:	608b      	str	r3, [r1, #8]
 8002f92:	f1b8 0f00 	cmp.w	r8, #0
 8002f96:	dd9a      	ble.n	8002ece <__sflush_r+0x1a>
 8002f98:	4643      	mov	r3, r8
 8002f9a:	463a      	mov	r2, r7
 8002f9c:	6a21      	ldr	r1, [r4, #32]
 8002f9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	47b0      	blx	r6
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	dc07      	bgt.n	8002fb8 <__sflush_r+0x104>
 8002fa8:	89a3      	ldrh	r3, [r4, #12]
 8002faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fae:	81a3      	strh	r3, [r4, #12]
 8002fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002fb8:	4407      	add	r7, r0
 8002fba:	eba8 0800 	sub.w	r8, r8, r0
 8002fbe:	e7e8      	b.n	8002f92 <__sflush_r+0xde>
 8002fc0:	20400001 	.word	0x20400001

08002fc4 <_fflush_r>:
 8002fc4:	b538      	push	{r3, r4, r5, lr}
 8002fc6:	690b      	ldr	r3, [r1, #16]
 8002fc8:	4605      	mov	r5, r0
 8002fca:	460c      	mov	r4, r1
 8002fcc:	b1db      	cbz	r3, 8003006 <_fflush_r+0x42>
 8002fce:	b118      	cbz	r0, 8002fd8 <_fflush_r+0x14>
 8002fd0:	6983      	ldr	r3, [r0, #24]
 8002fd2:	b90b      	cbnz	r3, 8002fd8 <_fflush_r+0x14>
 8002fd4:	f000 f860 	bl	8003098 <__sinit>
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <_fflush_r+0x48>)
 8002fda:	429c      	cmp	r4, r3
 8002fdc:	d109      	bne.n	8002ff2 <_fflush_r+0x2e>
 8002fde:	686c      	ldr	r4, [r5, #4]
 8002fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fe4:	b17b      	cbz	r3, 8003006 <_fflush_r+0x42>
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	4628      	mov	r0, r5
 8002fea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fee:	f7ff bf61 	b.w	8002eb4 <__sflush_r>
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <_fflush_r+0x4c>)
 8002ff4:	429c      	cmp	r4, r3
 8002ff6:	d101      	bne.n	8002ffc <_fflush_r+0x38>
 8002ff8:	68ac      	ldr	r4, [r5, #8]
 8002ffa:	e7f1      	b.n	8002fe0 <_fflush_r+0x1c>
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <_fflush_r+0x50>)
 8002ffe:	429c      	cmp	r4, r3
 8003000:	bf08      	it	eq
 8003002:	68ec      	ldreq	r4, [r5, #12]
 8003004:	e7ec      	b.n	8002fe0 <_fflush_r+0x1c>
 8003006:	2000      	movs	r0, #0
 8003008:	bd38      	pop	{r3, r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	080049a4 	.word	0x080049a4
 8003010:	080049c4 	.word	0x080049c4
 8003014:	08004984 	.word	0x08004984

08003018 <_cleanup_r>:
 8003018:	4901      	ldr	r1, [pc, #4]	; (8003020 <_cleanup_r+0x8>)
 800301a:	f000 b8a9 	b.w	8003170 <_fwalk_reent>
 800301e:	bf00      	nop
 8003020:	08002fc5 	.word	0x08002fc5

08003024 <std.isra.0>:
 8003024:	2300      	movs	r3, #0
 8003026:	b510      	push	{r4, lr}
 8003028:	4604      	mov	r4, r0
 800302a:	6003      	str	r3, [r0, #0]
 800302c:	6043      	str	r3, [r0, #4]
 800302e:	6083      	str	r3, [r0, #8]
 8003030:	8181      	strh	r1, [r0, #12]
 8003032:	6643      	str	r3, [r0, #100]	; 0x64
 8003034:	81c2      	strh	r2, [r0, #14]
 8003036:	6103      	str	r3, [r0, #16]
 8003038:	6143      	str	r3, [r0, #20]
 800303a:	6183      	str	r3, [r0, #24]
 800303c:	4619      	mov	r1, r3
 800303e:	2208      	movs	r2, #8
 8003040:	305c      	adds	r0, #92	; 0x5c
 8003042:	f7ff fdae 	bl	8002ba2 <memset>
 8003046:	4b05      	ldr	r3, [pc, #20]	; (800305c <std.isra.0+0x38>)
 8003048:	6263      	str	r3, [r4, #36]	; 0x24
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <std.isra.0+0x3c>)
 800304c:	62a3      	str	r3, [r4, #40]	; 0x28
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <std.isra.0+0x40>)
 8003050:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <std.isra.0+0x44>)
 8003054:	6224      	str	r4, [r4, #32]
 8003056:	6323      	str	r3, [r4, #48]	; 0x30
 8003058:	bd10      	pop	{r4, pc}
 800305a:	bf00      	nop
 800305c:	08003c39 	.word	0x08003c39
 8003060:	08003c5b 	.word	0x08003c5b
 8003064:	08003c93 	.word	0x08003c93
 8003068:	08003cb7 	.word	0x08003cb7

0800306c <__sfmoreglue>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	1e4a      	subs	r2, r1, #1
 8003070:	2568      	movs	r5, #104	; 0x68
 8003072:	4355      	muls	r5, r2
 8003074:	460e      	mov	r6, r1
 8003076:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800307a:	f000 f949 	bl	8003310 <_malloc_r>
 800307e:	4604      	mov	r4, r0
 8003080:	b140      	cbz	r0, 8003094 <__sfmoreglue+0x28>
 8003082:	2100      	movs	r1, #0
 8003084:	e880 0042 	stmia.w	r0, {r1, r6}
 8003088:	300c      	adds	r0, #12
 800308a:	60a0      	str	r0, [r4, #8]
 800308c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003090:	f7ff fd87 	bl	8002ba2 <memset>
 8003094:	4620      	mov	r0, r4
 8003096:	bd70      	pop	{r4, r5, r6, pc}

08003098 <__sinit>:
 8003098:	6983      	ldr	r3, [r0, #24]
 800309a:	b510      	push	{r4, lr}
 800309c:	4604      	mov	r4, r0
 800309e:	bb33      	cbnz	r3, 80030ee <__sinit+0x56>
 80030a0:	6483      	str	r3, [r0, #72]	; 0x48
 80030a2:	64c3      	str	r3, [r0, #76]	; 0x4c
 80030a4:	6503      	str	r3, [r0, #80]	; 0x50
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <__sinit+0x58>)
 80030a8:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <__sinit+0x5c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6282      	str	r2, [r0, #40]	; 0x28
 80030ae:	4298      	cmp	r0, r3
 80030b0:	bf04      	itt	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	6183      	streq	r3, [r0, #24]
 80030b6:	f000 f81f 	bl	80030f8 <__sfp>
 80030ba:	6060      	str	r0, [r4, #4]
 80030bc:	4620      	mov	r0, r4
 80030be:	f000 f81b 	bl	80030f8 <__sfp>
 80030c2:	60a0      	str	r0, [r4, #8]
 80030c4:	4620      	mov	r0, r4
 80030c6:	f000 f817 	bl	80030f8 <__sfp>
 80030ca:	2200      	movs	r2, #0
 80030cc:	60e0      	str	r0, [r4, #12]
 80030ce:	2104      	movs	r1, #4
 80030d0:	6860      	ldr	r0, [r4, #4]
 80030d2:	f7ff ffa7 	bl	8003024 <std.isra.0>
 80030d6:	2201      	movs	r2, #1
 80030d8:	2109      	movs	r1, #9
 80030da:	68a0      	ldr	r0, [r4, #8]
 80030dc:	f7ff ffa2 	bl	8003024 <std.isra.0>
 80030e0:	2202      	movs	r2, #2
 80030e2:	2112      	movs	r1, #18
 80030e4:	68e0      	ldr	r0, [r4, #12]
 80030e6:	f7ff ff9d 	bl	8003024 <std.isra.0>
 80030ea:	2301      	movs	r3, #1
 80030ec:	61a3      	str	r3, [r4, #24]
 80030ee:	bd10      	pop	{r4, pc}
 80030f0:	08004874 	.word	0x08004874
 80030f4:	08003019 	.word	0x08003019

080030f8 <__sfp>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	4b1c      	ldr	r3, [pc, #112]	; (800316c <__sfp+0x74>)
 80030fc:	681e      	ldr	r6, [r3, #0]
 80030fe:	69b3      	ldr	r3, [r6, #24]
 8003100:	4607      	mov	r7, r0
 8003102:	b913      	cbnz	r3, 800310a <__sfp+0x12>
 8003104:	4630      	mov	r0, r6
 8003106:	f7ff ffc7 	bl	8003098 <__sinit>
 800310a:	3648      	adds	r6, #72	; 0x48
 800310c:	68b4      	ldr	r4, [r6, #8]
 800310e:	6873      	ldr	r3, [r6, #4]
 8003110:	3b01      	subs	r3, #1
 8003112:	d503      	bpl.n	800311c <__sfp+0x24>
 8003114:	6833      	ldr	r3, [r6, #0]
 8003116:	b133      	cbz	r3, 8003126 <__sfp+0x2e>
 8003118:	6836      	ldr	r6, [r6, #0]
 800311a:	e7f7      	b.n	800310c <__sfp+0x14>
 800311c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003120:	b16d      	cbz	r5, 800313e <__sfp+0x46>
 8003122:	3468      	adds	r4, #104	; 0x68
 8003124:	e7f4      	b.n	8003110 <__sfp+0x18>
 8003126:	2104      	movs	r1, #4
 8003128:	4638      	mov	r0, r7
 800312a:	f7ff ff9f 	bl	800306c <__sfmoreglue>
 800312e:	6030      	str	r0, [r6, #0]
 8003130:	2800      	cmp	r0, #0
 8003132:	d1f1      	bne.n	8003118 <__sfp+0x20>
 8003134:	230c      	movs	r3, #12
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	4604      	mov	r4, r0
 800313a:	4620      	mov	r0, r4
 800313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800313e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003142:	81e3      	strh	r3, [r4, #14]
 8003144:	2301      	movs	r3, #1
 8003146:	81a3      	strh	r3, [r4, #12]
 8003148:	6665      	str	r5, [r4, #100]	; 0x64
 800314a:	6025      	str	r5, [r4, #0]
 800314c:	60a5      	str	r5, [r4, #8]
 800314e:	6065      	str	r5, [r4, #4]
 8003150:	6125      	str	r5, [r4, #16]
 8003152:	6165      	str	r5, [r4, #20]
 8003154:	61a5      	str	r5, [r4, #24]
 8003156:	2208      	movs	r2, #8
 8003158:	4629      	mov	r1, r5
 800315a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800315e:	f7ff fd20 	bl	8002ba2 <memset>
 8003162:	6365      	str	r5, [r4, #52]	; 0x34
 8003164:	63a5      	str	r5, [r4, #56]	; 0x38
 8003166:	64a5      	str	r5, [r4, #72]	; 0x48
 8003168:	64e5      	str	r5, [r4, #76]	; 0x4c
 800316a:	e7e6      	b.n	800313a <__sfp+0x42>
 800316c:	08004874 	.word	0x08004874

08003170 <_fwalk_reent>:
 8003170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003174:	4680      	mov	r8, r0
 8003176:	4689      	mov	r9, r1
 8003178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800317c:	2600      	movs	r6, #0
 800317e:	b914      	cbnz	r4, 8003186 <_fwalk_reent+0x16>
 8003180:	4630      	mov	r0, r6
 8003182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003186:	68a5      	ldr	r5, [r4, #8]
 8003188:	6867      	ldr	r7, [r4, #4]
 800318a:	3f01      	subs	r7, #1
 800318c:	d501      	bpl.n	8003192 <_fwalk_reent+0x22>
 800318e:	6824      	ldr	r4, [r4, #0]
 8003190:	e7f5      	b.n	800317e <_fwalk_reent+0xe>
 8003192:	89ab      	ldrh	r3, [r5, #12]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d907      	bls.n	80031a8 <_fwalk_reent+0x38>
 8003198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800319c:	3301      	adds	r3, #1
 800319e:	d003      	beq.n	80031a8 <_fwalk_reent+0x38>
 80031a0:	4629      	mov	r1, r5
 80031a2:	4640      	mov	r0, r8
 80031a4:	47c8      	blx	r9
 80031a6:	4306      	orrs	r6, r0
 80031a8:	3568      	adds	r5, #104	; 0x68
 80031aa:	e7ee      	b.n	800318a <_fwalk_reent+0x1a>

080031ac <__swhatbuf_r>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	460e      	mov	r6, r1
 80031b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031b4:	2900      	cmp	r1, #0
 80031b6:	b090      	sub	sp, #64	; 0x40
 80031b8:	4614      	mov	r4, r2
 80031ba:	461d      	mov	r5, r3
 80031bc:	da07      	bge.n	80031ce <__swhatbuf_r+0x22>
 80031be:	2300      	movs	r3, #0
 80031c0:	602b      	str	r3, [r5, #0]
 80031c2:	89b3      	ldrh	r3, [r6, #12]
 80031c4:	061a      	lsls	r2, r3, #24
 80031c6:	d410      	bmi.n	80031ea <__swhatbuf_r+0x3e>
 80031c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031cc:	e00e      	b.n	80031ec <__swhatbuf_r+0x40>
 80031ce:	aa01      	add	r2, sp, #4
 80031d0:	f000 fd98 	bl	8003d04 <_fstat_r>
 80031d4:	2800      	cmp	r0, #0
 80031d6:	dbf2      	blt.n	80031be <__swhatbuf_r+0x12>
 80031d8:	9a02      	ldr	r2, [sp, #8]
 80031da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031e2:	425a      	negs	r2, r3
 80031e4:	415a      	adcs	r2, r3
 80031e6:	602a      	str	r2, [r5, #0]
 80031e8:	e7ee      	b.n	80031c8 <__swhatbuf_r+0x1c>
 80031ea:	2340      	movs	r3, #64	; 0x40
 80031ec:	2000      	movs	r0, #0
 80031ee:	6023      	str	r3, [r4, #0]
 80031f0:	b010      	add	sp, #64	; 0x40
 80031f2:	bd70      	pop	{r4, r5, r6, pc}

080031f4 <__smakebuf_r>:
 80031f4:	898b      	ldrh	r3, [r1, #12]
 80031f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031f8:	079d      	lsls	r5, r3, #30
 80031fa:	4606      	mov	r6, r0
 80031fc:	460c      	mov	r4, r1
 80031fe:	d507      	bpl.n	8003210 <__smakebuf_r+0x1c>
 8003200:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003204:	6023      	str	r3, [r4, #0]
 8003206:	6123      	str	r3, [r4, #16]
 8003208:	2301      	movs	r3, #1
 800320a:	6163      	str	r3, [r4, #20]
 800320c:	b002      	add	sp, #8
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	ab01      	add	r3, sp, #4
 8003212:	466a      	mov	r2, sp
 8003214:	f7ff ffca 	bl	80031ac <__swhatbuf_r>
 8003218:	9900      	ldr	r1, [sp, #0]
 800321a:	4605      	mov	r5, r0
 800321c:	4630      	mov	r0, r6
 800321e:	f000 f877 	bl	8003310 <_malloc_r>
 8003222:	b948      	cbnz	r0, 8003238 <__smakebuf_r+0x44>
 8003224:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003228:	059a      	lsls	r2, r3, #22
 800322a:	d4ef      	bmi.n	800320c <__smakebuf_r+0x18>
 800322c:	f023 0303 	bic.w	r3, r3, #3
 8003230:	f043 0302 	orr.w	r3, r3, #2
 8003234:	81a3      	strh	r3, [r4, #12]
 8003236:	e7e3      	b.n	8003200 <__smakebuf_r+0xc>
 8003238:	4b0d      	ldr	r3, [pc, #52]	; (8003270 <__smakebuf_r+0x7c>)
 800323a:	62b3      	str	r3, [r6, #40]	; 0x28
 800323c:	89a3      	ldrh	r3, [r4, #12]
 800323e:	6020      	str	r0, [r4, #0]
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	81a3      	strh	r3, [r4, #12]
 8003246:	9b00      	ldr	r3, [sp, #0]
 8003248:	6163      	str	r3, [r4, #20]
 800324a:	9b01      	ldr	r3, [sp, #4]
 800324c:	6120      	str	r0, [r4, #16]
 800324e:	b15b      	cbz	r3, 8003268 <__smakebuf_r+0x74>
 8003250:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003254:	4630      	mov	r0, r6
 8003256:	f000 fd67 	bl	8003d28 <_isatty_r>
 800325a:	b128      	cbz	r0, 8003268 <__smakebuf_r+0x74>
 800325c:	89a3      	ldrh	r3, [r4, #12]
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	81a3      	strh	r3, [r4, #12]
 8003268:	89a3      	ldrh	r3, [r4, #12]
 800326a:	431d      	orrs	r5, r3
 800326c:	81a5      	strh	r5, [r4, #12]
 800326e:	e7cd      	b.n	800320c <__smakebuf_r+0x18>
 8003270:	08003019 	.word	0x08003019

08003274 <_free_r>:
 8003274:	b538      	push	{r3, r4, r5, lr}
 8003276:	4605      	mov	r5, r0
 8003278:	2900      	cmp	r1, #0
 800327a:	d045      	beq.n	8003308 <_free_r+0x94>
 800327c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003280:	1f0c      	subs	r4, r1, #4
 8003282:	2b00      	cmp	r3, #0
 8003284:	bfb8      	it	lt
 8003286:	18e4      	addlt	r4, r4, r3
 8003288:	f000 fd8a 	bl	8003da0 <__malloc_lock>
 800328c:	4a1f      	ldr	r2, [pc, #124]	; (800330c <_free_r+0x98>)
 800328e:	6813      	ldr	r3, [r2, #0]
 8003290:	4610      	mov	r0, r2
 8003292:	b933      	cbnz	r3, 80032a2 <_free_r+0x2e>
 8003294:	6063      	str	r3, [r4, #4]
 8003296:	6014      	str	r4, [r2, #0]
 8003298:	4628      	mov	r0, r5
 800329a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800329e:	f000 bd80 	b.w	8003da2 <__malloc_unlock>
 80032a2:	42a3      	cmp	r3, r4
 80032a4:	d90c      	bls.n	80032c0 <_free_r+0x4c>
 80032a6:	6821      	ldr	r1, [r4, #0]
 80032a8:	1862      	adds	r2, r4, r1
 80032aa:	4293      	cmp	r3, r2
 80032ac:	bf04      	itt	eq
 80032ae:	681a      	ldreq	r2, [r3, #0]
 80032b0:	685b      	ldreq	r3, [r3, #4]
 80032b2:	6063      	str	r3, [r4, #4]
 80032b4:	bf04      	itt	eq
 80032b6:	1852      	addeq	r2, r2, r1
 80032b8:	6022      	streq	r2, [r4, #0]
 80032ba:	6004      	str	r4, [r0, #0]
 80032bc:	e7ec      	b.n	8003298 <_free_r+0x24>
 80032be:	4613      	mov	r3, r2
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	b10a      	cbz	r2, 80032c8 <_free_r+0x54>
 80032c4:	42a2      	cmp	r2, r4
 80032c6:	d9fa      	bls.n	80032be <_free_r+0x4a>
 80032c8:	6819      	ldr	r1, [r3, #0]
 80032ca:	1858      	adds	r0, r3, r1
 80032cc:	42a0      	cmp	r0, r4
 80032ce:	d10b      	bne.n	80032e8 <_free_r+0x74>
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	4401      	add	r1, r0
 80032d4:	1858      	adds	r0, r3, r1
 80032d6:	4282      	cmp	r2, r0
 80032d8:	6019      	str	r1, [r3, #0]
 80032da:	d1dd      	bne.n	8003298 <_free_r+0x24>
 80032dc:	6810      	ldr	r0, [r2, #0]
 80032de:	6852      	ldr	r2, [r2, #4]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	4401      	add	r1, r0
 80032e4:	6019      	str	r1, [r3, #0]
 80032e6:	e7d7      	b.n	8003298 <_free_r+0x24>
 80032e8:	d902      	bls.n	80032f0 <_free_r+0x7c>
 80032ea:	230c      	movs	r3, #12
 80032ec:	602b      	str	r3, [r5, #0]
 80032ee:	e7d3      	b.n	8003298 <_free_r+0x24>
 80032f0:	6820      	ldr	r0, [r4, #0]
 80032f2:	1821      	adds	r1, r4, r0
 80032f4:	428a      	cmp	r2, r1
 80032f6:	bf04      	itt	eq
 80032f8:	6811      	ldreq	r1, [r2, #0]
 80032fa:	6852      	ldreq	r2, [r2, #4]
 80032fc:	6062      	str	r2, [r4, #4]
 80032fe:	bf04      	itt	eq
 8003300:	1809      	addeq	r1, r1, r0
 8003302:	6021      	streq	r1, [r4, #0]
 8003304:	605c      	str	r4, [r3, #4]
 8003306:	e7c7      	b.n	8003298 <_free_r+0x24>
 8003308:	bd38      	pop	{r3, r4, r5, pc}
 800330a:	bf00      	nop
 800330c:	20000434 	.word	0x20000434

08003310 <_malloc_r>:
 8003310:	b570      	push	{r4, r5, r6, lr}
 8003312:	1ccd      	adds	r5, r1, #3
 8003314:	f025 0503 	bic.w	r5, r5, #3
 8003318:	3508      	adds	r5, #8
 800331a:	2d0c      	cmp	r5, #12
 800331c:	bf38      	it	cc
 800331e:	250c      	movcc	r5, #12
 8003320:	2d00      	cmp	r5, #0
 8003322:	4606      	mov	r6, r0
 8003324:	db01      	blt.n	800332a <_malloc_r+0x1a>
 8003326:	42a9      	cmp	r1, r5
 8003328:	d903      	bls.n	8003332 <_malloc_r+0x22>
 800332a:	230c      	movs	r3, #12
 800332c:	6033      	str	r3, [r6, #0]
 800332e:	2000      	movs	r0, #0
 8003330:	bd70      	pop	{r4, r5, r6, pc}
 8003332:	f000 fd35 	bl	8003da0 <__malloc_lock>
 8003336:	4a23      	ldr	r2, [pc, #140]	; (80033c4 <_malloc_r+0xb4>)
 8003338:	6814      	ldr	r4, [r2, #0]
 800333a:	4621      	mov	r1, r4
 800333c:	b991      	cbnz	r1, 8003364 <_malloc_r+0x54>
 800333e:	4c22      	ldr	r4, [pc, #136]	; (80033c8 <_malloc_r+0xb8>)
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	b91b      	cbnz	r3, 800334c <_malloc_r+0x3c>
 8003344:	4630      	mov	r0, r6
 8003346:	f000 fc67 	bl	8003c18 <_sbrk_r>
 800334a:	6020      	str	r0, [r4, #0]
 800334c:	4629      	mov	r1, r5
 800334e:	4630      	mov	r0, r6
 8003350:	f000 fc62 	bl	8003c18 <_sbrk_r>
 8003354:	1c43      	adds	r3, r0, #1
 8003356:	d126      	bne.n	80033a6 <_malloc_r+0x96>
 8003358:	230c      	movs	r3, #12
 800335a:	6033      	str	r3, [r6, #0]
 800335c:	4630      	mov	r0, r6
 800335e:	f000 fd20 	bl	8003da2 <__malloc_unlock>
 8003362:	e7e4      	b.n	800332e <_malloc_r+0x1e>
 8003364:	680b      	ldr	r3, [r1, #0]
 8003366:	1b5b      	subs	r3, r3, r5
 8003368:	d41a      	bmi.n	80033a0 <_malloc_r+0x90>
 800336a:	2b0b      	cmp	r3, #11
 800336c:	d90f      	bls.n	800338e <_malloc_r+0x7e>
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	50cd      	str	r5, [r1, r3]
 8003372:	18cc      	adds	r4, r1, r3
 8003374:	4630      	mov	r0, r6
 8003376:	f000 fd14 	bl	8003da2 <__malloc_unlock>
 800337a:	f104 000b 	add.w	r0, r4, #11
 800337e:	1d23      	adds	r3, r4, #4
 8003380:	f020 0007 	bic.w	r0, r0, #7
 8003384:	1ac3      	subs	r3, r0, r3
 8003386:	d01b      	beq.n	80033c0 <_malloc_r+0xb0>
 8003388:	425a      	negs	r2, r3
 800338a:	50e2      	str	r2, [r4, r3]
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	428c      	cmp	r4, r1
 8003390:	bf0d      	iteet	eq
 8003392:	6863      	ldreq	r3, [r4, #4]
 8003394:	684b      	ldrne	r3, [r1, #4]
 8003396:	6063      	strne	r3, [r4, #4]
 8003398:	6013      	streq	r3, [r2, #0]
 800339a:	bf18      	it	ne
 800339c:	460c      	movne	r4, r1
 800339e:	e7e9      	b.n	8003374 <_malloc_r+0x64>
 80033a0:	460c      	mov	r4, r1
 80033a2:	6849      	ldr	r1, [r1, #4]
 80033a4:	e7ca      	b.n	800333c <_malloc_r+0x2c>
 80033a6:	1cc4      	adds	r4, r0, #3
 80033a8:	f024 0403 	bic.w	r4, r4, #3
 80033ac:	42a0      	cmp	r0, r4
 80033ae:	d005      	beq.n	80033bc <_malloc_r+0xac>
 80033b0:	1a21      	subs	r1, r4, r0
 80033b2:	4630      	mov	r0, r6
 80033b4:	f000 fc30 	bl	8003c18 <_sbrk_r>
 80033b8:	3001      	adds	r0, #1
 80033ba:	d0cd      	beq.n	8003358 <_malloc_r+0x48>
 80033bc:	6025      	str	r5, [r4, #0]
 80033be:	e7d9      	b.n	8003374 <_malloc_r+0x64>
 80033c0:	bd70      	pop	{r4, r5, r6, pc}
 80033c2:	bf00      	nop
 80033c4:	20000434 	.word	0x20000434
 80033c8:	20000438 	.word	0x20000438

080033cc <__ssputs_r>:
 80033cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033d0:	688e      	ldr	r6, [r1, #8]
 80033d2:	429e      	cmp	r6, r3
 80033d4:	4682      	mov	sl, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	4691      	mov	r9, r2
 80033da:	4698      	mov	r8, r3
 80033dc:	d835      	bhi.n	800344a <__ssputs_r+0x7e>
 80033de:	898a      	ldrh	r2, [r1, #12]
 80033e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80033e4:	d031      	beq.n	800344a <__ssputs_r+0x7e>
 80033e6:	6825      	ldr	r5, [r4, #0]
 80033e8:	6909      	ldr	r1, [r1, #16]
 80033ea:	1a6f      	subs	r7, r5, r1
 80033ec:	6965      	ldr	r5, [r4, #20]
 80033ee:	2302      	movs	r3, #2
 80033f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80033f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80033f8:	f108 0301 	add.w	r3, r8, #1
 80033fc:	443b      	add	r3, r7
 80033fe:	429d      	cmp	r5, r3
 8003400:	bf38      	it	cc
 8003402:	461d      	movcc	r5, r3
 8003404:	0553      	lsls	r3, r2, #21
 8003406:	d531      	bpl.n	800346c <__ssputs_r+0xa0>
 8003408:	4629      	mov	r1, r5
 800340a:	f7ff ff81 	bl	8003310 <_malloc_r>
 800340e:	4606      	mov	r6, r0
 8003410:	b950      	cbnz	r0, 8003428 <__ssputs_r+0x5c>
 8003412:	230c      	movs	r3, #12
 8003414:	f8ca 3000 	str.w	r3, [sl]
 8003418:	89a3      	ldrh	r3, [r4, #12]
 800341a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	f04f 30ff 	mov.w	r0, #4294967295
 8003424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003428:	463a      	mov	r2, r7
 800342a:	6921      	ldr	r1, [r4, #16]
 800342c:	f7ff fbae 	bl	8002b8c <memcpy>
 8003430:	89a3      	ldrh	r3, [r4, #12]
 8003432:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800343a:	81a3      	strh	r3, [r4, #12]
 800343c:	6126      	str	r6, [r4, #16]
 800343e:	6165      	str	r5, [r4, #20]
 8003440:	443e      	add	r6, r7
 8003442:	1bed      	subs	r5, r5, r7
 8003444:	6026      	str	r6, [r4, #0]
 8003446:	60a5      	str	r5, [r4, #8]
 8003448:	4646      	mov	r6, r8
 800344a:	4546      	cmp	r6, r8
 800344c:	bf28      	it	cs
 800344e:	4646      	movcs	r6, r8
 8003450:	4632      	mov	r2, r6
 8003452:	4649      	mov	r1, r9
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	f000 fc89 	bl	8003d6c <memmove>
 800345a:	68a3      	ldr	r3, [r4, #8]
 800345c:	1b9b      	subs	r3, r3, r6
 800345e:	60a3      	str	r3, [r4, #8]
 8003460:	6823      	ldr	r3, [r4, #0]
 8003462:	441e      	add	r6, r3
 8003464:	6026      	str	r6, [r4, #0]
 8003466:	2000      	movs	r0, #0
 8003468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800346c:	462a      	mov	r2, r5
 800346e:	f000 fc99 	bl	8003da4 <_realloc_r>
 8003472:	4606      	mov	r6, r0
 8003474:	2800      	cmp	r0, #0
 8003476:	d1e1      	bne.n	800343c <__ssputs_r+0x70>
 8003478:	6921      	ldr	r1, [r4, #16]
 800347a:	4650      	mov	r0, sl
 800347c:	f7ff fefa 	bl	8003274 <_free_r>
 8003480:	e7c7      	b.n	8003412 <__ssputs_r+0x46>
	...

08003484 <_svfiprintf_r>:
 8003484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003488:	b09d      	sub	sp, #116	; 0x74
 800348a:	4680      	mov	r8, r0
 800348c:	9303      	str	r3, [sp, #12]
 800348e:	898b      	ldrh	r3, [r1, #12]
 8003490:	061c      	lsls	r4, r3, #24
 8003492:	460d      	mov	r5, r1
 8003494:	4616      	mov	r6, r2
 8003496:	d50f      	bpl.n	80034b8 <_svfiprintf_r+0x34>
 8003498:	690b      	ldr	r3, [r1, #16]
 800349a:	b96b      	cbnz	r3, 80034b8 <_svfiprintf_r+0x34>
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	f7ff ff37 	bl	8003310 <_malloc_r>
 80034a2:	6028      	str	r0, [r5, #0]
 80034a4:	6128      	str	r0, [r5, #16]
 80034a6:	b928      	cbnz	r0, 80034b4 <_svfiprintf_r+0x30>
 80034a8:	230c      	movs	r3, #12
 80034aa:	f8c8 3000 	str.w	r3, [r8]
 80034ae:	f04f 30ff 	mov.w	r0, #4294967295
 80034b2:	e0c5      	b.n	8003640 <_svfiprintf_r+0x1bc>
 80034b4:	2340      	movs	r3, #64	; 0x40
 80034b6:	616b      	str	r3, [r5, #20]
 80034b8:	2300      	movs	r3, #0
 80034ba:	9309      	str	r3, [sp, #36]	; 0x24
 80034bc:	2320      	movs	r3, #32
 80034be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034c2:	2330      	movs	r3, #48	; 0x30
 80034c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034c8:	f04f 0b01 	mov.w	fp, #1
 80034cc:	4637      	mov	r7, r6
 80034ce:	463c      	mov	r4, r7
 80034d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d13c      	bne.n	8003552 <_svfiprintf_r+0xce>
 80034d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80034dc:	d00b      	beq.n	80034f6 <_svfiprintf_r+0x72>
 80034de:	4653      	mov	r3, sl
 80034e0:	4632      	mov	r2, r6
 80034e2:	4629      	mov	r1, r5
 80034e4:	4640      	mov	r0, r8
 80034e6:	f7ff ff71 	bl	80033cc <__ssputs_r>
 80034ea:	3001      	adds	r0, #1
 80034ec:	f000 80a3 	beq.w	8003636 <_svfiprintf_r+0x1b2>
 80034f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034f2:	4453      	add	r3, sl
 80034f4:	9309      	str	r3, [sp, #36]	; 0x24
 80034f6:	783b      	ldrb	r3, [r7, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 809c 	beq.w	8003636 <_svfiprintf_r+0x1b2>
 80034fe:	2300      	movs	r3, #0
 8003500:	f04f 32ff 	mov.w	r2, #4294967295
 8003504:	9304      	str	r3, [sp, #16]
 8003506:	9307      	str	r3, [sp, #28]
 8003508:	9205      	str	r2, [sp, #20]
 800350a:	9306      	str	r3, [sp, #24]
 800350c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003510:	931a      	str	r3, [sp, #104]	; 0x68
 8003512:	2205      	movs	r2, #5
 8003514:	7821      	ldrb	r1, [r4, #0]
 8003516:	4850      	ldr	r0, [pc, #320]	; (8003658 <_svfiprintf_r+0x1d4>)
 8003518:	f7fc fe6a 	bl	80001f0 <memchr>
 800351c:	1c67      	adds	r7, r4, #1
 800351e:	9b04      	ldr	r3, [sp, #16]
 8003520:	b9d8      	cbnz	r0, 800355a <_svfiprintf_r+0xd6>
 8003522:	06d9      	lsls	r1, r3, #27
 8003524:	bf44      	itt	mi
 8003526:	2220      	movmi	r2, #32
 8003528:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800352c:	071a      	lsls	r2, r3, #28
 800352e:	bf44      	itt	mi
 8003530:	222b      	movmi	r2, #43	; 0x2b
 8003532:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003536:	7822      	ldrb	r2, [r4, #0]
 8003538:	2a2a      	cmp	r2, #42	; 0x2a
 800353a:	d016      	beq.n	800356a <_svfiprintf_r+0xe6>
 800353c:	9a07      	ldr	r2, [sp, #28]
 800353e:	2100      	movs	r1, #0
 8003540:	200a      	movs	r0, #10
 8003542:	4627      	mov	r7, r4
 8003544:	3401      	adds	r4, #1
 8003546:	783b      	ldrb	r3, [r7, #0]
 8003548:	3b30      	subs	r3, #48	; 0x30
 800354a:	2b09      	cmp	r3, #9
 800354c:	d951      	bls.n	80035f2 <_svfiprintf_r+0x16e>
 800354e:	b1c9      	cbz	r1, 8003584 <_svfiprintf_r+0x100>
 8003550:	e011      	b.n	8003576 <_svfiprintf_r+0xf2>
 8003552:	2b25      	cmp	r3, #37	; 0x25
 8003554:	d0c0      	beq.n	80034d8 <_svfiprintf_r+0x54>
 8003556:	4627      	mov	r7, r4
 8003558:	e7b9      	b.n	80034ce <_svfiprintf_r+0x4a>
 800355a:	4a3f      	ldr	r2, [pc, #252]	; (8003658 <_svfiprintf_r+0x1d4>)
 800355c:	1a80      	subs	r0, r0, r2
 800355e:	fa0b f000 	lsl.w	r0, fp, r0
 8003562:	4318      	orrs	r0, r3
 8003564:	9004      	str	r0, [sp, #16]
 8003566:	463c      	mov	r4, r7
 8003568:	e7d3      	b.n	8003512 <_svfiprintf_r+0x8e>
 800356a:	9a03      	ldr	r2, [sp, #12]
 800356c:	1d11      	adds	r1, r2, #4
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	9103      	str	r1, [sp, #12]
 8003572:	2a00      	cmp	r2, #0
 8003574:	db01      	blt.n	800357a <_svfiprintf_r+0xf6>
 8003576:	9207      	str	r2, [sp, #28]
 8003578:	e004      	b.n	8003584 <_svfiprintf_r+0x100>
 800357a:	4252      	negs	r2, r2
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	9207      	str	r2, [sp, #28]
 8003582:	9304      	str	r3, [sp, #16]
 8003584:	783b      	ldrb	r3, [r7, #0]
 8003586:	2b2e      	cmp	r3, #46	; 0x2e
 8003588:	d10e      	bne.n	80035a8 <_svfiprintf_r+0x124>
 800358a:	787b      	ldrb	r3, [r7, #1]
 800358c:	2b2a      	cmp	r3, #42	; 0x2a
 800358e:	f107 0101 	add.w	r1, r7, #1
 8003592:	d132      	bne.n	80035fa <_svfiprintf_r+0x176>
 8003594:	9b03      	ldr	r3, [sp, #12]
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	9203      	str	r2, [sp, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	bfb8      	it	lt
 80035a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80035a4:	3702      	adds	r7, #2
 80035a6:	9305      	str	r3, [sp, #20]
 80035a8:	4c2c      	ldr	r4, [pc, #176]	; (800365c <_svfiprintf_r+0x1d8>)
 80035aa:	7839      	ldrb	r1, [r7, #0]
 80035ac:	2203      	movs	r2, #3
 80035ae:	4620      	mov	r0, r4
 80035b0:	f7fc fe1e 	bl	80001f0 <memchr>
 80035b4:	b138      	cbz	r0, 80035c6 <_svfiprintf_r+0x142>
 80035b6:	2340      	movs	r3, #64	; 0x40
 80035b8:	1b00      	subs	r0, r0, r4
 80035ba:	fa03 f000 	lsl.w	r0, r3, r0
 80035be:	9b04      	ldr	r3, [sp, #16]
 80035c0:	4303      	orrs	r3, r0
 80035c2:	9304      	str	r3, [sp, #16]
 80035c4:	3701      	adds	r7, #1
 80035c6:	7839      	ldrb	r1, [r7, #0]
 80035c8:	4825      	ldr	r0, [pc, #148]	; (8003660 <_svfiprintf_r+0x1dc>)
 80035ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80035ce:	2206      	movs	r2, #6
 80035d0:	1c7e      	adds	r6, r7, #1
 80035d2:	f7fc fe0d 	bl	80001f0 <memchr>
 80035d6:	2800      	cmp	r0, #0
 80035d8:	d035      	beq.n	8003646 <_svfiprintf_r+0x1c2>
 80035da:	4b22      	ldr	r3, [pc, #136]	; (8003664 <_svfiprintf_r+0x1e0>)
 80035dc:	b9fb      	cbnz	r3, 800361e <_svfiprintf_r+0x19a>
 80035de:	9b03      	ldr	r3, [sp, #12]
 80035e0:	3307      	adds	r3, #7
 80035e2:	f023 0307 	bic.w	r3, r3, #7
 80035e6:	3308      	adds	r3, #8
 80035e8:	9303      	str	r3, [sp, #12]
 80035ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035ec:	444b      	add	r3, r9
 80035ee:	9309      	str	r3, [sp, #36]	; 0x24
 80035f0:	e76c      	b.n	80034cc <_svfiprintf_r+0x48>
 80035f2:	fb00 3202 	mla	r2, r0, r2, r3
 80035f6:	2101      	movs	r1, #1
 80035f8:	e7a3      	b.n	8003542 <_svfiprintf_r+0xbe>
 80035fa:	2300      	movs	r3, #0
 80035fc:	9305      	str	r3, [sp, #20]
 80035fe:	4618      	mov	r0, r3
 8003600:	240a      	movs	r4, #10
 8003602:	460f      	mov	r7, r1
 8003604:	3101      	adds	r1, #1
 8003606:	783a      	ldrb	r2, [r7, #0]
 8003608:	3a30      	subs	r2, #48	; 0x30
 800360a:	2a09      	cmp	r2, #9
 800360c:	d903      	bls.n	8003616 <_svfiprintf_r+0x192>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0ca      	beq.n	80035a8 <_svfiprintf_r+0x124>
 8003612:	9005      	str	r0, [sp, #20]
 8003614:	e7c8      	b.n	80035a8 <_svfiprintf_r+0x124>
 8003616:	fb04 2000 	mla	r0, r4, r0, r2
 800361a:	2301      	movs	r3, #1
 800361c:	e7f1      	b.n	8003602 <_svfiprintf_r+0x17e>
 800361e:	ab03      	add	r3, sp, #12
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	462a      	mov	r2, r5
 8003624:	4b10      	ldr	r3, [pc, #64]	; (8003668 <_svfiprintf_r+0x1e4>)
 8003626:	a904      	add	r1, sp, #16
 8003628:	4640      	mov	r0, r8
 800362a:	f3af 8000 	nop.w
 800362e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003632:	4681      	mov	r9, r0
 8003634:	d1d9      	bne.n	80035ea <_svfiprintf_r+0x166>
 8003636:	89ab      	ldrh	r3, [r5, #12]
 8003638:	065b      	lsls	r3, r3, #25
 800363a:	f53f af38 	bmi.w	80034ae <_svfiprintf_r+0x2a>
 800363e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003640:	b01d      	add	sp, #116	; 0x74
 8003642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003646:	ab03      	add	r3, sp, #12
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	462a      	mov	r2, r5
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <_svfiprintf_r+0x1e4>)
 800364e:	a904      	add	r1, sp, #16
 8003650:	4640      	mov	r0, r8
 8003652:	f000 f9c1 	bl	80039d8 <_printf_i>
 8003656:	e7ea      	b.n	800362e <_svfiprintf_r+0x1aa>
 8003658:	080049e4 	.word	0x080049e4
 800365c:	080049ea 	.word	0x080049ea
 8003660:	080049ee 	.word	0x080049ee
 8003664:	00000000 	.word	0x00000000
 8003668:	080033cd 	.word	0x080033cd

0800366c <__sfputc_r>:
 800366c:	6893      	ldr	r3, [r2, #8]
 800366e:	3b01      	subs	r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	b410      	push	{r4}
 8003674:	6093      	str	r3, [r2, #8]
 8003676:	da09      	bge.n	800368c <__sfputc_r+0x20>
 8003678:	6994      	ldr	r4, [r2, #24]
 800367a:	42a3      	cmp	r3, r4
 800367c:	db02      	blt.n	8003684 <__sfputc_r+0x18>
 800367e:	b2cb      	uxtb	r3, r1
 8003680:	2b0a      	cmp	r3, #10
 8003682:	d103      	bne.n	800368c <__sfputc_r+0x20>
 8003684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003688:	f7ff bb46 	b.w	8002d18 <__swbuf_r>
 800368c:	6813      	ldr	r3, [r2, #0]
 800368e:	1c58      	adds	r0, r3, #1
 8003690:	6010      	str	r0, [r2, #0]
 8003692:	7019      	strb	r1, [r3, #0]
 8003694:	b2c8      	uxtb	r0, r1
 8003696:	f85d 4b04 	ldr.w	r4, [sp], #4
 800369a:	4770      	bx	lr

0800369c <__sfputs_r>:
 800369c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369e:	4606      	mov	r6, r0
 80036a0:	460f      	mov	r7, r1
 80036a2:	4614      	mov	r4, r2
 80036a4:	18d5      	adds	r5, r2, r3
 80036a6:	42ac      	cmp	r4, r5
 80036a8:	d101      	bne.n	80036ae <__sfputs_r+0x12>
 80036aa:	2000      	movs	r0, #0
 80036ac:	e007      	b.n	80036be <__sfputs_r+0x22>
 80036ae:	463a      	mov	r2, r7
 80036b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b4:	4630      	mov	r0, r6
 80036b6:	f7ff ffd9 	bl	800366c <__sfputc_r>
 80036ba:	1c43      	adds	r3, r0, #1
 80036bc:	d1f3      	bne.n	80036a6 <__sfputs_r+0xa>
 80036be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036c0 <_vfiprintf_r>:
 80036c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036c4:	b09d      	sub	sp, #116	; 0x74
 80036c6:	460c      	mov	r4, r1
 80036c8:	4617      	mov	r7, r2
 80036ca:	9303      	str	r3, [sp, #12]
 80036cc:	4606      	mov	r6, r0
 80036ce:	b118      	cbz	r0, 80036d8 <_vfiprintf_r+0x18>
 80036d0:	6983      	ldr	r3, [r0, #24]
 80036d2:	b90b      	cbnz	r3, 80036d8 <_vfiprintf_r+0x18>
 80036d4:	f7ff fce0 	bl	8003098 <__sinit>
 80036d8:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <_vfiprintf_r+0x20c>)
 80036da:	429c      	cmp	r4, r3
 80036dc:	d157      	bne.n	800378e <_vfiprintf_r+0xce>
 80036de:	6874      	ldr	r4, [r6, #4]
 80036e0:	89a3      	ldrh	r3, [r4, #12]
 80036e2:	0718      	lsls	r0, r3, #28
 80036e4:	d55d      	bpl.n	80037a2 <_vfiprintf_r+0xe2>
 80036e6:	6923      	ldr	r3, [r4, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d05a      	beq.n	80037a2 <_vfiprintf_r+0xe2>
 80036ec:	2300      	movs	r3, #0
 80036ee:	9309      	str	r3, [sp, #36]	; 0x24
 80036f0:	2320      	movs	r3, #32
 80036f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036f6:	2330      	movs	r3, #48	; 0x30
 80036f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036fc:	f04f 0b01 	mov.w	fp, #1
 8003700:	46b8      	mov	r8, r7
 8003702:	4645      	mov	r5, r8
 8003704:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d155      	bne.n	80037b8 <_vfiprintf_r+0xf8>
 800370c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003710:	d00b      	beq.n	800372a <_vfiprintf_r+0x6a>
 8003712:	4653      	mov	r3, sl
 8003714:	463a      	mov	r2, r7
 8003716:	4621      	mov	r1, r4
 8003718:	4630      	mov	r0, r6
 800371a:	f7ff ffbf 	bl	800369c <__sfputs_r>
 800371e:	3001      	adds	r0, #1
 8003720:	f000 80c4 	beq.w	80038ac <_vfiprintf_r+0x1ec>
 8003724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003726:	4453      	add	r3, sl
 8003728:	9309      	str	r3, [sp, #36]	; 0x24
 800372a:	f898 3000 	ldrb.w	r3, [r8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 80bc 	beq.w	80038ac <_vfiprintf_r+0x1ec>
 8003734:	2300      	movs	r3, #0
 8003736:	f04f 32ff 	mov.w	r2, #4294967295
 800373a:	9304      	str	r3, [sp, #16]
 800373c:	9307      	str	r3, [sp, #28]
 800373e:	9205      	str	r2, [sp, #20]
 8003740:	9306      	str	r3, [sp, #24]
 8003742:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003746:	931a      	str	r3, [sp, #104]	; 0x68
 8003748:	2205      	movs	r2, #5
 800374a:	7829      	ldrb	r1, [r5, #0]
 800374c:	4860      	ldr	r0, [pc, #384]	; (80038d0 <_vfiprintf_r+0x210>)
 800374e:	f7fc fd4f 	bl	80001f0 <memchr>
 8003752:	f105 0801 	add.w	r8, r5, #1
 8003756:	9b04      	ldr	r3, [sp, #16]
 8003758:	2800      	cmp	r0, #0
 800375a:	d131      	bne.n	80037c0 <_vfiprintf_r+0x100>
 800375c:	06d9      	lsls	r1, r3, #27
 800375e:	bf44      	itt	mi
 8003760:	2220      	movmi	r2, #32
 8003762:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003766:	071a      	lsls	r2, r3, #28
 8003768:	bf44      	itt	mi
 800376a:	222b      	movmi	r2, #43	; 0x2b
 800376c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003770:	782a      	ldrb	r2, [r5, #0]
 8003772:	2a2a      	cmp	r2, #42	; 0x2a
 8003774:	d02c      	beq.n	80037d0 <_vfiprintf_r+0x110>
 8003776:	9a07      	ldr	r2, [sp, #28]
 8003778:	2100      	movs	r1, #0
 800377a:	200a      	movs	r0, #10
 800377c:	46a8      	mov	r8, r5
 800377e:	3501      	adds	r5, #1
 8003780:	f898 3000 	ldrb.w	r3, [r8]
 8003784:	3b30      	subs	r3, #48	; 0x30
 8003786:	2b09      	cmp	r3, #9
 8003788:	d96d      	bls.n	8003866 <_vfiprintf_r+0x1a6>
 800378a:	b371      	cbz	r1, 80037ea <_vfiprintf_r+0x12a>
 800378c:	e026      	b.n	80037dc <_vfiprintf_r+0x11c>
 800378e:	4b51      	ldr	r3, [pc, #324]	; (80038d4 <_vfiprintf_r+0x214>)
 8003790:	429c      	cmp	r4, r3
 8003792:	d101      	bne.n	8003798 <_vfiprintf_r+0xd8>
 8003794:	68b4      	ldr	r4, [r6, #8]
 8003796:	e7a3      	b.n	80036e0 <_vfiprintf_r+0x20>
 8003798:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <_vfiprintf_r+0x218>)
 800379a:	429c      	cmp	r4, r3
 800379c:	bf08      	it	eq
 800379e:	68f4      	ldreq	r4, [r6, #12]
 80037a0:	e79e      	b.n	80036e0 <_vfiprintf_r+0x20>
 80037a2:	4621      	mov	r1, r4
 80037a4:	4630      	mov	r0, r6
 80037a6:	f7ff fb17 	bl	8002dd8 <__swsetup_r>
 80037aa:	2800      	cmp	r0, #0
 80037ac:	d09e      	beq.n	80036ec <_vfiprintf_r+0x2c>
 80037ae:	f04f 30ff 	mov.w	r0, #4294967295
 80037b2:	b01d      	add	sp, #116	; 0x74
 80037b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b8:	2b25      	cmp	r3, #37	; 0x25
 80037ba:	d0a7      	beq.n	800370c <_vfiprintf_r+0x4c>
 80037bc:	46a8      	mov	r8, r5
 80037be:	e7a0      	b.n	8003702 <_vfiprintf_r+0x42>
 80037c0:	4a43      	ldr	r2, [pc, #268]	; (80038d0 <_vfiprintf_r+0x210>)
 80037c2:	1a80      	subs	r0, r0, r2
 80037c4:	fa0b f000 	lsl.w	r0, fp, r0
 80037c8:	4318      	orrs	r0, r3
 80037ca:	9004      	str	r0, [sp, #16]
 80037cc:	4645      	mov	r5, r8
 80037ce:	e7bb      	b.n	8003748 <_vfiprintf_r+0x88>
 80037d0:	9a03      	ldr	r2, [sp, #12]
 80037d2:	1d11      	adds	r1, r2, #4
 80037d4:	6812      	ldr	r2, [r2, #0]
 80037d6:	9103      	str	r1, [sp, #12]
 80037d8:	2a00      	cmp	r2, #0
 80037da:	db01      	blt.n	80037e0 <_vfiprintf_r+0x120>
 80037dc:	9207      	str	r2, [sp, #28]
 80037de:	e004      	b.n	80037ea <_vfiprintf_r+0x12a>
 80037e0:	4252      	negs	r2, r2
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	9207      	str	r2, [sp, #28]
 80037e8:	9304      	str	r3, [sp, #16]
 80037ea:	f898 3000 	ldrb.w	r3, [r8]
 80037ee:	2b2e      	cmp	r3, #46	; 0x2e
 80037f0:	d110      	bne.n	8003814 <_vfiprintf_r+0x154>
 80037f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80037f6:	2b2a      	cmp	r3, #42	; 0x2a
 80037f8:	f108 0101 	add.w	r1, r8, #1
 80037fc:	d137      	bne.n	800386e <_vfiprintf_r+0x1ae>
 80037fe:	9b03      	ldr	r3, [sp, #12]
 8003800:	1d1a      	adds	r2, r3, #4
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	9203      	str	r2, [sp, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	bfb8      	it	lt
 800380a:	f04f 33ff 	movlt.w	r3, #4294967295
 800380e:	f108 0802 	add.w	r8, r8, #2
 8003812:	9305      	str	r3, [sp, #20]
 8003814:	4d31      	ldr	r5, [pc, #196]	; (80038dc <_vfiprintf_r+0x21c>)
 8003816:	f898 1000 	ldrb.w	r1, [r8]
 800381a:	2203      	movs	r2, #3
 800381c:	4628      	mov	r0, r5
 800381e:	f7fc fce7 	bl	80001f0 <memchr>
 8003822:	b140      	cbz	r0, 8003836 <_vfiprintf_r+0x176>
 8003824:	2340      	movs	r3, #64	; 0x40
 8003826:	1b40      	subs	r0, r0, r5
 8003828:	fa03 f000 	lsl.w	r0, r3, r0
 800382c:	9b04      	ldr	r3, [sp, #16]
 800382e:	4303      	orrs	r3, r0
 8003830:	9304      	str	r3, [sp, #16]
 8003832:	f108 0801 	add.w	r8, r8, #1
 8003836:	f898 1000 	ldrb.w	r1, [r8]
 800383a:	4829      	ldr	r0, [pc, #164]	; (80038e0 <_vfiprintf_r+0x220>)
 800383c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003840:	2206      	movs	r2, #6
 8003842:	f108 0701 	add.w	r7, r8, #1
 8003846:	f7fc fcd3 	bl	80001f0 <memchr>
 800384a:	2800      	cmp	r0, #0
 800384c:	d034      	beq.n	80038b8 <_vfiprintf_r+0x1f8>
 800384e:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <_vfiprintf_r+0x224>)
 8003850:	bb03      	cbnz	r3, 8003894 <_vfiprintf_r+0x1d4>
 8003852:	9b03      	ldr	r3, [sp, #12]
 8003854:	3307      	adds	r3, #7
 8003856:	f023 0307 	bic.w	r3, r3, #7
 800385a:	3308      	adds	r3, #8
 800385c:	9303      	str	r3, [sp, #12]
 800385e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003860:	444b      	add	r3, r9
 8003862:	9309      	str	r3, [sp, #36]	; 0x24
 8003864:	e74c      	b.n	8003700 <_vfiprintf_r+0x40>
 8003866:	fb00 3202 	mla	r2, r0, r2, r3
 800386a:	2101      	movs	r1, #1
 800386c:	e786      	b.n	800377c <_vfiprintf_r+0xbc>
 800386e:	2300      	movs	r3, #0
 8003870:	9305      	str	r3, [sp, #20]
 8003872:	4618      	mov	r0, r3
 8003874:	250a      	movs	r5, #10
 8003876:	4688      	mov	r8, r1
 8003878:	3101      	adds	r1, #1
 800387a:	f898 2000 	ldrb.w	r2, [r8]
 800387e:	3a30      	subs	r2, #48	; 0x30
 8003880:	2a09      	cmp	r2, #9
 8003882:	d903      	bls.n	800388c <_vfiprintf_r+0x1cc>
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0c5      	beq.n	8003814 <_vfiprintf_r+0x154>
 8003888:	9005      	str	r0, [sp, #20]
 800388a:	e7c3      	b.n	8003814 <_vfiprintf_r+0x154>
 800388c:	fb05 2000 	mla	r0, r5, r0, r2
 8003890:	2301      	movs	r3, #1
 8003892:	e7f0      	b.n	8003876 <_vfiprintf_r+0x1b6>
 8003894:	ab03      	add	r3, sp, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	4622      	mov	r2, r4
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <_vfiprintf_r+0x228>)
 800389c:	a904      	add	r1, sp, #16
 800389e:	4630      	mov	r0, r6
 80038a0:	f3af 8000 	nop.w
 80038a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80038a8:	4681      	mov	r9, r0
 80038aa:	d1d8      	bne.n	800385e <_vfiprintf_r+0x19e>
 80038ac:	89a3      	ldrh	r3, [r4, #12]
 80038ae:	065b      	lsls	r3, r3, #25
 80038b0:	f53f af7d 	bmi.w	80037ae <_vfiprintf_r+0xee>
 80038b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b6:	e77c      	b.n	80037b2 <_vfiprintf_r+0xf2>
 80038b8:	ab03      	add	r3, sp, #12
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	4622      	mov	r2, r4
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <_vfiprintf_r+0x228>)
 80038c0:	a904      	add	r1, sp, #16
 80038c2:	4630      	mov	r0, r6
 80038c4:	f000 f888 	bl	80039d8 <_printf_i>
 80038c8:	e7ec      	b.n	80038a4 <_vfiprintf_r+0x1e4>
 80038ca:	bf00      	nop
 80038cc:	080049a4 	.word	0x080049a4
 80038d0:	080049e4 	.word	0x080049e4
 80038d4:	080049c4 	.word	0x080049c4
 80038d8:	08004984 	.word	0x08004984
 80038dc:	080049ea 	.word	0x080049ea
 80038e0:	080049ee 	.word	0x080049ee
 80038e4:	00000000 	.word	0x00000000
 80038e8:	0800369d 	.word	0x0800369d

080038ec <_printf_common>:
 80038ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f0:	4691      	mov	r9, r2
 80038f2:	461f      	mov	r7, r3
 80038f4:	688a      	ldr	r2, [r1, #8]
 80038f6:	690b      	ldr	r3, [r1, #16]
 80038f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038fc:	4293      	cmp	r3, r2
 80038fe:	bfb8      	it	lt
 8003900:	4613      	movlt	r3, r2
 8003902:	f8c9 3000 	str.w	r3, [r9]
 8003906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800390a:	4606      	mov	r6, r0
 800390c:	460c      	mov	r4, r1
 800390e:	b112      	cbz	r2, 8003916 <_printf_common+0x2a>
 8003910:	3301      	adds	r3, #1
 8003912:	f8c9 3000 	str.w	r3, [r9]
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	0699      	lsls	r1, r3, #26
 800391a:	bf42      	ittt	mi
 800391c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003920:	3302      	addmi	r3, #2
 8003922:	f8c9 3000 	strmi.w	r3, [r9]
 8003926:	6825      	ldr	r5, [r4, #0]
 8003928:	f015 0506 	ands.w	r5, r5, #6
 800392c:	d107      	bne.n	800393e <_printf_common+0x52>
 800392e:	f104 0a19 	add.w	sl, r4, #25
 8003932:	68e3      	ldr	r3, [r4, #12]
 8003934:	f8d9 2000 	ldr.w	r2, [r9]
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	429d      	cmp	r5, r3
 800393c:	db29      	blt.n	8003992 <_printf_common+0xa6>
 800393e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	3300      	adds	r3, #0
 8003946:	bf18      	it	ne
 8003948:	2301      	movne	r3, #1
 800394a:	0692      	lsls	r2, r2, #26
 800394c:	d42e      	bmi.n	80039ac <_printf_common+0xc0>
 800394e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003952:	4639      	mov	r1, r7
 8003954:	4630      	mov	r0, r6
 8003956:	47c0      	blx	r8
 8003958:	3001      	adds	r0, #1
 800395a:	d021      	beq.n	80039a0 <_printf_common+0xb4>
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	68e5      	ldr	r5, [r4, #12]
 8003960:	f8d9 2000 	ldr.w	r2, [r9]
 8003964:	f003 0306 	and.w	r3, r3, #6
 8003968:	2b04      	cmp	r3, #4
 800396a:	bf08      	it	eq
 800396c:	1aad      	subeq	r5, r5, r2
 800396e:	68a3      	ldr	r3, [r4, #8]
 8003970:	6922      	ldr	r2, [r4, #16]
 8003972:	bf0c      	ite	eq
 8003974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003978:	2500      	movne	r5, #0
 800397a:	4293      	cmp	r3, r2
 800397c:	bfc4      	itt	gt
 800397e:	1a9b      	subgt	r3, r3, r2
 8003980:	18ed      	addgt	r5, r5, r3
 8003982:	f04f 0900 	mov.w	r9, #0
 8003986:	341a      	adds	r4, #26
 8003988:	454d      	cmp	r5, r9
 800398a:	d11b      	bne.n	80039c4 <_printf_common+0xd8>
 800398c:	2000      	movs	r0, #0
 800398e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003992:	2301      	movs	r3, #1
 8003994:	4652      	mov	r2, sl
 8003996:	4639      	mov	r1, r7
 8003998:	4630      	mov	r0, r6
 800399a:	47c0      	blx	r8
 800399c:	3001      	adds	r0, #1
 800399e:	d103      	bne.n	80039a8 <_printf_common+0xbc>
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039a8:	3501      	adds	r5, #1
 80039aa:	e7c2      	b.n	8003932 <_printf_common+0x46>
 80039ac:	18e1      	adds	r1, r4, r3
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	2030      	movs	r0, #48	; 0x30
 80039b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039b6:	4422      	add	r2, r4
 80039b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039c0:	3302      	adds	r3, #2
 80039c2:	e7c4      	b.n	800394e <_printf_common+0x62>
 80039c4:	2301      	movs	r3, #1
 80039c6:	4622      	mov	r2, r4
 80039c8:	4639      	mov	r1, r7
 80039ca:	4630      	mov	r0, r6
 80039cc:	47c0      	blx	r8
 80039ce:	3001      	adds	r0, #1
 80039d0:	d0e6      	beq.n	80039a0 <_printf_common+0xb4>
 80039d2:	f109 0901 	add.w	r9, r9, #1
 80039d6:	e7d7      	b.n	8003988 <_printf_common+0x9c>

080039d8 <_printf_i>:
 80039d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80039dc:	4617      	mov	r7, r2
 80039de:	7e0a      	ldrb	r2, [r1, #24]
 80039e0:	b085      	sub	sp, #20
 80039e2:	2a6e      	cmp	r2, #110	; 0x6e
 80039e4:	4698      	mov	r8, r3
 80039e6:	4606      	mov	r6, r0
 80039e8:	460c      	mov	r4, r1
 80039ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80039f0:	f000 80bc 	beq.w	8003b6c <_printf_i+0x194>
 80039f4:	d81a      	bhi.n	8003a2c <_printf_i+0x54>
 80039f6:	2a63      	cmp	r2, #99	; 0x63
 80039f8:	d02e      	beq.n	8003a58 <_printf_i+0x80>
 80039fa:	d80a      	bhi.n	8003a12 <_printf_i+0x3a>
 80039fc:	2a00      	cmp	r2, #0
 80039fe:	f000 80c8 	beq.w	8003b92 <_printf_i+0x1ba>
 8003a02:	2a58      	cmp	r2, #88	; 0x58
 8003a04:	f000 808a 	beq.w	8003b1c <_printf_i+0x144>
 8003a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a0c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003a10:	e02a      	b.n	8003a68 <_printf_i+0x90>
 8003a12:	2a64      	cmp	r2, #100	; 0x64
 8003a14:	d001      	beq.n	8003a1a <_printf_i+0x42>
 8003a16:	2a69      	cmp	r2, #105	; 0x69
 8003a18:	d1f6      	bne.n	8003a08 <_printf_i+0x30>
 8003a1a:	6821      	ldr	r1, [r4, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003a22:	d023      	beq.n	8003a6c <_printf_i+0x94>
 8003a24:	1d11      	adds	r1, r2, #4
 8003a26:	6019      	str	r1, [r3, #0]
 8003a28:	6813      	ldr	r3, [r2, #0]
 8003a2a:	e027      	b.n	8003a7c <_printf_i+0xa4>
 8003a2c:	2a73      	cmp	r2, #115	; 0x73
 8003a2e:	f000 80b4 	beq.w	8003b9a <_printf_i+0x1c2>
 8003a32:	d808      	bhi.n	8003a46 <_printf_i+0x6e>
 8003a34:	2a6f      	cmp	r2, #111	; 0x6f
 8003a36:	d02a      	beq.n	8003a8e <_printf_i+0xb6>
 8003a38:	2a70      	cmp	r2, #112	; 0x70
 8003a3a:	d1e5      	bne.n	8003a08 <_printf_i+0x30>
 8003a3c:	680a      	ldr	r2, [r1, #0]
 8003a3e:	f042 0220 	orr.w	r2, r2, #32
 8003a42:	600a      	str	r2, [r1, #0]
 8003a44:	e003      	b.n	8003a4e <_printf_i+0x76>
 8003a46:	2a75      	cmp	r2, #117	; 0x75
 8003a48:	d021      	beq.n	8003a8e <_printf_i+0xb6>
 8003a4a:	2a78      	cmp	r2, #120	; 0x78
 8003a4c:	d1dc      	bne.n	8003a08 <_printf_i+0x30>
 8003a4e:	2278      	movs	r2, #120	; 0x78
 8003a50:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003a54:	496e      	ldr	r1, [pc, #440]	; (8003c10 <_printf_i+0x238>)
 8003a56:	e064      	b.n	8003b22 <_printf_i+0x14a>
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003a5e:	1d11      	adds	r1, r2, #4
 8003a60:	6019      	str	r1, [r3, #0]
 8003a62:	6813      	ldr	r3, [r2, #0]
 8003a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0a3      	b.n	8003bb4 <_printf_i+0x1dc>
 8003a6c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003a70:	f102 0104 	add.w	r1, r2, #4
 8003a74:	6019      	str	r1, [r3, #0]
 8003a76:	d0d7      	beq.n	8003a28 <_printf_i+0x50>
 8003a78:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	da03      	bge.n	8003a88 <_printf_i+0xb0>
 8003a80:	222d      	movs	r2, #45	; 0x2d
 8003a82:	425b      	negs	r3, r3
 8003a84:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a88:	4962      	ldr	r1, [pc, #392]	; (8003c14 <_printf_i+0x23c>)
 8003a8a:	220a      	movs	r2, #10
 8003a8c:	e017      	b.n	8003abe <_printf_i+0xe6>
 8003a8e:	6820      	ldr	r0, [r4, #0]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003a96:	d003      	beq.n	8003aa0 <_printf_i+0xc8>
 8003a98:	1d08      	adds	r0, r1, #4
 8003a9a:	6018      	str	r0, [r3, #0]
 8003a9c:	680b      	ldr	r3, [r1, #0]
 8003a9e:	e006      	b.n	8003aae <_printf_i+0xd6>
 8003aa0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aa4:	f101 0004 	add.w	r0, r1, #4
 8003aa8:	6018      	str	r0, [r3, #0]
 8003aaa:	d0f7      	beq.n	8003a9c <_printf_i+0xc4>
 8003aac:	880b      	ldrh	r3, [r1, #0]
 8003aae:	4959      	ldr	r1, [pc, #356]	; (8003c14 <_printf_i+0x23c>)
 8003ab0:	2a6f      	cmp	r2, #111	; 0x6f
 8003ab2:	bf14      	ite	ne
 8003ab4:	220a      	movne	r2, #10
 8003ab6:	2208      	moveq	r2, #8
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003abe:	6865      	ldr	r5, [r4, #4]
 8003ac0:	60a5      	str	r5, [r4, #8]
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	f2c0 809c 	blt.w	8003c00 <_printf_i+0x228>
 8003ac8:	6820      	ldr	r0, [r4, #0]
 8003aca:	f020 0004 	bic.w	r0, r0, #4
 8003ace:	6020      	str	r0, [r4, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d13f      	bne.n	8003b54 <_printf_i+0x17c>
 8003ad4:	2d00      	cmp	r5, #0
 8003ad6:	f040 8095 	bne.w	8003c04 <_printf_i+0x22c>
 8003ada:	4675      	mov	r5, lr
 8003adc:	2a08      	cmp	r2, #8
 8003ade:	d10b      	bne.n	8003af8 <_printf_i+0x120>
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	07da      	lsls	r2, r3, #31
 8003ae4:	d508      	bpl.n	8003af8 <_printf_i+0x120>
 8003ae6:	6923      	ldr	r3, [r4, #16]
 8003ae8:	6862      	ldr	r2, [r4, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	bfde      	ittt	le
 8003aee:	2330      	movle	r3, #48	; 0x30
 8003af0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003af4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003af8:	ebae 0305 	sub.w	r3, lr, r5
 8003afc:	6123      	str	r3, [r4, #16]
 8003afe:	f8cd 8000 	str.w	r8, [sp]
 8003b02:	463b      	mov	r3, r7
 8003b04:	aa03      	add	r2, sp, #12
 8003b06:	4621      	mov	r1, r4
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f7ff feef 	bl	80038ec <_printf_common>
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d155      	bne.n	8003bbe <_printf_i+0x1e6>
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295
 8003b16:	b005      	add	sp, #20
 8003b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b1c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003b20:	493c      	ldr	r1, [pc, #240]	; (8003c14 <_printf_i+0x23c>)
 8003b22:	6822      	ldr	r2, [r4, #0]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003b2a:	f100 0504 	add.w	r5, r0, #4
 8003b2e:	601d      	str	r5, [r3, #0]
 8003b30:	d001      	beq.n	8003b36 <_printf_i+0x15e>
 8003b32:	6803      	ldr	r3, [r0, #0]
 8003b34:	e002      	b.n	8003b3c <_printf_i+0x164>
 8003b36:	0655      	lsls	r5, r2, #25
 8003b38:	d5fb      	bpl.n	8003b32 <_printf_i+0x15a>
 8003b3a:	8803      	ldrh	r3, [r0, #0]
 8003b3c:	07d0      	lsls	r0, r2, #31
 8003b3e:	bf44      	itt	mi
 8003b40:	f042 0220 	orrmi.w	r2, r2, #32
 8003b44:	6022      	strmi	r2, [r4, #0]
 8003b46:	b91b      	cbnz	r3, 8003b50 <_printf_i+0x178>
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	f022 0220 	bic.w	r2, r2, #32
 8003b4e:	6022      	str	r2, [r4, #0]
 8003b50:	2210      	movs	r2, #16
 8003b52:	e7b1      	b.n	8003ab8 <_printf_i+0xe0>
 8003b54:	4675      	mov	r5, lr
 8003b56:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b5a:	fb02 3310 	mls	r3, r2, r0, r3
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b64:	4603      	mov	r3, r0
 8003b66:	2800      	cmp	r0, #0
 8003b68:	d1f5      	bne.n	8003b56 <_printf_i+0x17e>
 8003b6a:	e7b7      	b.n	8003adc <_printf_i+0x104>
 8003b6c:	6808      	ldr	r0, [r1, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	6949      	ldr	r1, [r1, #20]
 8003b72:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003b76:	d004      	beq.n	8003b82 <_printf_i+0x1aa>
 8003b78:	1d10      	adds	r0, r2, #4
 8003b7a:	6018      	str	r0, [r3, #0]
 8003b7c:	6813      	ldr	r3, [r2, #0]
 8003b7e:	6019      	str	r1, [r3, #0]
 8003b80:	e007      	b.n	8003b92 <_printf_i+0x1ba>
 8003b82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b86:	f102 0004 	add.w	r0, r2, #4
 8003b8a:	6018      	str	r0, [r3, #0]
 8003b8c:	6813      	ldr	r3, [r2, #0]
 8003b8e:	d0f6      	beq.n	8003b7e <_printf_i+0x1a6>
 8003b90:	8019      	strh	r1, [r3, #0]
 8003b92:	2300      	movs	r3, #0
 8003b94:	6123      	str	r3, [r4, #16]
 8003b96:	4675      	mov	r5, lr
 8003b98:	e7b1      	b.n	8003afe <_printf_i+0x126>
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	1d11      	adds	r1, r2, #4
 8003b9e:	6019      	str	r1, [r3, #0]
 8003ba0:	6815      	ldr	r5, [r2, #0]
 8003ba2:	6862      	ldr	r2, [r4, #4]
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f7fc fb22 	bl	80001f0 <memchr>
 8003bac:	b108      	cbz	r0, 8003bb2 <_printf_i+0x1da>
 8003bae:	1b40      	subs	r0, r0, r5
 8003bb0:	6060      	str	r0, [r4, #4]
 8003bb2:	6863      	ldr	r3, [r4, #4]
 8003bb4:	6123      	str	r3, [r4, #16]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bbc:	e79f      	b.n	8003afe <_printf_i+0x126>
 8003bbe:	6923      	ldr	r3, [r4, #16]
 8003bc0:	462a      	mov	r2, r5
 8003bc2:	4639      	mov	r1, r7
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	47c0      	blx	r8
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d0a2      	beq.n	8003b12 <_printf_i+0x13a>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	079b      	lsls	r3, r3, #30
 8003bd0:	d507      	bpl.n	8003be2 <_printf_i+0x20a>
 8003bd2:	2500      	movs	r5, #0
 8003bd4:	f104 0919 	add.w	r9, r4, #25
 8003bd8:	68e3      	ldr	r3, [r4, #12]
 8003bda:	9a03      	ldr	r2, [sp, #12]
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	429d      	cmp	r5, r3
 8003be0:	db05      	blt.n	8003bee <_printf_i+0x216>
 8003be2:	68e0      	ldr	r0, [r4, #12]
 8003be4:	9b03      	ldr	r3, [sp, #12]
 8003be6:	4298      	cmp	r0, r3
 8003be8:	bfb8      	it	lt
 8003bea:	4618      	movlt	r0, r3
 8003bec:	e793      	b.n	8003b16 <_printf_i+0x13e>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	464a      	mov	r2, r9
 8003bf2:	4639      	mov	r1, r7
 8003bf4:	4630      	mov	r0, r6
 8003bf6:	47c0      	blx	r8
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	d08a      	beq.n	8003b12 <_printf_i+0x13a>
 8003bfc:	3501      	adds	r5, #1
 8003bfe:	e7eb      	b.n	8003bd8 <_printf_i+0x200>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1a7      	bne.n	8003b54 <_printf_i+0x17c>
 8003c04:	780b      	ldrb	r3, [r1, #0]
 8003c06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c0e:	e765      	b.n	8003adc <_printf_i+0x104>
 8003c10:	08004a06 	.word	0x08004a06
 8003c14:	080049f5 	.word	0x080049f5

08003c18 <_sbrk_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4c06      	ldr	r4, [pc, #24]	; (8003c34 <_sbrk_r+0x1c>)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4605      	mov	r5, r0
 8003c20:	4608      	mov	r0, r1
 8003c22:	6023      	str	r3, [r4, #0]
 8003c24:	f7fe fef2 	bl	8002a0c <_sbrk>
 8003c28:	1c43      	adds	r3, r0, #1
 8003c2a:	d102      	bne.n	8003c32 <_sbrk_r+0x1a>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	b103      	cbz	r3, 8003c32 <_sbrk_r+0x1a>
 8003c30:	602b      	str	r3, [r5, #0]
 8003c32:	bd38      	pop	{r3, r4, r5, pc}
 8003c34:	20001c04 	.word	0x20001c04

08003c38 <__sread>:
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c40:	f000 f8d6 	bl	8003df0 <_read_r>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	bfab      	itete	ge
 8003c48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c4a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c4c:	181b      	addge	r3, r3, r0
 8003c4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c52:	bfac      	ite	ge
 8003c54:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c56:	81a3      	strhlt	r3, [r4, #12]
 8003c58:	bd10      	pop	{r4, pc}

08003c5a <__swrite>:
 8003c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5e:	461f      	mov	r7, r3
 8003c60:	898b      	ldrh	r3, [r1, #12]
 8003c62:	05db      	lsls	r3, r3, #23
 8003c64:	4605      	mov	r5, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	4616      	mov	r6, r2
 8003c6a:	d505      	bpl.n	8003c78 <__swrite+0x1e>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c74:	f000 f868 	bl	8003d48 <_lseek_r>
 8003c78:	89a3      	ldrh	r3, [r4, #12]
 8003c7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c82:	81a3      	strh	r3, [r4, #12]
 8003c84:	4632      	mov	r2, r6
 8003c86:	463b      	mov	r3, r7
 8003c88:	4628      	mov	r0, r5
 8003c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c8e:	f000 b817 	b.w	8003cc0 <_write_r>

08003c92 <__sseek>:
 8003c92:	b510      	push	{r4, lr}
 8003c94:	460c      	mov	r4, r1
 8003c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c9a:	f000 f855 	bl	8003d48 <_lseek_r>
 8003c9e:	1c43      	adds	r3, r0, #1
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	bf15      	itete	ne
 8003ca4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003caa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003cae:	81a3      	strheq	r3, [r4, #12]
 8003cb0:	bf18      	it	ne
 8003cb2:	81a3      	strhne	r3, [r4, #12]
 8003cb4:	bd10      	pop	{r4, pc}

08003cb6 <__sclose>:
 8003cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cba:	f000 b813 	b.w	8003ce4 <_close_r>
	...

08003cc0 <_write_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4c07      	ldr	r4, [pc, #28]	; (8003ce0 <_write_r+0x20>)
 8003cc4:	4605      	mov	r5, r0
 8003cc6:	4608      	mov	r0, r1
 8003cc8:	4611      	mov	r1, r2
 8003cca:	2200      	movs	r2, #0
 8003ccc:	6022      	str	r2, [r4, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f7fe f9ac 	bl	800202c <_write>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_write_r+0x1e>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_write_r+0x1e>
 8003cdc:	602b      	str	r3, [r5, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	20001c04 	.word	0x20001c04

08003ce4 <_close_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4c06      	ldr	r4, [pc, #24]	; (8003d00 <_close_r+0x1c>)
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4605      	mov	r5, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	6023      	str	r3, [r4, #0]
 8003cf0:	f7fe fea6 	bl	8002a40 <_close>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_close_r+0x1a>
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_close_r+0x1a>
 8003cfc:	602b      	str	r3, [r5, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	20001c04 	.word	0x20001c04

08003d04 <_fstat_r>:
 8003d04:	b538      	push	{r3, r4, r5, lr}
 8003d06:	4c07      	ldr	r4, [pc, #28]	; (8003d24 <_fstat_r+0x20>)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	4605      	mov	r5, r0
 8003d0c:	4608      	mov	r0, r1
 8003d0e:	4611      	mov	r1, r2
 8003d10:	6023      	str	r3, [r4, #0]
 8003d12:	f7fe fe98 	bl	8002a46 <_fstat>
 8003d16:	1c43      	adds	r3, r0, #1
 8003d18:	d102      	bne.n	8003d20 <_fstat_r+0x1c>
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	b103      	cbz	r3, 8003d20 <_fstat_r+0x1c>
 8003d1e:	602b      	str	r3, [r5, #0]
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	20001c04 	.word	0x20001c04

08003d28 <_isatty_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4c06      	ldr	r4, [pc, #24]	; (8003d44 <_isatty_r+0x1c>)
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	4605      	mov	r5, r0
 8003d30:	4608      	mov	r0, r1
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	f7fe fe8c 	bl	8002a50 <_isatty>
 8003d38:	1c43      	adds	r3, r0, #1
 8003d3a:	d102      	bne.n	8003d42 <_isatty_r+0x1a>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	b103      	cbz	r3, 8003d42 <_isatty_r+0x1a>
 8003d40:	602b      	str	r3, [r5, #0]
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
 8003d44:	20001c04 	.word	0x20001c04

08003d48 <_lseek_r>:
 8003d48:	b538      	push	{r3, r4, r5, lr}
 8003d4a:	4c07      	ldr	r4, [pc, #28]	; (8003d68 <_lseek_r+0x20>)
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	4608      	mov	r0, r1
 8003d50:	4611      	mov	r1, r2
 8003d52:	2200      	movs	r2, #0
 8003d54:	6022      	str	r2, [r4, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f7fe fe7c 	bl	8002a54 <_lseek>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_lseek_r+0x1e>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_lseek_r+0x1e>
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	20001c04 	.word	0x20001c04

08003d6c <memmove>:
 8003d6c:	4288      	cmp	r0, r1
 8003d6e:	b510      	push	{r4, lr}
 8003d70:	eb01 0302 	add.w	r3, r1, r2
 8003d74:	d803      	bhi.n	8003d7e <memmove+0x12>
 8003d76:	1e42      	subs	r2, r0, #1
 8003d78:	4299      	cmp	r1, r3
 8003d7a:	d10c      	bne.n	8003d96 <memmove+0x2a>
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	4298      	cmp	r0, r3
 8003d80:	d2f9      	bcs.n	8003d76 <memmove+0xa>
 8003d82:	1881      	adds	r1, r0, r2
 8003d84:	1ad2      	subs	r2, r2, r3
 8003d86:	42d3      	cmn	r3, r2
 8003d88:	d100      	bne.n	8003d8c <memmove+0x20>
 8003d8a:	bd10      	pop	{r4, pc}
 8003d8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003d94:	e7f7      	b.n	8003d86 <memmove+0x1a>
 8003d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d9a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003d9e:	e7eb      	b.n	8003d78 <memmove+0xc>

08003da0 <__malloc_lock>:
 8003da0:	4770      	bx	lr

08003da2 <__malloc_unlock>:
 8003da2:	4770      	bx	lr

08003da4 <_realloc_r>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	4607      	mov	r7, r0
 8003da8:	4614      	mov	r4, r2
 8003daa:	460e      	mov	r6, r1
 8003dac:	b921      	cbnz	r1, 8003db8 <_realloc_r+0x14>
 8003dae:	4611      	mov	r1, r2
 8003db0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003db4:	f7ff baac 	b.w	8003310 <_malloc_r>
 8003db8:	b922      	cbnz	r2, 8003dc4 <_realloc_r+0x20>
 8003dba:	f7ff fa5b 	bl	8003274 <_free_r>
 8003dbe:	4625      	mov	r5, r4
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dc4:	f000 f826 	bl	8003e14 <_malloc_usable_size_r>
 8003dc8:	4284      	cmp	r4, r0
 8003dca:	d90f      	bls.n	8003dec <_realloc_r+0x48>
 8003dcc:	4621      	mov	r1, r4
 8003dce:	4638      	mov	r0, r7
 8003dd0:	f7ff fa9e 	bl	8003310 <_malloc_r>
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d0f2      	beq.n	8003dc0 <_realloc_r+0x1c>
 8003dda:	4631      	mov	r1, r6
 8003ddc:	4622      	mov	r2, r4
 8003dde:	f7fe fed5 	bl	8002b8c <memcpy>
 8003de2:	4631      	mov	r1, r6
 8003de4:	4638      	mov	r0, r7
 8003de6:	f7ff fa45 	bl	8003274 <_free_r>
 8003dea:	e7e9      	b.n	8003dc0 <_realloc_r+0x1c>
 8003dec:	4635      	mov	r5, r6
 8003dee:	e7e7      	b.n	8003dc0 <_realloc_r+0x1c>

08003df0 <_read_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4c07      	ldr	r4, [pc, #28]	; (8003e10 <_read_r+0x20>)
 8003df4:	4605      	mov	r5, r0
 8003df6:	4608      	mov	r0, r1
 8003df8:	4611      	mov	r1, r2
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	6022      	str	r2, [r4, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f7fe fdf6 	bl	80029f0 <_read>
 8003e04:	1c43      	adds	r3, r0, #1
 8003e06:	d102      	bne.n	8003e0e <_read_r+0x1e>
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	b103      	cbz	r3, 8003e0e <_read_r+0x1e>
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	bd38      	pop	{r3, r4, r5, pc}
 8003e10:	20001c04 	.word	0x20001c04

08003e14 <_malloc_usable_size_r>:
 8003e14:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	f1a0 0004 	sub.w	r0, r0, #4
 8003e1e:	bfbc      	itt	lt
 8003e20:	580b      	ldrlt	r3, [r1, r0]
 8003e22:	18c0      	addlt	r0, r0, r3
 8003e24:	4770      	bx	lr
	...

08003e28 <_init>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr

08003e34 <_fini>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr
